%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: SEO Line Icons Set.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For:  
%%CreationDate: 12/5/2016
%%BoundingBox: 0 0 600 600
%%HiResBoundingBox: 0 0 600 600
%%CropBox: 0 0 600 600
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 23805 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD80FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FD83FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD83FFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD
%70FFA8FD10FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFFFFFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8A8
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7DA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8A85252527D7DFFFFFFA8FFA8FFA8FFA8FFA8A87D7D7DA8
%A8FFA8FFA8FFA8FFA8FFA8FFA8FD20FF7DA8A87D7DFD0FFF7DA87D7D7DFD
%12FFA8A8A8FD0CFFA8FD067DA87DFD0AFFA87D7D7DA87D7DFD0DFFA8FFFF
%FFA8FFFFFFFD047D527D7D7D527DFFFFA8FFFFFFA8FFFFFFA8FF7DA8FFFF
%FF7D7DFFFFFFA8FFFFFFA8FFFFFFA8FF7DA8FFFFFF7D7DFFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FF7DFF7DFFFFFFA8FFFFFFA8FFFFFF7D52A87DFFFD
%05A852FD05FFA8FFFFA852FD047DA87D7DFD04FFA8FFFFFFA8FD0AFFA852
%7DA8A8A87DA8A8A852A8FD0AFFA8A8FD05FF7D7DFD0BFFA87DFD05FF7DA8
%FD0FFFA8A8FF7DFD0AFFA87DA87D52A852A87D527DA87DFD07FF7D7DA8A8
%527DA8A87DFD0CFFA8FFA8FFA8FFA8A852FD08FF7D52A8A8FFA8FFA8FFA8
%FFA87D7DFFA8FFA8FFA8A852A8FFFFA8FFA8FFA8FFA87D7DFFA8FFA8FFA8
%7D7DA8FFFFA8FFA8FFA8A87D7D7DA8A87DA8FF7D7D7DA8FFFFA8FFA8FFFF
%7DA8FF7DA8A87D7DFF7DFFFF7DA8FFA8FFA8FFA8A87DFFA87DA8FF7D7DA8
%FFA8FFA8FFA8FFA8FFA8FD08FFA87DFD08FF527D52A8FD06FFA87D7DFD09
%FF7DA8FD06FFA87D7DFD09FF7DFD07FFA8A8FFA8527DA8FD05FF7DFD07FF
%7DFFFFA8FFFF7DFFFFA8A8FFA8A8FD06FF7D7DA8FF7DFFFFA87DFD0EFFA8
%FD04FFA852FFA8FFFFFFA8FF7D7DA8A87DFFA8FD04FF7DA8FD0AFFA87DFF
%A8FD04FF7DA8FD05FFA8FD04FFA87DFFA8FD04FFA8A8FF7D7DFFFFA8FFFF
%FF7DA8FFFFA8FFFFFFA87D7DA852A87D7D7DA8FD057DFFA8FD04FFA8FD04
%7DA87D7DA8FFFFA8FFFFFFA8FFFFFFA8FD08FFA87DFD07FFA8A8FFA8A8FD
%06FF7DFD04FFA87DA8FD04FFA8A8FD06FF7DFD05FF7DFD05FFA8A8FD06FF
%A8A8FFA87DFD07FF7DFD07FF7DA8A87DA8FF7DA8A87D7DFF7DA8FD07FFA8
%FD067DA8FD0CFFA8FFA8FFA8FFFFA827FD047DA87D7D52A8FFA87DFFA8FF
%A8FFFF7DA8FFFFFF7D7D7DFD04FF7D7DFFA8FFA8FFFF7DA8FFFFFF7D7D7D
%FD04FF7D7DFFA8FFA8FFFFA87DFF7D7DFFFFA8FFA8FF7D7DFFFFA8FFA8FF
%A87DA8FF7DFFFFA8A8FF7DFFFFA87DFFA8FFA8FFA8FFA8A87D7D7DA8A87D
%52A8FFFFA8FFA8FFA8FFA8FD08FFFD057D5252FD047DFFA8A8FD06FFA87D
%A8A8A87DA87D7DA8A87D7DFD07FFA87DA8FF7D7DFF7D7DFFA8A87DFD07FF
%A8A8FFA87DFD06FFA87DFD07FF7DA8FFA87DA8527D7D7DFFFF7DFD0FFF52
%FF7DA8FD09FFA8FFFFFFA8FFFFA87DA87DA87D7D7DA87D5252527DFFFFFF
%A8FFFFFFA8A8A8527DFF7D527DA8A8FFA8FFFFFFA8FFFFFFA8A87D7D52FF
%7D7D7DA8A8FFA8FFFFFFA8FFFFA87DFF7D7DFD04FFA8FF7D7DFD04FFA8FF
%FFFF527D7D7DA87DA87D52A852A8FD04FFA8FFFFFFA8FFFFFFA8FFFFA852
%FF7DA8FD04FFA8FD0CFFA8FD07FFA8A8A8FD0CFF7DA87DFD11FFA87DA8FD
%0CFFA8A8FFA87DFD06FFA8A8FD08FFA852FFA8FF7DFF7DFF7D7DFD12FF7D
%FF7DA8FD07FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FD07FFA8FFA8FFA8FF
%A8FFA8FFA87DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7D7DFFA8FF
%A8FFA8FFA8FFA8FFFFA87DFF7D52FD077DFFFFFFA8FFA8FFA8FFFFA87D7D
%527D527D7DA8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8527D7DFF
%A8FFA8FFA8FD44FFA8A87DA8A8FFA8FFA8FD0FFFA8A87DA8A8FD17FFA8FD
%0AFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FD81FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FD81FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FD83FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8
%A8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8A8FFFFFFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0CFF7DFF7DFF
%FFA8FD0EFFA8A8527D7DA8FD14FF7D7DFD0EFF7DFD0DFFA8A8A8FFFD05A8
%FD22FFA8FFFFFFA8FD04FFA8A8A87DA8A8FD05FFA8FFFFFFA8FFFFFF52A8
%FFA8A8FF7D7DFD04FFA8FFFFFFA8FD05FFA8A8A8FF7D7D527DA8FFA8FFFF
%FFA8FF7D7D7DA87D7D7DA87D7D7DA8FFFFA8FFFFFFA87D7DA87DA87DA87D
%7DA8FFA8FFFFFFA8FFFFFFA8FFFD0BA8FFA8FFA8FFFFFFA8FD0AFF7DFFA8
%7DA8A87DFFA8A8FD0AFF7DFFFFA8527DA8FF7DA8FD0AFFA8A87DA87DA8A8
%7D527D7DFD07FFA87DA8FFA8FFA87D52FFA8A87DFD07FF7DFD07FF7DFD0B
%FF7D7DFD0AA8527DFD07FFA8FFA8FFA8FFA8FFA8A87D7DA8FFFFA852A8A8
%FFA8FFA8FFA8FFA8FF7DA8A87DFD04A87DFF7DA8A8FFA8FFA8FFA8FFA87D
%7DA87DA8A87D277D7DFFA8FFA8FFA8FFFFA87DFFFFA87D7D7DA87DFFA87D
%A8FFA8FFA8FFA87DA8FFA8FFA8FFFFA87DA87D7DA8FFA8FFA8FFFF7D7D7D
%A8FFA8FD05FF7DA87DFFA8FFA8FFA8FD0BFFA8A8FF7DA8FFA8A8FD0AFFA8
%FFA8A8FF7D7DFFA8A8FF7DFD08FF7DA8A87DA8A87D52A8A8FD09FFA8A8FF
%FF7DFFFD047DFFFF7DFD07FF7DFD07FF7DA8A8FF7DA8FD06FF7DFFA87DA8
%FD05FF7DFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FF7DA8A85252FF7DA8FFFF
%A8FFFFFFA8FFFFA852A87DA87DFFA87D7D7DA87DA8FFFFFFA8FFFFA87DA8
%A87D7D7D527D7D7DFFFFA8FFFFFFA8FFFFA87DFFA87DFF7D527DA8FFA87D
%A8FFFFFFA8FFA87DFD07FFA8A8FFFFA87DFFFFFFA8FFFF7DA8FFA87DA8FF
%FFA87DFFFFFF7DFFFFFFA8FD0DFFA87DFF7DA8FF7DA8FD09FFA8FD057DFF
%A87DA852A852FD07FF7DA87DA8A87D52A8A8A87DFD09FFA8A8FFFF7DA8FF
%A852FFFFFF7DFD07FF7DFFFFFFA8FFA8FF7DA8FFFFA8A8FD06FF7DFFFFFF
%7D527DA852A8FFFFA8A8FD07FFA8FFA8FFA8FFA8FFA8FFA87DA87D7DA87D
%FFA8FFA8FFA8FFA8FFA8FF7DFF7DFFA87D52FFFD04A8FFFFA8FFA8FFFFA8
%7DA87DA8277D7DA87DA8A8FFA8FFA8FFA8FFA8A87DFFFFFF7DA87DA8FFFF
%A87DFFFFA8FFA8FFA8A8527D7D7D527D7D7DA8FFFFA87DFFA8FFA8FFA87D
%A8FF7DA8A87D7DFF7D7DA8FF7DFFA8FFA8FFA8FD0CFFA87D7DA87DFD0CFF
%A8A8FF7DFF7DFFA87DFFA8A8FD07FFA8A87DA87DA87DA8A8A87DFD09FFA8
%7DFD04A87DA8A8A87DA87DFD09FF52FFFF7DFD06FFA8A8FD06FF7DFF7DA8
%FD06FFA87DA8A8FD09FFA8FFFFFFA8FFFFFFA8FF7D7D52A8FFFFA8FFFFFF
%A8FFFFFFA8FFA87DA8FF7D7D52A8FFA87DFFFFFFA8FD05FF7DA87DA87DA8
%7DA87D7DFD04FFA8FFFFFFA8FFFD04A87D7D527DA8A8A8FFFFFFA8FFFFFF
%A8FFA8A8FFFF7D7D7DA8FD047DA8FFA8FD04FF7D52FD09A87D527DFFA8FF
%FFFFA8FD0DFFA85252A8FD0DFFA87DA8FF7DA8FFA87DFD0AFFA87DA87DA8
%7DA8A87DFD0EFFFD04A87DFD15FF7D7DFD08FFFD04A87DA87DA87DA87DA8
%7DA8FD07FFA8FFA8FFA8FFA8FFA8FFA8FF7D2727A8FFFFA8FFA8FFA8FFA8
%FFA8FFA8FFA87D7D7D527D7DFFFFFFA8FFA8FFA8FFA8FFFFA87DA87DA87D
%7DA8FFA8FFA8FFA8FFA8FFA8FFA8FFFF7DA87DA87D7DFFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0FFFA8FFA8FFA8
%FD0EFF7DA8FD12FFA8FD11FFFD04A8FD10FFA8FFA8FFA8A8FD33FFA8FFFF
%FFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD83FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FD83FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FD81FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFF7D7D7D
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7D7DFFFFFFA8FFA8FFA8FFA8FFA8
%FFA8A8FD047DA8FFFFFFA8FFA8FFA8FFA8FFA8FFFFFF7D7D7DA8A8FFA8FF
%A8FFA8FFA8FFA8FFA8FFFFFF7DA87DA8FFFFA8FFA8FFA8FFA8FFA8FFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FD10FF7DA87D7D7DFD0DFFFD04
%A8FD0CFFA87D7DFF7D7DA8A87DFD0DFFFD047D52A8FD0EFFFD057DA8FD0A
%FFFD05A8FFA8A8A8FFA8A8A8FD08FFA8FFFFFFA8FFFFFFA8FD05FF7D7D7D
%A87D7D7DFFFFFFA8FFFFFFA8FFFFA87DA87DFF7D7D7DA8FD04FFA8FFFFFF
%A87DA8FF7D7D52A8FFA852FD05FFA8FFFFFFA8FF7D527DFFA87D52A8FFFF
%A8FFFFFFA8FFFFFFA8FF7D7D7DA8A87D52A8FFFFA8FFFFFFA8FFFF7D7DA8
%7DA87DA87DA87DA87D7D7DFFFFFFA8FD10FF7DA87DFFFFA87DA8FD0AFF7D
%A852A8FF7D7DFF7DFD08FF7DA8FF7DA8A8FF7D7DFFA87DFD0AFF7D7DFFFF
%FFA87DA8FD0BFF7D7D7DFF7DFFA87D7DFD09FF7DFFFFFFA87DA8FD06FFA8
%FD07FFA8FFA8FFA8FFA8FFA8FFFFFF52527DFFFFA87D7D7DFFA8FFA8FFA8
%FFA8FFA8A8FF7D7DFF52A8A87DFFFFA8FFA8FFFFA87DFF52FFFFFFA8A87D
%7DFF7DA8FFA8FFA8FFA8FFFFFF527DFD04FF52A8FFFFA8FFA8FFA8FFA8FF
%FFA852A852A852A87D7DA8FFA8FFA8FFA8FFA87DA8FFA8A87D7D7DA8FFFF
%A8FF7DFFA8FFA8FFA8FD0CFFFD047DFFFF7DA87DFD08FFFD047DFF7DA8FF
%7DA8FF7DFD07FF7DFF7DA8FFFF7D7D7DA87DFFA8A8FD09FFA852A8FFFF7D
%7DA8FD0BFF7D7DA8A87D7DA8A87DFD09FF7DFFFFFFA8A8FFFF7D7DA8FFA8
%A8FD09FFA8FFFFFFA8FFFFFFFD097DFFFFFFA8FD05FF7DFF527DFF7D7DFF
%52A8A8A8FFFFA8FFFFFFA8A8FF7DA8A87D7D52A8A8FF527D7DFFA8FFFFFF
%A8FFFFFFA87D527D527D7DFFA8FFFFFFA8FFFFFFA8FFFFA8527D7DA87DA8
%7D7DFD04FFA8FFFFFFA8A8A8FFFFA87DFFFFA852A8FFFF7DFFA8FFFFFFA8
%FD0AFFFD097DFD09FFA8A8FF7D7DFF7DA8FF7DA8FF7DFD07FF7DFF7DA8FD
%057DA8A87D7DA8FD0AFFA8A87DA8A8FD0EFF7DA8A87DA87DA8A8FD09FF7D
%FFFFFFA8A8A87D7DFFFFFFA8A8FD07FFA8FFA8FFA8FFFFFF7D7D7DFFA8FD
%047DFFFFFFA8FFA8FFA8FFFFFF7DFF527DFF7D7DFF52A8A87DA8FFA8FFA8
%FFFF7DA8A87D7D527D527D7DA8A8A87DFFA8FFA8FFA8FFA8FFA8FFFF7DA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8FFA8A8FF7DFFA8FFA8FFA8FFA8
%FFFF7DA8FFFFA852A8A8FFA8FFFFFF7DFFA8FFA8FFA8FD08FF7DA87DFFFF
%FF7D7D7DFD0BFFA8A8FF7D7DFF7DA8FF7DA8FF7DFD07FF7DA8FF7D7DFFFD
%04A852A87DFD0DFF7D7DFD10FF7DFFFFFF7DA8FD0AFF7DFFA8A8A8FFFFFF
%A8FFA8FFA8A8FD07FFA8FFFFFFA8FFA87D7DA8FFA87D7D7DFFA8FFFFFFA8
%FFFFFFA8FFFFFF7DFF527DFF7D7DFF52A8FF7DA8FFFFFFA8FFFFFF52FFA8
%7D7DFFA8A87D7D527DFD04FFA8FFFFFFA8FFFFFFA8A87DFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFA87DFFA87DFD04FFA8FFFFFFA8FFFF7DA8A8527D7D
%A87DA87DA8A8FF7DFFFFFFA8FD0AFF7D7D7DA87D7D7DFD0EFFFD047DA8FD
%057DA87DFD08FFA87DFFFFA87DA852A8A87DFD0DFFA87DA8FD11FF7DA8A8
%A8FD0BFF7DA87D7D7DA87DA8A8A87DA87D7DFD07FFA8FFA8FFA8FFA8FFFD
%057DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD047D527D527D7D7D52A8FFFF
%A8FFA8FFA8FFFFA852A8A8FFA87D527DA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A87D7DFFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8527DFFA8FFA8FFA8FF
%A8FFA8FFA8FFFD0DA8FFA8FFA8FFA8FD0AFF7DA8A8FD10FFA87DA87DA87D
%A87DA87DA8A8FD0BFFA8A87DA87DFD11FF7DA8FD12FFA8FD24FFA8FFFFFF
%A8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FF
%FFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FD81FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD81FFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD
%83FFA8FFA8FFA8FFA8FFA8FFFFFF7D7D7DFFFFFFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7D
%A8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7DA8FFA8FFA8FFA8FFA8FFA8FFA8A8
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFF
%A8FFA8FFA8FFA8FFA8FD0AFF7DFD04A87DA8A8A8FD13FFA87DA8FD07FFA8
%7D7DFD05FF7D7D52FD0EFF7D52FD0DFFA87D7DFD15FFA87D7DA87DA8FD0D
%FFA8FFFFFFA8FF7D7D7DA8A8FF7D7DA87DA8FFFFFFA8FFFFFFA8FD07FFA8
%A87DA87DFFFFFFA8FD04FF7D7DA8A8FFFFFF7D7D7DFFFFA8A8FFA8FFFFFF
%A8FFFFFFA8FF7D7DFD04FFA8FFFFFFA8FFFFFFA8FFFF7DA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FD04FFA8A8FFFFA87DFD05FFA8FFFFFFA8FD09FF
%A8A8FFFD047DA8FF7DFD0BFFFD04A87D7D7DFFFFA8A8FD07FFA8A87D7DFF
%FFFFA87DA8FFA852A8FD0AFFA8A87DFD0FFFA8A8FD10FFA8A87DA8527D7D
%A87D7D7DA87DA8FD07FFA8FFA8FFA8FFA8FF7DA87DA87D52FD047DA8FFA8
%FFA8FFA8FFFFA852A852A87DA8A8FFA8FF7D7DA8FFA8FFA8FFA8FFA8A827
%7DFFFF7DA8FD057DFFA8FFA8FFA8FFA8FFFFFF7D7D7DFFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FF52A87DA87DA87DA87DA8A8FFA8FFA8FFFF7D7DFFFD0AA8
%7DFFA8FFA8FFA8FD08FF7DA8A87DA8FFA87D7DA8A87DA8FD07FF7DFFFFA8
%FD07FFA87DA8FD0AFF527D7DA8FFA87D7D7DFD0BFF7DA87D7D527DFD0DFF
%7D7DFD07A87DA8FD06FF7DFD0CFFA8FD07FFA8FFFFFFA8FFA87DFFFF7D52
%A8FF527D7DFFA87DFD04FFA8FFA87DFFFF7DFFA8FFFFFFA8FF7DA87DFFFF
%FFA8FFFFFFA8FFFFFF277DFF7D7DA8A8FFA8FFFFFFA8FFFFFFA8FFA85252
%A87D7D52FFFFFFA8FFFFFFA8FFFFFFA8FF7D7DFD07FF7DA8FFFFFFA8FFFF
%7D7DFFFFFFA8FFA8FFFFFFA8A87DFFFFFFA8FD0AFFA87DA8FD047DFF7D7D
%A87DA8FD07FF7DA8A8A8FD07FFA852FD0BFF7DA852527DFD0FFF7DA8A8FF
%A87DA8FD0DFF52FD07FF7DFD07FF7D7D7DA87D7D7DA87DA87DA87D7DFD07
%FFA8FFA8FFA8FFA8FFFD047D527D7DFF7D52A8FFA8FFA8FFA8FFA8FFFD07
%7DFFFFFF7DA8FFFFA8FFA8FFA8FFFFFF52A8FF7D27527DFFA8FFA8FFA8FF
%A8FFA8FFA8FFFFA87DFFFFFF7DFFA8FFA8FFA8FFA8FFA8FFA8FFFF7D7DFF
%A8FFA8FF7DA8FFFFA8FFA8FFA87DA8FFA8A8527D7D7DA8FFA8FF7DFFA8FF
%A8FFA8FD09FFA8A8FFA87D7D7DA8FF7DA8FD0AFF7DFFA87DA8A87DA8FFA8
%A8FD09FF7DA8FF7D7D7D27527DFD0DFF7DA8FFFFA8A8FD0EFFA87D7DA87D
%A87DA8FD08FF7DFD05FFA8A8FD04FFA8A8FD09FFA8FFFFFFA8FFFD047DA8
%FF7D52A8FF7DA8FFFFA8FFFFFFA8FFFFA87DFF7DFFFFFFA87D52FFFFFFA8
%FFFFFFA8FF7DA8FF7D7DFFA87D27527DFFFFFFA8FFFFFFA8FFFFFFA8FF7D
%FFFF7DA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FF7DA8FFFFFFA8FD04FFA8FF
%FFFFA8A8A8FFA8FD09FF7DFFA8FFFFFFA8FD0AFFA8A8A87DA87DFF7DA8FF
%7DA8FD09FF7DFFA8A8FD04FFA8A8FD07FFA8A8FF7D7DFD04FF7D27527DFD
%0BFFA87D7DA852A8FD0FFF7D527DA87D52A8FD08FF7DFFA8FFA8FFA8FFA8
%FFA8FFA87DFD07FFA8FFA8FFA8FFA8FFA8FFFFFF7D7DA8FFA8FD047DFFA8
%FFA8FFA8FFA8FF7D7D7DA8FFFFA8FFFFFFA8FFA8FFA8FFFFA87D7D7DFFA8
%FFA8FFA87D277DA8FFA8FFA8FFA8FFA8FFFFA87DFFA87D7DFFA8FFA8FFA8
%FFA8FFA8FFA8FFFFFF527D7DA87D527DFFA8FFA8FFA8FFFFA8FD0D7DFFA8
%FFA8FFA8FD13FFA87DFD0BFFA8FD10FFA8A8FD08FFA8FD0CFFA8A87DA87D
%A8FD14FFA8FD1EFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FF
%FFFFA8FD07FFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FD0BFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD83FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FD83FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FD81FFA8FFA8FFA8FFA87D7DA87DA8A8FFFFFF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FD047DA8FD057DA8A8FFA8FFA8FFA8FFA8
%A8FD057DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8A87DA87D7DA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8
%FFA87D7DFFA8FFA8FFA8FFA8FFA8FFA8FD08FF7DFFFD04A87DFD0EFFA8A8
%FFA8FFA8FFA8FFFFA8A8FD08FFA87DFF7D7DA8A87DFD11FF7DA8FD0EFFA8
%7DFD06A87DFD0EFFA8527D7DFD0CFFA8FFFFFFA8FFFF7DA8A87DFFFFA87D
%FD05FFA8FFFFFFA8FFFFFF7DA87DA87DA87D7D7DA87DA8FD04FFA8FFFFFF
%FD057DA87D7DA8FFFFFFA8FFFFFFA8FFFFFF7DA8FD077DA87DA8FD04FFA8
%FFFFFF7D7DA8FD067DA87DFFA8FFFFFFA8FFFFFFA8FFFFFFA87D52FD05FF
%A8FFFFFFA8FD0AFF7DFF7D7DFFFFA8FF7DFD0CFFA87D7DFD04A8527D7DA8
%A8FD08FFA8A8FD05FF7DFD0BFFA87DFFFFA8FFA8FFA8FFA8FF7DFD07FFA8
%7DA87DA8FFA8FF7DA87DA87DFD0DFFA8A8FD0DFFA8FFA8FFA8FFFFFD04A8
%FFA87DA8A852FFFFFFA8FFA8FFA8FFA8FF7DA8FD057DA87DA87DA8FFFFA8
%FFA8FFA8FF7DA8A8FFA8A87D7D7DA8A8FFA8FFA8FFA8FFA8A87DFFA8FFFF
%FFA8FFA87DA8A8FFFFA8FFA8FFFFA8A87DA8FFA8FF7DA8FF7D7D7DA8FFA8
%FFA8FFA8FFA8FFA8FFA87D7DFFFFFFA8FFA8FFA8FFA8FFA8FD08FFA8A8FF
%FFA87DA87DFFFF7DFD0AFFFD05A87DA8A8A87DA8A8FD08FFA8A8FFFFA87D
%A8A8A87DA8FD08FFA8A8FFFFA8FFA8527D7DFFFF7DFD07FF7DA87DFFFFFF
%A8A8FFFFFD04A8FD0CFF7D7DA8FD0EFFA8FD05FF7DFFA87DA87DA87DFFA8
%52FFFFFFA8FFFFFFA8FF7DA87DA87DA87DA8A8A87DA8FFFFA8FFFFFFA8FF
%7DA8FFFF7DA8525252A87DFFFFFFA8FD05FF7DFFA852527DA87D7DFFA8A8
%FFFFA8FFFFFFA8A87D7DA8FFA87D7DFFFFA852A87DFFA8FFFFFFA8FFFFFF
%A8FFFFA8A8FFFFFFA8FFFFFFA8FFFFFFA8FD0AFF7DFFA87DA87DA87DFFA8
%7DFD08FFA87DA87DA8A8A87DFD04A8FD08FFA8A8FFA87DA8527D52A8A8A8
%FD07FFA8A8FF7DA8FFA8FD05FF7DFD07FF7DA87DFFFFFF7D7D7DFFA87DA8
%A8FD0CFFA8A8FD0DFFA8FFA8FFA8FFA8FFFFA852FFA87DA87D7D7DFF7D7D
%FFA8FFA8FFA8FF7DA87DA8A87D7DA87D7D7DA8A8FFA8FFA8FFA8FF7DA8FF
%FF7DA87D5252A87DFFA8FFA8FFA8FFFFA87DFF7DFD07FFA87DA8FFA8FFA8
%FFA87D7DA8FFFFA8FFFFA8A8FF7DA87DFFA8FFA8FFA8FFA8A8FFFFFFA87D
%FFA8FFA8A8A8FFA8FFA8FFA8FD0CFF7DFFA87DA8A8FFA87DFD08FFA8A87D
%A8A87DA8A8A87DA8A8FD08FFA8A8FFFFA87DA8A8A87DA8FD08FFA87D7DA8
%7DA87DA87DA87D7D7DFD07FF7DA87DFD07FF7DA87DFD09FF52FFFFFFA8A8
%FFFFA852A8FD08FFA8FFFFFFA8FFFFFFA8FFFFA852FFA87DFFA87DFD05FF
%A8FFFFFF7DA87D7D7DA87D7D7DA87DA8FD04FFA8FFFFFF7DA8A8FFA8A87D
%7D7DA8A8FFA8FFFFFFA8FFFFFFFD04A8FD047DA8FFA8FFA8FFFFFFA8FFFF
%FF7DA87DA8FFA8FFFF7DA87D7DFD04FFA8FD04FFA87DFFFFA8A8FFA87DA8
%FFA8FFFFFFA8FD10FF7DFFFFA87DFD0AFFA87DA8A8A87DA8A8A87DA8A8FD
%08FF7D7DA87D7D7DA852FD0FFFA8A87DFF7DFD0CFFA87DA87DA852A87DA8
%A87DFD0CFF7DA87DA87D7DA8FD0AFFA8FFA8FFA8FFA8FFA8FFA8FFFFA852
%A87DFFA8FFA8FFA8FFA8FFA8FF7D7D527D7D5252FD047DA8FFFFA8FFA8FF
%A8FF7D7DA8A87DFF7D7DFFFFA8FFA8FFA8FFA8FFA8FFA8FFA87DA87DA8A8
%7DFFA8FFA8FFA8FFA8FFA8FFFFA87DA87DA87DA87D7DA8FFA8FFA8FFA8FF
%A8FFA8FFFFFFA87D52A8FFFFA8FFA8FFA8FFA8FFA8FD10FF7DFD0CFFA87D
%A8FD077DA8A8FD09FF7DA87DA87DA8FD10FFA8FFA8FFA8A8FD0EFFA8A87D
%A87DFD11FFA8FD10FFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8
%FD0FFFA8FFFFFFA8FD0BFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FD07FFA8FFFFFFA8FFFFFFA8FD81FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD81FFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FD83FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FD0FFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0C
%FFA8A8A8FFA8FD1FFFA8FD0C7DA8FD1AFFA8FFA8FFFD09A8FD1EFFA8FFFF
%FFA8FFFFFF7DA87D7D7DA87DFD05FFA8FFFFFFA8FF7D7D527D527D527D52
%7D52A8FFFFA8FFFFFFA87D7DA87DA87D7D7DA87DA87D7D7DFFA8FFFFFFFD
%08A87DA8A8A8FD04FFA8FFFFFFA8FD047DFD09A87DFFA8FFFFFFA8FD07FF
%A8FD07FFA8FFFFFFA8FD08FFA87D7D7DA8FF7DA8FF7D7DFFA8FD07FFA852
%7DA8A8A87DFD04A87D52FD07FF7DA8FD05FF7D7DFFFFFF7DA8FD06FF527D
%527D7DA87DA87D7D7DFF7DFD07FF52FD047DA87DA87DA87DA87DA8FD08FF
%A87DA8FD04FFA87DA8FD09FFA8FFA8FFA8FFA87D527D7D7D527D52FD067D
%FFA8FFA8FFFFFF27FFFFFF7D7D7DA8FFFFA87DA8FFA8FFA8FFA87D7DFFFF
%FFFD047D52A8FF7D7DFFA8FFA8FFA8FD047DA87DA87DA87D7D52527DFFA8
%FFA8FFA87DA8FFA8FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8FF7D7DA8FD04
%7DA87DFF7DA8FFFFA8FFA8FFA8FD08FFA8FFFFFFFD057DFFFFA8FFA8FD06
%FFA852FFFF7DA8A8A852FFFFA87DFD07FF7DA8FFFF7DA87DA87DA8A8FF7D
%A8FD06FF7DA8A8A8FD06FF525252FD07FF7DFD06FFA8FD04FFA8A8FD07FF
%A8A8FF7D7DFFFF52A8FFA8A8FD08FFA8FFFFFFA8FFA8A8A8FF7D527DFFA8
%527DFFA8A87DFFFFFFA8FFFFFF27FFFF7DA8A82752A8FFA87DA8FFFFFFA8
%FFFF7D7DFF7D52FD057DA8FF7D7DFFFFFFA8FFA8FD067DA87D7D525252FD
%05FFA8FFA87DA8FFA87DA8FF7DA87DFFFFA87DFFFFFFA8FFFFFFA8525252
%7DFFFF7D527D52A8FD04FFA8FD0AFFA8FFFF7D7DFFFFFF7D7DA8FFA8A8FD
%06FFA852A8FFA87DFF7D52FFFFA87DFD07FF7DA8FFA8FD067DA8FF7D7DFD
%06FF7DA87DA8FD047D525252FD09FF7DFFFF7DA8FF7DA8FF7DA8FFA8A8FD
%06FFA87DA8FFA852527D52A8FFFF7DFD08FFA8FFA8FFA8FFA8A8A8FF7D7D
%FFFFFFA852FFFFA87DFFA8FFA8FFA8FF27FFFFFFA87D7DFFFFFF7D7DFFFF
%A8FFA8FFA87D52FD0A7D527DFFA8FFA8FFA8FD077D5252527DA8FFA8FFA8
%FFA8FFA87DFFFF7D7DA87DA8A87DFFFFA87DFFA8FFA8FFFF7D7DA8A87D7D
%FFA8A87DA8A87D7DFFA8FFA8FFA8FD08FFA8FFFFA852A8A8A8527DFFFFA8
%A8FD06FFA85252FD047DA8FD047D52FD07FFFD0D7DA8FD06FF7DA87D7D7D
%A8A87DA8FF7DFD09FF7DFFFFFFA8A87DFFA8FFFFFFA8A8FD06FFFD04A852
%FFA8FFFF7D7DA8A8FD0AFFA8FFFFFFA8A8FFFFFFA8527D527DFD04FF7DFF
%A8FFFFFFA87D7D7D527D522727FD067DFFA8FFFFFFA87D7DA87DA87D7D7D
%A87DA87DA87DFFA8FFFFFFA8FD047DA87DA8A8A87D7DA8FFFFFFA8FFFFFF
%A8A8FD04FFA8FD06FFA87DFFA8FFFFFFA8FFFFFFA8FD047DA87DA8FD04FF
%A8FFFFFFA8FD08FF7DA87DA8FD057DA87DA87DA8FD06FF7DA8A8A87DA87D
%7D7DA8A8A87DA8FD06FFFD05A87DA8A87DFD04A8FD07FFFD0BA8FD09FF7D
%FD0BA87DA8FD1BFFA8FFA8FFA8FFFFFD0EA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFFFFFA8FFA8FFA8FD04FFA852A87D7DA8FFFFFFA8FFA8FF
%A8FFA8FD0BFFA8FFA8FFA8FFA8FFA8A87DA87DA87DA87DA87DA87DA8A8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD34FFA8FF
%A8FFA8FD48FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FD83FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD83FFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD81FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">SEO Line Icons Set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-12-05T15:00:58+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-12-05T15:00:58+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-12-05T15:00:58+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgECWAJYAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABACWAAAAAEA&#xA;AQJYAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9O4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FViTwu7Ikis6faUEEjtuBiq/FXYq7FXYq0HQsyhgWX7QB3Fd98VbxV2KuxV2KoDVtd0nSEjf&#xA;UblbZZiVjLAnkVBY9AeiiuKoyGaKeFJoXWSGVQ8ciEMrKwqGBHUEYqvxV2KqF7fWVjbPc3txHa20&#xA;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&#xA;2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:1a46c2a7-2201-5e45-9681-40014e557b3c</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:1a46c2a7-2201-5e45-9681-40014e557b3c</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:4b687524-da6a-7d42-841e-ca8efe18441e</stRef:instanceID>
            <stRef:documentID>xmp.did:4b687524-da6a-7d42-841e-ca8efe18441e</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A267E749CEE2E411B943E4B4D3FA7223</stEvt:instanceID>
                  <stEvt:when>2015-04-14T20:47:15+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:87E79CDA26F0E411BB0080FDE5086C5F</stEvt:instanceID>
                  <stEvt:when>2015-05-01T20:23:59+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0EE4F3C1DAE6E511BEB6F8DDCF6061A9</stEvt:instanceID>
                  <stEvt:when>2016-03-10T18:11:35+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:893a9ca6-4769-834c-b566-fe2d85478148</stEvt:instanceID>
                  <stEvt:when>2016-05-13T15:38:39+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1a46c2a7-2201-5e45-9681-40014e557b3c</stEvt:instanceID>
                  <stEvt:when>2016-12-05T15:00:58+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>600.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=74 G=74 B=74</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>73</xmpG:red>
                           <xmpG:green>73</xmpG:green>
                           <xmpG:blue>73</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=246 G=246 B=246</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>246</xmpG:green>
                           <xmpG:blue>246</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -600 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 600 li
600 600 li
600 0 li
cp
clp
600 600 mo
0 600 li
0 0 li
600 0 li
600 600 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.964706 .964706 .964706 rgb
f
188.653 160.675 mo
165.433 160.675 li
165.433 158.975 li
188.653 158.975 li
188.653 160.675 li
cp
.290196 .290196 .290196 rgb
f
151.873 160.675 mo
128.653 160.675 li
128.653 158.975 li
151.873 158.975 li
151.873 160.675 li
cp
f
159.503 189.825 mo
157.803 189.825 li
157.803 166.605 li
159.503 166.605 li
159.503 189.825 li
cp
f
159.503 153.045 mo
157.803 153.045 li
157.803 129.825 li
159.503 129.825 li
159.503 153.045 li
cp
f
158.653 153.895 mo
155.383 153.895 152.724 156.556 152.724 159.825 cv
152.724 163.095 155.383 165.754 158.653 165.754 cv
161.922 165.754 164.582 163.095 164.582 159.825 cv
164.582 156.556 161.922 153.895 158.653 153.895 cv
cp
158.653 167.455 mo
154.446 167.455 151.023 164.032 151.023 159.825 cv
151.023 155.618 154.446 152.195 158.653 152.195 cv
162.86 152.195 166.283 155.618 166.283 159.825 cv
166.283 164.032 162.86 167.455 158.653 167.455 cv
cp
f
158.653 144.221 mo
150.049 144.221 143.049 151.221 143.049 159.825 cv
143.049 168.429 150.049 175.429 158.653 175.429 cv
167.257 175.429 174.257 168.429 174.257 159.825 cv
174.257 151.221 167.257 144.221 158.653 144.221 cv
cp
158.653 177.129 mo
149.112 177.129 141.349 169.366 141.349 159.825 cv
141.349 150.284 149.112 142.521 158.653 142.521 cv
168.194 142.521 175.957 150.284 175.957 159.825 cv
175.957 169.366 168.194 177.129 158.653 177.129 cv
cp
f
158.653 134.547 mo
144.714 134.547 133.375 145.887 133.375 159.825 cv
133.375 173.764 144.714 185.103 158.653 185.103 cv
172.591 185.103 183.931 173.764 183.931 159.825 cv
183.931 145.887 172.591 134.547 158.653 134.547 cv
cp
158.653 186.803 mo
143.777 186.803 131.675 174.701 131.675 159.825 cv
131.675 144.95 143.777 132.847 158.653 132.847 cv
173.528 132.847 185.631 144.95 185.631 159.825 cv
185.631 174.701 173.528 186.803 158.653 186.803 cv
cp
f
460.622 44.9038 mo
460.623 44.9053 460.625 44.9077 460.628 44.9111 cv
460.622 44.9038 li
cp
418.204 44.9224 mo
418.188 44.9453 418.172 44.9663 418.154 44.9873 cv
413.06 50.4502 410.273 57.502 410.273 64.8862 cv
410.278 65.0156 li
410.309 72.5435 413.218 79.6816 418.471 85.1177 cv
418.551 85.2134 li
424.101 90.9077 431.505 94.0298 439.418 94.0298 cv
447.33 94.0298 454.735 90.9072 460.271 85.2378 cv
460.333 85.1553 li
465.651 79.646 468.563 72.4604 468.563 64.8862 cv
468.563 57.5044 465.777 50.4502 460.721 45.0234 cv
460.631 44.9194 li
460.477 44.7515 460.316 44.5928 460.157 44.4346 cv
460.024 44.2993 li
459.744 44.0186 459.495 43.7798 459.251 43.5527 cv
459.172 43.5527 li
458.962 43.29 li
453.619 38.4287 446.688 35.748 439.439 35.7422 cv
432.189 35.748 425.296 38.3984 419.961 43.209 cv
419.805 43.5488 li
419.591 43.5503 li
419.347 43.7764 419.106 44.0063 418.867 44.2437 cv
418.78 44.3354 li
418.55 44.564 418.377 44.7329 418.208 44.918 cv
418.204 44.9224 li
cp
439.418 95.73 mo
431.043 95.73 423.206 92.4253 417.351 86.4253 cv
417.289 86.3604 417.24 86.2993 417.195 86.2393 cv
411.689 80.5459 408.61 72.9907 408.579 65.0249 cv
408.574 64.8862 li
408.574 57.0698 411.521 49.606 416.875 43.8701 cv
416.874 43.8706 416.873 43.8711 416.873 43.8711 cv
416.866 43.8711 416.907 43.8105 416.983 43.7388 cv
417.164 43.543 417.348 43.3618 417.53 43.1821 cv
417.57 43.1392 417.619 43.0879 417.668 43.0391 cv
417.962 42.7466 418.259 42.4653 418.559 42.1895 cv
418.716 41.8491 li
418.935 41.8462 li
424.565 36.8174 431.817 34.0483 439.391 34.042 cv
447.018 34.0483 454.269 36.8159 459.895 41.8423 cv
459.979 41.8423 li
460.196 42.1118 li
460.527 42.415 460.852 42.7217 461.169 43.0415 cv
461.169 43.041 461.169 43.0405 461.169 43.0405 cv
461.173 43.0405 461.223 43.0923 461.27 43.144 cv
461.353 43.2271 li
461.514 43.3862 461.676 43.5464 461.832 43.7144 cv
461.871 43.7437 li
461.992 43.8975 li
467.315 49.6069 470.262 57.0728 470.262 64.8862 cv
470.262 72.9038 467.183 80.5083 461.59 86.2988 cv
461.579 86.3218 461.541 86.3701 461.496 86.417 cv
455.63 92.4253 447.792 95.73 439.418 95.73 cv
cp
f
438.568 94.8804 mo
438.542 34.8926 li
440.241 34.8916 li
440.268 94.8794 li
438.568 94.8804 li
cp
f
439.521 95.7236 mo
439.314 94.0361 li
444.583 93.3901 450.217 84.4839 452.419 73.3188 cv
455.007 60.2017 452.834 43.4131 438.976 35.6333 cv
439.808 34.1509 li
454.458 42.3755 456.79 59.9463 454.087 73.6479 cv
451.71 85.6958 445.585 94.98 439.521 95.7236 cv
cp
f
439.259 95.7236 mo
433.195 94.98 427.069 85.6943 424.693 73.644 cv
421.991 59.9434 424.324 42.374 438.976 34.1509 cv
439.808 35.6333 li
425.948 43.4121 423.774 60.1987 426.361 73.3149 cv
428.563 84.4819 434.197 93.3901 439.466 94.0361 cv
439.259 95.7236 li
cp
f
440.746 52.0972 mo
431.341 52.0972 422.227 49.3057 416.444 45.8613 cv
417.313 44.4004 li
428.824 51.2554 448.81 53.2363 461.026 44.4829 cv
462.017 45.8647 li
455.734 50.3672 448.149 52.0972 440.746 52.0972 cv
cp
f
461.293 85.4819 mo
449.094 76.5078 428.97 78.4351 417.324 85.3677 cv
416.455 83.9067 li
428.566 76.6968 449.541 74.7261 462.301 84.1128 cv
461.293 85.4819 li
cp
f
409.412 65.7505 mo
409.412 64.0503 li
469.397 64.0215 li
469.397 65.7217 li
409.412 65.7505 li
cp
f
505.2 275.359 mo
563.501 275.359 li
563.501 231.191 li
505.2 231.191 li
505.2 275.359 li
cp
565.2 277.059 mo
503.501 277.059 li
503.501 229.491 li
565.2 229.491 li
565.2 277.059 li
cp
f
526.638 238.11 mo
526.638 260.165 li
547.273 249.138 li
526.638 238.11 li
cp
524.938 263.001 mo
524.938 235.274 li
550.881 249.138 li
524.938 263.001 li
cp
f
557.099 269.574 mo
520.527 269.574 li
520.527 267.874 li
557.099 267.874 li
557.099 269.574 li
cp
f
515.891 269.574 mo
511.602 269.574 li
511.602 267.874 li
515.891 267.874 li
515.891 269.574 li
cp
f
516.74 270.227 mo
519.678 270.227 li
519.678 267.29 li
516.74 267.29 li
516.74 270.227 li
cp
521.377 271.927 mo
515.041 271.927 li
515.041 265.59 li
521.377 265.59 li
521.377 271.927 li
cp
f
354.188 348.685 mo
354.178 347.298 li
354.159 344.885 354.14 342.37 354.147 341.695 cv
354.166 339.769 353.286 338.882 352.46 338.873 cv
352.456 338.873 352.452 338.873 352.448 338.873 cv
351.792 338.873 351.127 339.449 351.113 340.742 cv
351.034 348.64 li
349.335 348.622 li
349.414 340.726 li
349.438 338.388 350.954 337.173 352.449 337.173 cv
352.458 337.173 352.468 337.173 352.477 337.173 cv
354.174 337.19 355.877 338.755 355.847 341.714 cv
355.84 342.386 355.859 344.885 355.878 347.284 cv
355.888 348.672 li
354.188 348.685 li
cp
f
345.715 348.601 mo
344.016 348.554 li
344.017 348.506 344.145 343.717 344.093 340.803 cv
344.024 337.021 346.386 336.306 347.111 336.176 cv
348.713 335.896 350.316 336.722 350.782 338.063 cv
351.281 339.5 351.118 341.914 351.098 342.185 cv
349.402 342.058 li
349.449 341.419 349.501 339.557 349.177 338.62 cv
348.988 338.076 348.17 337.72 347.409 337.85 cv
346.352 338.038 345.762 339.103 345.792 340.772 cv
345.846 343.725 345.716 348.552 345.715 348.601 cv
cp
f
354.793 368.473 mo
353.094 368.451 li
353.146 365.06 li
353.333 363.92 353.723 362.871 354.305 361.94 cv
354.711 361.292 li
357.218 357.304 357.539 356.792 358.106 347.793 cv
358.212 346.13 358.26 345.698 358.287 345.537 cv
358.284 345.263 358.28 344.7 358.296 343.159 cv
358.316 341.066 357.672 340.168 357.321 340.153 cv
357.317 340.152 357.314 340.152 357.31 340.152 cv
356.897 340.152 356.03 341.147 355.848 343.497 cv
354.152 343.364 li
354.418 339.956 355.915 338.453 357.31 338.453 cv
357.339 338.453 357.367 338.453 357.396 338.454 cv
358.617 338.508 360.03 339.777 359.995 343.177 cv
359.979 344.788 359.984 345.314 359.986 345.501 cv
359.988 345.63 359.988 345.701 359.963 345.818 cv
359.956 345.858 359.914 346.153 359.804 347.9 cv
359.209 357.33 358.742 358.073 356.15 362.196 cv
355.746 362.842 li
355.294 363.564 354.987 364.381 354.834 365.272 cv
354.793 368.473 li
cp
f
341.974 368.492 mo
340.274 368.432 li
340.375 365.566 340.305 364.743 340.269 364.522 cv
340.137 363.692 339.73 362.623 337.721 360.982 cv
335.858 359.46 335.61 356.526 335.37 353.69 cv
335.272 352.544 335.181 351.462 334.989 350.504 cv
334.46 347.837 333.417 345.693 332.727 344.274 cv
332.015 342.813 331.452 341.657 332.512 341.109 cv
333.877 340.403 335.266 340.354 336.532 340.966 cv
337.601 341.481 338.512 342.444 339.234 343.598 cv
339.212 342.425 339.183 341.179 339.152 339.904 cv
339.063 336.156 338.973 332.28 339.006 328.984 cv
339.041 325.421 340.714 323.905 342.136 323.691 cv
343.738 323.453 345.25 324.638 345.892 326.648 cv
345.934 326.779 li
345.932 326.916 li
345.776 342.449 li
344.077 342.432 li
344.23 327.041 li
343.841 325.932 343.13 325.265 342.389 325.373 cv
341.567 325.496 340.728 326.666 340.705 329.002 cv
340.673 332.27 340.764 336.13 340.852 339.864 cv
340.927 343.034 340.997 346.028 340.976 348.191 cv
340.894 356.489 li
339.292 348.347 li
338.856 346.133 337.576 343.357 335.793 342.497 cv
335.138 342.181 334.462 342.155 333.737 342.422 cv
333.86 342.72 334.066 343.143 334.255 343.531 cv
334.983 345.028 336.085 347.29 336.657 350.173 cv
336.866 351.223 336.967 352.404 337.063 353.547 cv
337.274 356.03 337.492 358.599 338.797 359.666 cv
340.72 361.236 341.692 362.651 341.948 364.254 cv
342.043 364.85 342.052 366.275 341.974 368.492 cv
cp
f
343.307 322.952 mo
343.114 322.756 342.856 322.647 342.581 322.644 cv
342.296 322.64 342.042 322.745 341.845 322.94 cv
340.655 321.725 li
341.177 321.215 341.869 320.929 342.597 320.944 cv
343.326 320.951 344.009 321.241 344.52 321.761 cv
343.307 322.952 li
cp
f
345.321 321.284 mo
344.598 320.547 343.633 320.137 342.604 320.127 cv
341.585 320.138 340.602 320.508 339.864 321.23 cv
338.675 320.016 li
339.724 318.99 341.102 318.427 342.561 318.427 cv
342.581 318.427 342.602 318.427 342.621 318.428 cv
344.102 318.44 345.493 319.032 346.534 320.093 cv
345.321 321.284 li
cp
f
347.335 319.614 mo
346.085 318.341 344.414 317.629 342.63 317.611 cv
340.86 317.604 339.159 318.272 337.884 319.522 cv
336.694 318.307 li
338.272 316.76 340.352 315.911 342.559 315.911 cv
342.588 315.911 342.617 315.911 342.647 315.912 cv
344.885 315.934 346.98 316.826 348.548 318.425 cv
347.335 319.614 li
cp
f
338.433 375.911 mo
356.72 375.911 li
356.72 369.311 li
338.433 369.311 li
338.433 375.911 li
cp
358.419 377.61 mo
336.733 377.61 li
336.733 367.612 li
358.419 367.612 li
358.419 377.61 li
cp
f
355.038 373.461 mo
352.611 373.461 li
352.611 371.762 li
355.038 371.762 li
355.038 373.461 li
cp
f
505.2 177.869 mo
563.501 177.869 li
563.501 141.781 li
505.2 141.781 li
505.2 177.869 li
cp
565.2 179.569 mo
503.501 179.569 li
503.501 140.081 li
565.2 140.081 li
565.2 179.569 li
cp
f
534.351 167.555 mo
503.8 141.578 li
504.901 140.283 li
534.351 165.324 li
563.8 140.283 li
564.901 141.578 li
534.351 167.555 li
cp
f
504.875 179.388 mo
503.826 178.05 li
526.954 159.926 li
528.003 161.264 li
504.875 179.388 li
cp
f
563.826 179.388 mo
540.699 161.264 li
541.748 159.926 li
564.875 178.05 li
563.826 179.388 li
cp
f
319.79 94.0361 mo
332.69 94.0361 li
332.69 55.2603 li
319.79 55.2603 li
319.79 94.0361 li
cp
334.39 95.7363 mo
318.091 95.7363 li
318.091 53.5601 li
334.39 53.5601 li
334.39 95.7363 li
cp
f
334.39 90.0723 mo
342.942 91.1436 363.753 92.7305 368.653 88.5117 cv
369.153 88.0811 369.999 87.1865 370.041 86.0376 cv
370.075 85.1167 369.593 84.1494 368.606 83.1631 cv
367.156 81.7119 li
369.208 81.7119 li
370.711 81.7119 371.57 80.1323 371.733 78.6646 cv
371.936 76.8228 371.178 74.7476 369.022 74.2646 cv
365.326 73.436 li
369.021 72.606 li
370.708 72.2266 372.045 70.4736 372.13 68.5278 cv
372.214 66.6177 371.055 65.1372 368.95 64.4663 cv
366.647 63.7324 li
368.902 62.8633 li
371.179 61.9854 371.968 59.7407 371.739 57.9053 cv
371.573 56.5708 370.795 55.0718 369.105 54.8672 cv
367.829 54.7119 359.82 54.8193 356.843 54.8735 cv
355.669 54.8945 li
356.015 53.7725 li
357.102 50.251 359.198 40.3687 355.886 36.9741 cv
354.707 35.7661 352.855 35.4429 350.371 36.0107 cv
352.628 55.6187 337.883 60.2119 334.39 61.0186 cv
334.39 90.0723 li
cp
352.885 92.9897 mo
343.599 92.9897 334.114 91.7539 333.428 91.6626 cv
332.69 91.5645 li
332.69 59.5903 li
333.417 59.4834 li
334.154 59.3745 351.433 56.5776 348.592 35.4868 cv
348.494 34.7559 li
349.204 34.5557 li
352.691 33.5732 355.348 33.9873 357.103 35.7876 cv
361.056 39.8398 358.852 49.7842 357.956 53.1543 cv
360.796 53.1108 367.961 53.0176 369.31 53.1797 cv
371.503 53.4453 373.118 55.2178 373.427 57.6958 cv
373.677 59.7114 373.012 62.0962 371.089 63.5728 cv
372.921 64.6782 373.922 66.4702 373.828 68.6021 cv
373.741 70.5815 372.738 72.377 371.26 73.4253 cv
373.008 74.6758 373.637 76.917 373.423 78.8521 cv
373.2 80.8623 372.173 82.4185 370.754 83.0737 cv
371.447 84.0625 371.778 85.0767 371.74 86.1011 cv
371.69 87.4302 370.988 88.7441 369.763 89.7998 cv
369.763 89.7998 li
366.888 92.2749 359.943 92.9897 352.885 92.9897 cv
cp
f
439.412 246.516 mo
442.859 248.329 li
442.201 244.49 li
444.989 241.773 li
441.136 241.212 li
439.412 237.721 li
437.689 241.212 li
433.836 241.773 li
436.624 244.49 li
435.966 248.328 li
439.412 246.516 li
cp
433.708 251.436 mo
434.798 245.084 li
430.182 240.585 li
436.56 239.659 li
439.412 233.879 li
442.265 239.659 li
448.644 240.585 li
444.027 245.084 li
445.117 251.436 li
439.412 248.437 li
433.708 251.436 li
cp
f
439.41 223.275 mo
428.608 223.275 419.847 232.033 419.847 242.84 cv
419.847 253.642 439.41 283.275 439.41 283.275 cv
439.41 283.275 458.977 253.642 458.977 242.84 cv
458.977 232.033 450.216 223.275 439.41 223.275 cv
439.41 223.275 li
cp
439.41 224.975 mo
449.262 224.975 457.277 232.989 457.277 242.84 cv
457.277 250.613 445.466 270.684 439.411 280.152 cv
433.356 270.684 421.547 250.614 421.547 242.84 cv
421.547 232.989 429.561 224.975 439.41 224.975 cv
439.41 224.975 li
cp
f
439.412 229.898 mo
432.274 229.898 426.468 235.704 426.468 242.84 cv
426.468 249.977 432.274 255.784 439.412 255.784 cv
446.55 255.784 452.357 249.977 452.357 242.84 cv
452.357 235.704 446.55 229.898 439.412 229.898 cv
cp
439.412 257.484 mo
431.338 257.484 424.769 250.915 424.769 242.84 cv
424.769 234.766 431.338 228.197 439.412 228.197 cv
447.487 228.197 454.057 234.766 454.057 242.84 cv
454.057 250.915 447.487 257.484 439.412 257.484 cv
cp
f
434.503 366.35 mo
417.061 320.205 li
409.412 320.205 li
409.412 318.506 li
418.237 318.506 li
436.093 365.748 li
434.503 366.35 li
cp
f
432.935 357.397 mo
461.063 357.397 li
468.183 338.557 li
425.816 338.557 li
432.935 357.397 li
cp
462.238 359.096 mo
431.76 359.096 li
423.357 336.857 li
470.642 336.857 li
462.238 359.096 li
cp
f
436.716 366.641 mo
434.974 366.641 433.556 368.058 433.556 369.8 cv
433.556 371.543 434.974 372.962 436.716 372.962 cv
438.458 372.962 439.876 371.543 439.876 369.8 cv
439.876 368.058 438.458 366.641 436.716 366.641 cv
cp
436.716 374.661 mo
434.036 374.661 431.856 372.48 431.856 369.8 cv
431.856 367.121 434.036 364.941 436.716 364.941 cv
439.395 364.941 441.575 367.121 441.575 369.8 cv
441.575 372.48 439.395 374.661 436.716 374.661 cv
cp
f
457.122 366.997 mo
455.38 366.997 453.962 368.414 453.962 370.156 cv
453.962 371.899 455.38 373.317 457.122 373.317 cv
458.864 373.317 460.282 371.899 460.282 370.156 cv
460.282 368.414 458.864 366.997 457.122 366.997 cv
cp
457.122 375.017 mo
454.442 375.017 452.263 372.837 452.263 370.156 cv
452.263 367.478 454.442 365.298 457.122 365.298 cv
459.802 365.298 461.981 367.478 461.981 370.156 cv
461.981 372.837 459.802 375.017 457.122 375.017 cv
cp
f
453.129 370.649 mo
440.726 370.649 li
440.726 368.95 li
453.129 368.95 li
453.129 370.649 li
cp
f
247.786 165.717 mo
246.584 164.515 li
273.197 137.901 li
274.399 139.103 li
247.786 165.717 li
cp
f
266.316 145.984 mo
272.428 146.185 li
278.989 139.624 li
272.878 139.423 li
272.677 133.313 li
266.116 139.874 li
266.316 145.984 li
cp
273.108 147.909 mo
264.669 147.631 li
264.393 139.193 li
274.248 129.338 li
274.525 137.776 li
282.963 138.054 li
273.108 147.909 li
cp
f
247.185 162.466 mo
245.724 162.466 244.535 163.655 244.535 165.116 cv
244.535 166.578 245.724 167.766 247.185 167.766 cv
248.646 167.766 249.835 166.578 249.835 165.116 cv
249.835 163.655 248.646 162.466 247.185 162.466 cv
cp
247.185 169.466 mo
244.787 169.466 242.835 167.515 242.835 165.116 cv
242.835 162.718 244.787 160.766 247.185 160.766 cv
249.583 160.766 251.535 162.718 251.535 165.116 cv
251.535 167.515 249.583 169.466 247.185 169.466 cv
cp
f
247.185 155.896 mo
242.101 155.896 237.965 160.032 237.965 165.116 cv
237.965 170.2 242.101 174.335 247.185 174.335 cv
252.269 174.335 256.404 170.2 256.404 165.116 cv
256.404 160.032 252.269 155.896 247.185 155.896 cv
cp
247.185 176.036 mo
241.164 176.036 236.265 171.137 236.265 165.116 cv
236.265 159.095 241.164 154.196 247.185 154.196 cv
253.206 154.196 258.104 159.095 258.104 165.116 cv
258.104 171.137 253.206 176.036 247.185 176.036 cv
cp
f
247.185 149.327 mo
238.479 149.327 231.396 156.41 231.396 165.116 cv
231.396 173.822 238.479 180.905 247.185 180.905 cv
255.891 180.905 262.974 173.822 262.974 165.116 cv
262.974 156.41 255.891 149.327 247.185 149.327 cv
cp
247.185 182.605 mo
237.541 182.605 229.696 174.76 229.696 165.116 cv
229.696 155.472 237.541 147.626 247.185 147.626 cv
256.829 147.626 264.674 155.472 264.674 165.116 cv
264.674 174.76 256.829 182.605 247.185 182.605 cv
cp
f
247.185 142.757 mo
234.856 142.757 224.826 152.788 224.826 165.116 cv
224.826 177.445 234.856 187.475 247.185 187.475 cv
259.514 187.475 269.544 177.445 269.544 165.116 cv
269.544 152.788 259.514 142.757 247.185 142.757 cv
cp
247.185 189.175 mo
233.919 189.175 223.126 178.382 223.126 165.116 cv
223.126 151.85 233.919 141.057 247.185 141.057 cv
260.451 141.057 271.244 151.85 271.244 165.116 cv
271.244 178.382 260.451 189.175 247.185 189.175 cv
cp
f
180.848 321.783 mo
176.522 325.128 162.5 334.296 138.756 334.296 cv
133.654 334.296 129.503 338.448 129.503 343.551 cv
129.503 348.653 133.654 352.805 138.756 352.805 cv
162.5 352.805 176.522 361.973 180.848 365.317 cv
180.848 321.783 li
cp
182.548 369.069 mo
181.12 367.75 li
180.977 367.617 166.471 354.504 138.756 354.504 cv
132.717 354.504 127.803 349.591 127.803 343.551 cv
127.803 337.511 132.717 332.597 138.756 332.597 cv
166.471 332.597 180.977 319.483 181.12 319.351 cv
182.547 318.032 li
182.548 369.069 li
cp
f
181.277 351.558 mo
181.277 349.858 li
184.875 349.858 187.803 347.028 187.803 343.551 cv
187.803 340.073 184.875 337.243 181.277 337.243 cv
181.277 335.544 li
185.813 335.544 189.503 339.136 189.503 343.551 cv
189.503 347.966 185.813 351.558 181.277 351.558 cv
cp
f
143.927 353.806 mo
142.227 353.806 li
142.227 333.341 li
143.927 333.341 li
143.927 353.806 li
cp
f
157.096 374.397 mo
144.195 374.397 li
136.526 353.953 li
138.118 353.355 li
145.373 372.697 li
154.649 372.697 li
147.877 354.52 li
149.47 353.926 li
157.096 374.397 li
cp
f
159.502 466.733 mo
157.802 466.733 li
157.802 432.747 li
159.502 432.747 li
159.502 466.733 li
cp
f
175.645 450.59 mo
141.659 450.59 li
141.659 448.891 li
175.645 448.891 li
175.645 450.59 li
cp
f
154.633 442.094 mo
145.677 442.094 li
145.677 440.395 li
154.633 440.395 li
154.633 442.094 li
cp
f
151.005 445.721 mo
149.305 445.721 li
149.305 436.766 li
151.005 436.766 li
151.005 445.721 li
cp
f
171.626 442.094 mo
162.67 442.094 li
162.67 440.395 li
171.626 440.395 li
171.626 442.094 li
cp
f
152.491 461.66 mo
146.158 455.326 li
147.36 454.125 li
153.693 460.459 li
152.491 461.66 li
cp
f
147.36 461.66 mo
146.158 460.459 li
152.491 454.125 li
153.693 455.326 li
147.36 461.66 li
cp
f
171.626 460.502 mo
162.67 460.502 li
162.67 458.803 li
171.626 458.803 li
171.626 460.502 li
cp
f
171.626 457.671 mo
162.67 457.671 li
162.67 455.972 li
171.626 455.972 li
171.626 457.671 li
cp
f
136.007 469.734 mo
181.299 469.734 li
181.299 411.434 li
136.007 411.434 li
136.007 469.734 li
cp
182.999 471.434 mo
134.307 471.434 li
134.307 409.734 li
182.999 409.734 li
182.999 471.434 li
cp
f
142.509 426.266 mo
174.795 426.266 li
174.795 419.574 li
142.509 419.574 li
142.509 426.266 li
cp
176.495 427.965 mo
140.809 427.965 li
140.809 417.875 li
176.495 417.875 li
176.495 427.965 li
cp
f
172.188 423.77 mo
163.188 423.77 li
163.188 422.07 li
172.188 422.07 li
172.188 423.77 li
cp
f
142.509 465.884 mo
174.795 465.884 li
174.795 433.597 li
142.509 433.597 li
142.509 465.884 li
cp
176.495 467.583 mo
140.809 467.583 li
140.809 431.897 li
176.495 431.897 li
176.495 467.583 li
cp
f
505.2 371.014 mo
563.501 371.014 li
563.501 332.254 li
505.2 332.254 li
505.2 371.014 li
cp
565.2 372.713 mo
503.501 372.713 li
503.501 330.555 li
565.2 330.555 li
565.2 372.713 li
cp
f
544.948 331.404 mo
543.249 331.404 li
543.249 322.508 li
525.456 322.508 li
525.456 331.404 li
523.757 331.404 li
523.757 320.809 li
544.948 320.809 li
544.948 331.404 li
cp
f
528.392 352.797 mo
504.179 347.797 li
504.522 346.133 li
528.735 351.133 li
528.392 352.797 li
cp
f
540.31 352.797 mo
539.966 351.133 li
564.179 346.133 li
564.522 347.797 li
540.31 352.797 li
cp
f
529.413 354.615 mo
539.288 354.615 li
539.288 349.315 li
529.413 349.315 li
529.413 354.615 li
cp
540.987 356.315 mo
527.714 356.315 li
527.714 347.615 li
540.987 347.615 li
540.987 356.315 li
cp
f
439.412 418.403 mo
427.182 418.403 417.231 428.353 417.231 440.584 cv
417.231 452.815 427.182 462.765 439.412 462.765 cv
451.643 462.765 461.593 452.815 461.593 440.584 cv
461.593 428.353 451.643 418.403 439.412 418.403 cv
cp
439.412 464.464 mo
426.244 464.464 415.532 453.752 415.532 440.584 cv
415.532 427.416 426.244 416.704 439.412 416.704 cv
452.58 416.704 463.292 427.416 463.292 440.584 cv
463.292 453.752 452.58 464.464 439.412 464.464 cv
cp
f
439.412 411.434 mo
423.339 411.434 410.262 424.511 410.262 440.584 cv
410.262 456.657 423.339 469.734 439.412 469.734 cv
455.485 469.734 468.561 456.657 468.561 440.584 cv
468.561 424.511 455.485 411.434 439.412 411.434 cv
cp
439.412 471.434 mo
422.401 471.434 408.563 457.595 408.563 440.584 cv
408.563 423.573 422.401 409.734 439.412 409.734 cv
456.422 409.734 470.261 423.573 470.261 440.584 cv
470.261 457.595 456.422 471.434 439.412 471.434 cv
cp
f
440.263 463.615 mo
438.563 463.615 li
438.563 457.055 li
440.263 457.055 li
440.263 463.615 li
cp
f
440.263 424.114 mo
438.563 424.114 li
438.563 417.554 li
440.263 417.554 li
440.263 424.114 li
cp
f
422.941 441.434 mo
416.381 441.434 li
416.381 439.734 li
422.941 439.734 li
422.941 441.434 li
cp
f
462.442 441.434 mo
455.881 441.434 li
455.881 439.734 li
462.442 439.734 li
462.442 441.434 li
cp
f
450.191 460.954 mo
448.647 458.278 li
450.12 457.429 li
451.664 460.104 li
450.191 460.954 li
cp
f
428.705 423.739 mo
427.161 421.064 li
428.634 420.214 li
430.178 422.89 li
428.705 423.739 li
cp
f
419.891 452.836 mo
419.041 451.363 li
421.718 449.817 li
422.567 451.29 li
419.891 452.836 li
cp
f
457.106 431.35 mo
456.257 429.877 li
458.932 428.332 li
459.781 429.805 li
457.106 431.35 li
cp
f
458.933 452.835 mo
456.258 451.29 li
457.107 449.817 li
459.782 451.362 li
458.933 452.835 li
cp
f
421.718 431.349 mo
419.042 429.805 li
419.892 428.332 li
422.567 429.876 li
421.718 431.349 li
cp
f
428.632 460.954 mo
427.159 460.104 li
428.705 457.428 li
430.178 458.277 li
428.632 460.954 li
cp
f
450.233 423.539 mo
448.761 422.69 li
450.19 420.214 li
451.663 421.064 li
450.233 423.539 li
cp
f
439.412 438.447 mo
438.233 438.447 437.274 439.406 437.274 440.584 cv
437.274 441.763 438.233 442.722 439.412 442.722 cv
440.59 442.722 441.549 441.763 441.549 440.584 cv
441.549 439.406 440.59 438.447 439.412 438.447 cv
cp
439.412 444.421 mo
437.296 444.421 435.575 442.7 435.575 440.584 cv
435.575 438.469 437.296 436.748 439.412 436.748 cv
441.527 436.748 443.248 438.469 443.248 440.584 cv
443.248 442.7 441.527 444.421 439.412 444.421 cv
cp
f
441.355 438.162 mo
439.789 437.502 li
445.963 422.875 li
447.529 423.535 li
441.355 438.162 li
cp
f
449.612 445.675 mo
441.854 442.502 li
442.497 440.928 li
450.255 444.101 li
449.612 445.675 li
cp
f
329.434 444.246 mo
328.913 444.246 328.489 444.67 328.489 445.19 cv
328.489 445.71 328.913 446.134 329.434 446.134 cv
329.953 446.134 330.377 445.71 330.377 445.19 cv
330.377 444.67 329.953 444.246 329.434 444.246 cv
cp
329.434 447.833 mo
327.976 447.833 326.79 446.647 326.79 445.19 cv
326.79 443.732 327.976 442.547 329.434 442.547 cv
330.891 442.547 332.076 443.732 332.076 445.19 cv
332.076 446.647 330.891 447.833 329.434 447.833 cv
cp
f
335.84 436.682 mo
335.319 436.682 334.895 437.105 334.895 437.626 cv
334.895 438.146 335.319 438.569 335.84 438.569 cv
336.359 438.569 336.783 438.146 336.783 437.626 cv
336.783 437.105 336.359 436.682 335.84 436.682 cv
cp
335.84 440.269 mo
334.382 440.269 333.196 439.083 333.196 437.626 cv
333.196 436.168 334.382 434.982 335.84 434.982 cv
337.297 434.982 338.482 436.168 338.482 437.626 cv
338.482 439.083 337.297 440.269 335.84 440.269 cv
cp
f
343.066 437.914 mo
342.547 437.914 342.123 438.338 342.123 438.857 cv
342.123 439.378 342.547 439.802 343.066 439.802 cv
343.587 439.802 344.011 439.378 344.011 438.857 cv
344.011 438.338 343.587 437.914 343.066 437.914 cv
cp
343.066 441.501 mo
341.609 441.501 340.424 440.315 340.424 438.857 cv
340.424 437.4 341.609 436.215 343.066 436.215 cv
344.524 436.215 345.71 437.4 345.71 438.857 cv
345.71 440.315 344.524 441.501 343.066 441.501 cv
cp
f
349.268 431.96 mo
348.748 431.96 348.324 432.384 348.324 432.903 cv
348.324 433.423 348.748 433.847 349.268 433.847 cv
349.788 433.847 350.212 433.423 350.212 432.903 cv
350.212 432.384 349.788 431.96 349.268 431.96 cv
cp
349.268 435.546 mo
347.81 435.546 346.625 434.36 346.625 432.903 cv
346.625 431.446 347.81 430.261 349.268 430.261 cv
350.726 430.261 351.911 431.446 351.911 432.903 cv
351.911 434.36 350.726 435.546 349.268 435.546 cv
cp
f
356.208 435.655 mo
355.688 435.655 355.264 436.079 355.264 436.599 cv
355.264 437.119 355.688 437.543 356.208 437.543 cv
356.727 437.543 357.151 437.119 357.151 436.599 cv
357.151 436.079 356.727 435.655 356.208 435.655 cv
cp
356.208 439.242 mo
354.75 439.242 353.564 438.057 353.564 436.599 cv
353.564 435.142 354.75 433.956 356.208 433.956 cv
357.665 433.956 358.851 435.142 358.851 436.599 cv
358.851 438.057 357.665 439.242 356.208 439.242 cv
cp
f
362.491 427.442 mo
361.971 427.442 361.547 427.866 361.547 428.386 cv
361.547 428.906 361.971 429.33 362.491 429.33 cv
363.011 429.33 363.435 428.906 363.435 428.386 cv
363.435 427.866 363.011 427.442 362.491 427.442 cv
cp
362.491 431.029 mo
361.033 431.029 359.848 429.844 359.848 428.386 cv
359.848 426.929 361.033 425.743 362.491 425.743 cv
363.948 425.743 365.134 426.929 365.134 428.386 cv
365.134 429.844 363.948 431.029 362.491 431.029 cv
cp
f
357.972 435.692 mo
356.622 434.659 li
360.727 429.292 li
362.077 430.325 li
357.972 435.692 li
cp
f
354.227 436.507 mo
350.452 434.496 li
351.251 432.996 li
355.025 435.007 li
354.227 436.507 li
cp
f
344.938 438.239 mo
343.761 437.013 li
347.387 433.531 li
348.564 434.758 li
344.938 438.239 li
cp
f
341.131 439.39 mo
337.49 438.77 li
337.775 437.094 li
341.416 437.714 li
341.131 439.39 li
cp
f
331.24 444.372 mo
329.943 443.272 li
334.032 438.444 li
335.329 439.544 li
331.24 444.372 li
cp
f
320.786 452.746 mo
371.138 452.746 li
371.138 420.83 li
320.786 420.83 li
320.786 452.746 li
cp
372.837 454.445 mo
319.087 454.445 li
319.087 419.131 li
372.837 419.131 li
372.837 454.445 li
cp
f
346.632 470.589 mo
344.933 470.579 li
345.024 453.591 li
346.724 453.601 li
346.632 470.589 li
cp
f
346.929 419.986 mo
345.229 419.975 li
345.294 410.578 li
346.993 410.59 li
346.929 419.986 li
cp
f
335.371 470.888 mo
333.783 470.28 li
340.289 453.292 li
341.877 453.899 li
335.371 470.888 li
cp
f
356.555 470.888 mo
350.049 453.899 li
351.637 453.292 li
358.143 470.28 li
356.555 470.888 li
cp
f
521.137 549.144 mo
547.565 549.144 li
544.609 540.731 539.405 538.681 536.49 538.217 cv
536.003 538.139 535.581 538.106 535.25 538.094 cv
535.257 538.227 li
534.254 538.108 li
534.229 538.104 533.473 538.027 532.331 538.197 cv
531.896 538.261 531.445 538.356 530.992 538.482 cv
527.857 539.35 523.675 541.915 521.137 549.144 cv
cp
549.892 550.843 mo
518.81 550.843 li
519.149 549.743 li
521.862 540.935 526.841 537.867 530.539 536.844 cv
531.06 536.699 531.579 536.589 532.083 536.516 cv
533.33 536.329 534.208 536.396 534.41 536.415 cv
534.943 536.334 535.727 536.372 536.758 536.538 cv
540.186 537.084 546.407 539.526 549.553 549.743 cv
549.892 550.843 li
cp
f
534.352 523.046 mo
530.666 523.046 527.668 526.045 527.668 529.731 cv
527.668 533.416 530.666 536.414 534.352 536.414 cv
538.036 536.414 541.034 533.416 541.034 529.731 cv
541.034 526.045 538.036 523.046 534.352 523.046 cv
cp
534.352 538.113 mo
529.729 538.113 525.969 534.354 525.969 529.731 cv
525.969 525.107 529.729 521.347 534.352 521.347 cv
538.974 521.347 542.733 525.107 542.733 529.731 cv
542.733 534.354 538.974 538.113 534.352 538.113 cv
cp
f
565.502 544.619 mo
545.898 544.619 li
545.898 542.92 li
563.174 542.92 li
560.517 535.471 555.891 533.648 553.294 533.235 cv
552.204 533.06 551.482 533.136 551.476 533.138 cv
551.378 533.148 li
551.278 533.137 li
551.275 533.137 550.601 533.065 549.569 533.218 cv
549.174 533.276 548.771 533.361 548.373 533.473 cv
546.389 534.021 543.552 535.463 541.3 539.224 cv
539.841 538.351 li
542.383 534.107 545.637 532.465 547.919 531.834 cv
548.384 531.705 548.856 531.604 549.32 531.536 cv
550.358 531.382 551.115 531.418 551.379 531.44 cv
551.651 531.416 552.461 531.38 553.561 531.557 cv
556.672 532.052 562.315 534.266 565.163 543.519 cv
565.502 544.619 li
cp
f
551.379 519.559 mo
548.102 519.559 545.436 522.225 545.436 525.502 cv
545.436 528.778 548.102 531.443 551.379 531.443 cv
554.655 531.443 557.32 528.778 557.32 525.502 cv
557.32 522.225 554.655 519.559 551.379 519.559 cv
cp
551.379 533.143 mo
547.165 533.143 543.737 529.715 543.737 525.502 cv
543.737 521.288 547.165 517.859 551.379 517.859 cv
555.592 517.859 559.019 521.288 559.019 525.502 cv
559.019 529.715 555.592 533.143 551.379 533.143 cv
cp
f
522.805 544.619 mo
503.199 544.619 li
503.538 543.519 li
505.995 535.543 510.51 532.762 513.864 531.834 cv
514.329 531.705 514.802 531.604 515.266 531.536 cv
516.303 531.382 517.06 531.418 517.324 531.44 cv
517.598 531.416 518.406 531.38 519.507 531.557 cv
521.692 531.904 525.815 533.252 528.871 538.367 cv
527.412 539.238 li
524.845 534.943 521.551 533.604 519.239 533.235 cv
518.15 533.06 517.428 533.136 517.421 533.138 cv
517.323 533.148 li
517.224 533.137 li
517.22 533.137 516.547 533.065 515.515 533.218 cv
515.119 533.276 514.717 533.361 514.318 533.473 cv
511.526 534.245 507.808 536.523 505.527 542.92 cv
522.805 542.92 li
522.805 544.619 li
cp
f
517.324 519.559 mo
514.048 519.559 511.382 522.225 511.382 525.502 cv
511.382 528.778 514.048 531.443 517.324 531.443 cv
520.601 531.443 523.266 528.778 523.266 525.502 cv
523.266 522.225 520.601 519.559 517.324 519.559 cv
cp
517.324 533.143 mo
513.11 533.143 509.683 529.715 509.683 525.502 cv
509.683 521.288 513.11 517.859 517.324 517.859 cv
521.537 517.859 524.965 521.288 524.965 525.502 cv
524.965 529.715 521.537 533.143 517.324 533.143 cv
cp
f
331.122 238.964 mo
331.123 247.147 337.781 253.804 345.963 253.804 cv
345.963 253.804 345.964 253.804 345.965 253.804 cv
349.928 253.804 353.653 252.26 356.456 249.458 cv
359.259 246.654 360.802 242.928 360.802 238.965 cv
360.803 235.001 359.26 231.275 356.457 228.472 cv
353.654 225.669 349.928 224.125 345.964 224.125 cv
337.781 224.125 331.123 230.782 331.122 238.964 cv
331.122 238.964 li
cp
345.965 255.504 mo
345.964 255.504 345.964 255.504 345.963 255.504 cv
336.844 255.504 329.424 248.085 329.423 238.964 cv
329.423 238.964 li
329.424 229.844 336.844 222.425 345.964 222.425 cv
350.382 222.425 354.535 224.145 357.659 227.27 cv
360.782 230.394 362.502 234.547 362.501 238.965 cv
362.502 243.382 360.782 247.535 357.658 250.66 cv
354.534 253.783 350.382 255.504 345.965 255.504 cv
cp
f
345.963 228.281 mo
340.071 228.281 335.278 233.074 335.278 238.964 cv
335.278 244.855 340.071 249.648 345.963 249.648 cv
345.964 249.648 li
348.817 249.648 351.499 248.537 353.517 246.519 cv
355.534 244.501 356.645 241.818 356.645 238.965 cv
356.645 236.111 355.534 233.428 353.517 231.41 cv
351.499 229.392 348.816 228.281 345.963 228.281 cv
cp
345.964 251.348 mo
345.963 251.348 li
339.134 251.348 333.579 245.792 333.579 238.964 cv
333.579 232.136 339.134 226.581 345.963 226.581 cv
349.27 226.581 352.381 227.869 354.72 230.208 cv
357.058 232.547 358.346 235.657 358.345 238.965 cv
358.346 242.272 357.058 245.381 354.72 247.721 cv
352.381 250.06 349.271 251.348 345.964 251.348 cv
cp
f
345.114 262.268 mo
345.113 254.654 li
346.813 254.654 li
346.813 262.268 li
345.114 262.268 li
cp
f
343.408 282.424 mo
348.517 282.425 li
348.518 263.117 li
343.408 263.117 li
343.408 282.424 li
cp
350.216 284.125 mo
341.709 284.124 li
341.709 261.417 li
350.217 261.417 li
350.216 284.125 li
cp
f
523.396 46.0815 mo
521.508 46.0815 519.912 47.1045 519.912 48.3149 cv
519.912 49.5254 521.508 50.5483 523.396 50.5483 cv
525.284 50.5483 526.88 49.5254 526.88 48.3149 cv
526.88 47.1045 525.284 46.0815 523.396 46.0815 cv
cp
523.396 52.2485 mo
520.489 52.2485 518.213 50.5205 518.213 48.3149 cv
518.213 46.1094 520.489 44.3813 523.396 44.3813 cv
526.303 44.3813 528.579 46.1094 528.579 48.3149 cv
528.579 50.5205 526.303 52.2485 523.396 52.2485 cv
cp
f
524.246 63.481 mo
519.396 63.481 li
519.396 61.7808 li
522.547 61.7808 li
522.547 51.3984 li
524.246 51.3984 li
524.246 63.481 li
cp
f
523.396 61.0815 mo
520.896 61.0815 li
520.896 59.3813 li
523.396 59.3813 li
523.396 61.0815 li
cp
f
510.529 66.7974 mo
517.624 73.8906 529.168 73.8911 536.263 66.7969 cv
539.699 63.3608 541.592 58.792 541.591 53.9312 cv
541.591 49.0708 539.698 44.5024 536.262 41.0669 cv
532.825 37.6299 528.257 35.7368 523.396 35.7363 cv
523.396 35.7363 523.396 35.7363 523.394 35.7363 cv
518.535 35.7363 513.967 37.6284 510.53 41.0649 cv
507.094 44.5015 505.201 49.0713 505.201 53.9316 cv
505.201 58.792 507.094 63.3613 510.529 66.7974 cv
510.529 66.7974 li
cp
523.396 73.8169 mo
518.301 73.8169 513.206 71.8779 509.328 67.9995 cv
509.328 67.9995 li
505.57 64.2422 503.501 59.2461 503.501 53.9316 cv
503.501 48.6172 505.57 43.6206 509.329 39.8628 cv
513.086 36.1055 518.081 34.0361 523.394 34.0361 cv
523.396 34.0361 523.396 34.0361 523.396 34.0361 cv
528.711 34.0366 533.707 36.1064 537.464 39.8647 cv
541.221 43.6211 543.291 48.6167 543.291 53.9312 cv
543.292 59.2461 541.223 64.2422 537.464 67.999 cv
533.586 71.8774 528.49 73.8169 523.396 73.8169 cv
cp
f
523.394 40.7813 mo
519.883 40.7813 516.581 42.1489 514.097 44.6328 cv
508.97 49.7603 508.97 58.1025 514.097 63.23 cv
514.097 63.23 li
519.224 68.3569 527.566 68.3569 532.695 63.23 cv
535.179 60.7466 536.546 57.4443 536.546 53.9316 cv
536.546 50.4189 535.178 47.1172 532.694 44.6343 cv
530.211 42.1499 526.909 40.7817 523.396 40.7813 cv
523.396 40.7813 523.396 40.7813 523.394 40.7813 cv
cp
523.396 68.7744 mo
519.592 68.7749 515.79 67.3271 512.896 64.4321 cv
507.104 58.6421 507.104 49.2207 512.896 43.4307 cv
515.699 40.626 519.429 39.0815 523.394 39.0815 cv
523.396 39.0815 523.396 39.0815 523.396 39.0815 cv
527.363 39.082 531.092 40.627 533.896 43.4321 cv
536.7 46.2358 538.245 49.9648 538.246 53.9316 cv
538.246 57.8984 536.702 61.6279 533.896 64.4321 cv
531.002 67.3267 527.197 68.7739 523.396 68.7744 cv
cp
f
542.799 74.5337 mo
536.263 67.999 li
537.464 66.7969 li
544 73.3315 li
542.799 74.5337 li
cp
f
541.678 76.8555 mo
558.507 93.6836 li
563.148 89.0435 li
546.319 72.2134 li
541.678 76.8555 li
cp
558.507 96.0879 mo
539.273 76.8555 li
546.319 69.8091 li
565.553 89.0435 li
558.507 96.0879 li
cp
f
462.821 185.086 mo
454.172 176.189 li
432.421 176.189 li
432.421 165.241 li
434.12 165.241 li
434.12 174.489 li
454.891 174.489 li
461.122 180.899 li
461.122 174.489 li
468.563 174.489 li
468.563 150.465 li
449.569 150.465 li
449.569 148.765 li
470.262 148.765 li
470.262 176.189 li
462.821 176.189 li
462.821 185.086 li
cp
f
410.262 164.391 mo
418.529 164.391 li
418.529 171.651 li
425.588 164.391 li
448.72 164.391 li
448.72 137.508 li
410.262 137.508 li
410.262 164.391 li
cp
416.83 175.839 mo
416.83 166.091 li
408.563 166.091 li
408.563 135.808 li
450.419 135.808 li
450.419 166.091 li
426.307 166.091 li
416.83 175.839 li
cp
f
174.537 80.7954 mo
167.366 80.7954 li
167.366 79.0952 li
174.537 79.0952 li
181.852 79.0952 187.803 73.1445 187.803 65.8296 cv
187.803 58.5146 181.852 52.5635 174.537 52.5635 cv
173.63 52.5635 172.714 52.6582 171.816 52.8447 cv
170.858 53.0439 li
170.795 52.0674 li
170.311 44.5771 164.055 38.71 156.553 38.71 cv
148.674 38.71 142.264 45.1201 142.264 52.9995 cv
142.264 53.9644 142.361 54.9312 142.553 55.873 cv
142.78 56.9912 li
141.644 56.8892 li
141.31 56.8589 140.973 56.8379 140.632 56.8379 cv
134.495 56.8379 129.503 61.8301 129.503 67.9663 cv
129.503 74.103 134.495 79.0952 140.632 79.0952 cv
147.073 79.0952 li
147.073 80.7954 li
140.632 80.7954 li
133.558 80.7954 127.803 75.04 127.803 67.9663 cv
127.803 60.8926 133.558 55.1377 140.632 55.1377 cv
140.657 55.1377 140.681 55.1377 140.706 55.1382 cv
140.611 54.4302 140.563 53.7144 140.563 52.9995 cv
140.563 44.1826 147.736 37.0098 156.553 37.0098 cv
164.632 37.0098 171.419 43.0894 172.402 51.0166 cv
173.112 50.915 173.827 50.8633 174.537 50.8633 cv
182.789 50.8633 189.503 57.5771 189.503 65.8296 cv
189.503 74.0815 182.789 80.7954 174.537 80.7954 cv
cp
f
148.908 80.7939 mo
157.219 90.5977 li
165.531 80.7949 li
160.331 80.7949 li
160.331 69.9385 li
154.109 69.9385 li
154.109 80.7949 li
148.908 80.7939 li
cp
157.219 93.2266 mo
145.238 79.0938 li
152.409 79.0947 li
152.409 68.2383 li
162.032 68.2383 li
162.032 79.0947 li
169.201 79.0957 li
157.219 93.2266 li
cp
f
268.36 81.2358 mo
260.996 81.2358 li
260.996 79.5356 li
268.36 79.5356 li
275.675 79.5356 281.626 73.5845 281.626 66.2695 cv
281.626 58.9546 275.675 53.0039 268.36 53.0039 cv
267.45 53.0039 266.535 53.0986 265.639 53.2852 cv
264.681 53.4849 li
264.618 52.5078 li
264.134 45.0176 257.878 39.1504 250.376 39.1504 cv
242.497 39.1504 236.086 45.5605 236.086 53.4399 cv
236.086 54.4058 236.184 55.3721 236.376 56.313 cv
236.604 57.4316 li
235.467 57.3296 li
235.133 57.2993 234.796 57.2783 234.455 57.2783 cv
228.318 57.2783 223.326 62.2705 223.326 68.4067 cv
223.326 74.5435 228.318 79.5356 234.455 79.5356 cv
241.091 79.5356 li
241.091 81.2358 li
234.455 81.2358 li
227.381 81.2358 221.626 75.4805 221.626 68.4067 cv
221.626 61.333 227.381 55.5781 234.455 55.5781 cv
234.479 55.5781 234.504 55.5781 234.529 55.5786 cv
234.434 54.8706 234.386 54.1553 234.386 53.4399 cv
234.386 44.623 241.559 37.4502 250.376 37.4502 cv
258.455 37.4502 265.242 43.5303 266.226 51.457 cv
266.934 51.355 267.648 51.3037 268.36 51.3037 cv
276.612 51.3037 283.326 58.0176 283.326 66.2695 cv
283.326 74.522 276.612 81.2358 268.36 81.2358 cv
cp
f
247.931 90.6216 mo
254.154 90.6216 li
254.154 79.5352 li
259.16 79.5361 li
251.044 69.9624 li
242.927 79.5356 li
247.931 79.5352 li
247.931 90.6216 li
cp
255.854 92.3218 mo
246.231 92.3218 li
246.231 81.2354 li
239.256 81.2358 li
251.044 67.3335 li
262.83 81.2363 li
255.854 81.2354 li
255.854 92.3218 li
cp
f
70.7681 181.566 mo
69.0679 181.566 li
69.0679 180.344 li
68.979 179.608 68.7407 174.947 74.8833 164.577 cv
74.9575 164.471 li
75.7134 163.549 76.3564 162.51 76.8687 161.383 cv
76.9336 161.266 li
76.999 161.163 77.0073 161.144 77.0205 161.091 cv
77.061 160.966 li
77.7959 159.199 78.168 157.328 78.168 155.405 cv
78.168 147.722 72.209 141.472 64.8838 141.472 cv
57.5601 141.472 51.6016 147.722 51.6016 155.405 cv
51.6016 157.33 51.9731 159.201 52.707 160.966 cv
52.7441 161.078 li
52.7607 161.141 52.7705 161.162 52.7852 161.185 cv
52.9004 161.383 li
53.4136 162.512 54.0566 163.551 54.8105 164.471 cv
54.8843 164.577 li
61.0288 174.947 60.7896 179.608 60.7007 180.344 cv
60.7007 181.564 li
59.0005 181.564 li
59.0151 180.13 li
59.0195 180.101 59.5913 175.874 53.4536 165.498 cv
52.6362 164.491 51.938 163.361 51.377 162.14 cv
51.2231 161.891 51.1563 161.709 51.1162 161.567 cv
50.3101 159.61 49.9014 157.537 49.9014 155.405 cv
49.9014 146.785 56.6226 139.772 64.8838 139.772 cv
73.146 139.772 79.8682 146.785 79.8682 155.405 cv
79.8682 157.532 79.4595 159.604 78.6543 161.562 cv
78.6147 161.706 78.5464 161.901 78.4092 162.112 cv
77.8521 163.328 77.145 164.475 76.3135 165.498 cv
70.1782 175.874 70.749 180.101 70.7559 180.143 cv
70.7681 180.286 li
70.7681 181.566 li
cp
f
62.3848 156.824 mo
62.8677 158.4 li
64.8838 181.151 li
66.936 158.217 li
67.3813 156.826 li
65.9009 158.059 li
64.8843 156.128 li
63.8682 158.059 li
62.3848 156.824 li
cp
63.207 181.489 mo
61.1826 158.645 li
58.9863 151.782 li
63.3418 155.409 li
64.8833 152.478 li
66.4263 155.409 li
70.7798 151.781 li
68.584 158.645 li
66.5605 181.489 li
64.8838 181.34 li
63.207 181.489 li
cp
f
61.9946 185.358 mo
61.1904 185.358 60.6772 185.771 60.6772 186.055 cv
60.6772 186.339 61.1904 186.752 61.9946 186.752 cv
67.7749 186.752 li
68.5791 186.752 69.0923 186.339 69.0923 186.055 cv
69.0923 185.771 68.5791 185.358 67.7749 185.358 cv
61.9946 185.358 li
cp
67.7749 188.452 mo
61.9946 188.452 li
60.3027 188.452 58.9771 187.399 58.9771 186.055 cv
58.9771 184.711 60.3027 183.658 61.9946 183.658 cv
67.7749 183.658 li
69.4668 183.658 70.7925 184.711 70.7925 186.055 cv
70.7925 187.399 69.4668 188.452 67.7749 188.452 cv
cp
f
63.2705 188.452 mo
63.4551 188.716 63.7314 188.975 63.9917 188.975 cv
65.7778 188.975 li
66.0376 188.975 66.314 188.716 66.498 188.452 cv
63.2705 188.452 li
cp
65.7778 190.675 mo
63.9917 190.675 li
62.4883 190.675 61.3564 189.047 61.3564 187.991 cv
61.3564 186.752 li
67.563 186.752 li
67.563 187.562 li
68.4131 187.562 li
68.4131 188.412 li
68.3604 188.415 li
68.1211 189.433 67.0913 190.675 65.7778 190.675 cv
cp
f
60.7754 182.264 mo
59.9712 182.264 59.458 182.677 59.458 182.961 cv
59.458 183.245 59.9712 183.658 60.7754 183.658 cv
68.9941 183.658 li
69.7983 183.658 70.3115 183.245 70.3115 182.961 cv
70.3115 182.677 69.7983 182.264 68.9941 182.264 cv
60.7754 182.264 li
cp
68.9941 185.358 mo
60.7754 185.358 li
59.0835 185.358 57.7578 184.305 57.7578 182.961 cv
57.7578 181.617 59.0835 180.564 60.7754 180.564 cv
68.9941 180.564 li
70.686 180.564 72.0117 181.617 72.0117 182.961 cv
72.0117 184.305 70.686 185.358 68.9941 185.358 cv
cp
f
65.7339 136.744 mo
64.0337 136.744 li
64.0337 129.825 li
65.7339 129.825 li
65.7339 136.744 li
cp
f
74.6733 139.546 mo
73.1938 138.709 li
76.6016 132.685 li
78.0811 133.522 li
74.6733 139.546 li
cp
f
81.4976 147.208 mo
80.6958 145.71 li
86.7993 142.447 li
87.6011 143.946 li
81.4976 147.208 li
cp
f
55.0972 139.547 mo
51.6323 133.423 li
53.1118 132.586 li
56.5767 138.71 li
55.0972 139.547 li
cp
f
48.0337 147.081 mo
42.1709 143.947 li
42.9727 142.448 li
48.8354 145.581 li
48.0337 147.081 li
cp
f
133.794 282.425 mo
183.512 282.425 li
183.512 280.514 li
133.794 280.514 li
133.794 282.425 li
cp
185.212 284.125 mo
132.094 284.125 li
132.094 278.814 li
185.212 278.814 li
185.212 284.125 li
cp
f
133.794 273.842 mo
142.94 273.842 li
142.94 246.803 li
133.794 246.803 li
133.794 273.842 li
cp
144.64 275.543 mo
132.094 275.543 li
132.094 245.103 li
144.64 245.103 li
144.64 275.543 li
cp
f
147.318 273.842 mo
156.464 273.842 li
156.464 234.971 li
147.318 234.971 li
147.318 273.842 li
cp
158.164 275.543 mo
145.618 275.543 li
145.618 233.271 li
158.164 233.271 li
158.164 275.543 li
cp
f
160.842 273.842 mo
169.988 273.842 li
169.988 224.125 li
160.842 224.125 li
160.842 273.842 li
cp
171.688 275.543 mo
159.142 275.543 li
159.142 222.425 li
171.688 222.425 li
171.688 275.543 li
cp
f
174.366 273.842 mo
183.512 273.842 li
183.512 233.637 li
174.366 233.637 li
174.366 273.842 li
cp
185.212 275.543 mo
172.666 275.543 li
172.666 231.937 li
185.212 231.937 li
185.212 275.543 li
cp
f
241.267 261.897 mo
245.143 261.897 li
245.143 253.009 li
241.267 253.009 li
241.267 261.897 li
cp
246.843 263.597 mo
239.567 263.597 li
239.567 251.309 li
246.843 251.309 li
246.843 263.597 li
cp
f
249.733 261.897 mo
253.608 261.897 li
253.608 248.649 li
249.733 248.649 li
249.733 261.897 li
cp
255.309 263.597 mo
248.033 263.597 li
248.033 246.949 li
255.309 246.949 li
255.309 263.597 li
cp
f
258.2 261.897 mo
262.075 261.897 li
262.075 244.654 li
258.2 244.654 li
258.2 261.897 li
cp
263.775 263.597 mo
256.499 263.597 li
256.499 242.954 li
263.775 242.954 li
263.775 263.597 li
cp
f
249.815 224.227 mo
234.89 225.579 223.326 238.152 223.326 253.24 cv
223.326 269.314 236.403 282.391 252.477 282.391 cv
255.151 282.391 257.814 282.018 260.406 281.282 cv
257.332 273.292 li
255.72 273.685 254.09 273.885 252.477 273.885 cv
241.101 273.885 231.845 264.629 231.845 253.253 cv
231.845 242.774 239.517 234.113 249.815 232.796 cv
249.815 224.227 li
cp
252.477 284.091 mo
235.465 284.091 221.626 270.251 221.626 253.24 cv
221.626 236.952 234.359 223.433 250.614 222.462 cv
251.515 222.409 li
251.515 234.335 li
250.742 234.405 li
240.938 235.296 233.545 243.399 233.545 253.253 cv
233.545 263.692 242.038 272.185 252.477 272.185 cv
254.185 272.185 255.915 271.94 257.622 271.458 cv
258.368 271.248 li
262.646 282.37 li
261.785 282.643 li
258.756 283.603 255.624 284.091 252.477 284.091 cv
cp
f
255.138 232.813 mo
263.991 233.951 271.069 240.626 272.725 249.396 cv
281.288 248.892 li
279.307 235.617 268.511 225.435 255.138 224.225 cv
255.138 232.813 li
cp
271.289 251.184 mo
271.174 250.416 li
269.874 241.79 262.899 235.212 254.21 234.421 cv
253.438 234.351 li
253.438 222.407 li
254.338 222.46 li
269.249 223.351 281.344 234.759 283.096 249.587 cv
283.201 250.482 li
271.289 251.184 li
cp
f
270.357 263.521 mo
277.173 268.71 li
279.918 264.344 281.441 259.364 281.61 254.205 cv
273.042 254.709 li
272.824 257.814 271.904 260.831 270.357 263.521 cv
cp
277.589 271.164 mo
268.104 263.942 li
268.516 263.285 li
270.284 260.467 271.275 257.214 271.383 253.877 cv
271.409 253.102 li
283.328 252.401 li
283.326 253.305 li
283.314 259.424 281.503 265.341 278.092 270.415 cv
277.589 271.164 li
cp
f
262.302 271.386 mo
265.371 279.367 li
268.577 277.78 271.511 275.578 273.939 272.938 cv
267.133 267.757 li
265.704 269.202 264.083 270.419 262.302 271.386 cv
cp
264.438 281.677 mo
260.164 270.564 li
260.858 270.22 li
262.956 269.181 264.827 267.776 266.417 266.045 cv
266.941 265.474 li
276.418 272.689 li
275.828 273.373 li
272.933 276.727 269.278 279.469 265.26 281.302 cv
264.438 281.677 li
cp
f
68.603 264.041 mo
65.8975 264.041 63.354 262.987 61.4414 261.074 cv
57.0864 256.72 li
56.1245 255.757 55.3779 254.635 54.8677 253.383 cv
56.4419 252.742 li
56.8662 253.783 57.4873 254.716 58.2886 255.518 cv
62.6436 259.872 li
64.2354 261.464 66.3516 262.341 68.603 262.341 cv
70.8545 262.341 72.9712 261.464 74.563 259.872 cv
91.5674 242.868 li
94.8535 239.581 94.8535 234.234 91.5674 230.948 cv
87.2129 226.594 li
85.6211 225.002 83.5044 224.125 81.2529 224.125 cv
79.0015 224.125 76.8853 225.002 75.2935 226.594 cv
58.2886 243.598 li
57.814 244.073 57.3979 244.601 57.0522 245.166 cv
55.6021 244.279 li
56.0171 243.6 56.5166 242.966 57.0864 242.396 cv
74.0913 225.392 li
76.0039 223.479 78.5474 222.425 81.2529 222.425 cv
83.9585 222.425 86.502 223.479 88.415 225.392 cv
92.7695 229.746 li
96.7188 233.695 96.7188 240.121 92.7695 244.07 cv
75.7651 261.074 li
73.8521 262.987 71.3086 264.041 68.603 264.041 cv
cp
f
68.6035 258.359 mo
68.6035 258.359 68.6035 258.359 68.603 258.359 cv
67.4141 258.359 66.2969 257.897 65.458 257.058 cv
61.103 252.703 li
60.1182 251.717 59.6577 250.358 59.8408 248.973 cv
61.5264 249.195 li
61.4131 250.052 61.6968 250.893 62.3052 251.501 cv
66.6602 255.855 li
67.1782 256.374 67.8682 256.659 68.6035 256.659 cv
68.6035 256.659 li
69.3389 256.659 70.0283 256.374 70.5459 255.856 cv
87.5508 238.851 li
88.6221 237.78 88.6221 236.037 87.5503 234.965 cv
83.1958 230.61 li
82.1602 229.575 80.3472 229.574 79.3105 230.61 cv
65.2749 244.646 li
64.0728 243.444 li
78.1084 229.408 li
79.8428 227.675 82.6636 227.674 84.3979 229.408 cv
88.7524 233.763 li
89.5913 234.602 90.0537 235.719 90.0537 236.908 cv
90.0537 238.097 89.5918 239.214 88.7529 240.053 cv
71.748 257.058 li
70.9097 257.897 69.793 258.359 68.6035 258.359 cv
cp
f
48.519 284.12 mo
45.9253 284.12 43.3315 283.133 41.3569 281.159 cv
37.0024 276.804 li
35.0894 274.891 34.0356 272.348 34.0356 269.642 cv
34.0356 266.936 35.0894 264.393 37.0024 262.48 cv
54.0068 245.476 li
55.9199 243.563 58.4634 242.509 61.1689 242.509 cv
63.8745 242.509 66.418 243.563 68.3306 245.476 cv
72.6855 249.83 li
73.6475 250.792 74.394 251.915 74.9043 253.167 cv
73.3301 253.808 li
72.9058 252.767 72.2847 251.833 71.4834 251.032 cv
67.1284 246.678 li
65.5366 245.086 63.4204 244.209 61.1689 244.209 cv
58.9175 244.209 56.8008 245.086 55.209 246.678 cv
38.2046 263.682 li
36.6128 265.274 35.7358 267.391 35.7358 269.642 cv
35.7358 271.894 36.6128 274.01 38.2046 275.602 cv
42.5591 279.957 li
45.8457 283.243 51.1929 283.242 54.4785 279.957 cv
71.4834 262.952 li
71.959 262.476 72.377 261.946 72.7251 261.375 cv
74.1763 262.261 li
73.7578 262.946 73.2563 263.583 72.6855 264.154 cv
55.6807 281.159 li
53.7061 283.133 51.1128 284.12 48.519 284.12 cv
cp
f
48.5195 278.442 mo
47.3804 278.442 46.2412 278.009 45.374 277.142 cv
41.019 272.787 li
40.1802 271.948 39.7183 270.831 39.7183 269.642 cv
39.7183 268.453 40.1807 267.336 41.0195 266.497 cv
58.0239 249.493 li
59.7588 247.758 62.5796 247.759 64.3135 249.492 cv
68.6685 253.847 li
69.6553 254.834 70.1152 256.196 69.9307 257.584 cv
68.2451 257.359 li
68.3599 256.501 68.0757 255.659 67.4663 255.049 cv
63.1113 250.694 li
62.041 249.623 60.2974 249.624 59.2261 250.695 cv
42.2217 267.699 li
41.1504 268.771 41.1499 270.514 42.2212 271.585 cv
46.5762 275.94 li
47.6475 277.011 49.3906 277.011 50.4619 275.94 cv
64.4976 261.904 li
65.6997 263.106 li
51.6641 277.142 li
50.7974 278.009 49.6582 278.442 48.5195 278.442 cv
cp
f
255.505 358.251 mo
257.697 358.919 li
274.203 375.424 li
278.424 371.201 li
261.919 354.697 li
261.252 352.505 li
258.747 355.011 li
234.326 330.588 li
234.228 327.006 li
227.901 320.676 li
223.678 324.899 li
230.006 331.227 li
233.589 331.324 li
233.829 331.565 li
258.012 355.745 li
255.505 358.251 li
cp
274.203 377.828 mo
256.795 360.421 li
252.3 359.052 li
255.607 355.745 li
232.866 333.006 li
229.283 332.908 li
221.274 324.899 li
227.901 318.272 li
235.909 326.283 li
236.006 329.865 li
258.747 352.606 li
262.053 349.298 li
263.422 353.795 li
280.829 371.201 li
274.203 377.828 li
cp
f
257.411 356.347 mo
256.208 355.144 li
258.631 352.722 li
259.833 353.925 li
257.411 356.347 li
cp
f
257.847 360.271 mo
256.645 359.069 li
262.069 353.646 li
263.271 354.847 li
257.847 360.271 li
cp
f
275.345 375.482 mo
258.389 358.526 li
259.591 357.325 li
276.547 374.281 li
275.345 375.482 li
cp
f
277.366 373.462 mo
260.41 356.506 li
261.612 355.305 li
278.568 372.261 li
277.366 373.462 li
cp
f
256.307 351.367 mo
255.104 350.166 li
265.516 339.755 li
272.817 342.049 li
281.552 333.315 li
280.633 328.794 li
271.93 337.499 li
264.339 335.032 li
261.874 327.442 li
270.577 318.739 li
266.057 317.819 li
257.324 326.555 li
259.618 333.855 li
249.206 344.267 li
248.004 343.065 li
257.687 333.383 li
255.393 326.082 li
265.5 315.972 li
274.017 317.704 li
263.813 327.907 li
265.689 333.683 li
271.464 335.56 li
281.668 325.354 li
283.4 333.871 li
273.291 343.978 li
265.989 341.685 li
256.307 351.367 li
cp
f
228.929 376.314 mo
227.361 376.314 225.886 375.703 224.777 374.594 cv
222.489 372.305 222.489 368.581 224.777 366.292 cv
246.066 345.003 li
247.269 346.204 li
225.979 367.493 li
224.354 369.12 224.354 371.766 225.979 373.393 cv
226.767 374.18 227.814 374.614 228.929 374.614 cv
230.042 374.614 231.09 374.18 231.877 373.393 cv
253.167 352.103 li
254.369 353.305 li
233.08 374.594 li
231.971 375.703 230.497 376.314 228.929 376.314 cv
cp
f
35.7363 556.405 mo
94.0361 556.405 li
94.0361 522.297 li
80.6089 522.297 li
75.6089 512.297 li
52.2554 512.297 li
47.2554 522.297 li
35.7363 522.297 li
35.7363 556.405 li
cp
95.7363 558.104 mo
34.0361 558.104 li
34.0361 520.598 li
46.2046 520.598 li
51.2046 510.598 li
76.6597 510.598 li
81.6597 520.598 li
95.7363 520.598 li
95.7363 558.104 li
cp
f
63.9331 525.511 mo
56.4902 525.511 50.4355 531.566 50.4355 539.01 cv
50.4355 546.451 56.4902 552.505 63.9331 552.505 cv
71.375 552.505 77.4297 546.451 77.4297 539.01 cv
77.4297 531.566 71.375 525.511 63.9331 525.511 cv
cp
63.9331 554.204 mo
55.5532 554.204 48.7354 547.388 48.7354 539.01 cv
48.7354 530.629 55.5532 523.812 63.9331 523.812 cv
72.3125 523.812 79.1299 530.629 79.1299 539.01 cv
79.1299 547.388 72.3125 554.204 63.9331 554.204 cv
cp
f
63.9331 529.357 mo
58.6113 529.357 54.2822 533.688 54.2822 539.009 cv
54.2822 544.329 58.6113 548.658 63.9331 548.658 cv
69.2539 548.658 73.583 544.329 73.583 539.009 cv
73.583 533.688 69.2539 529.357 63.9331 529.357 cv
cp
63.9331 550.357 mo
57.6743 550.357 52.582 545.267 52.582 539.009 cv
52.582 532.75 57.6743 527.658 63.9331 527.658 cv
70.1914 527.658 75.2832 532.75 75.2832 539.009 cv
75.2832 545.267 70.1914 550.357 63.9331 550.357 cv
cp
f
68.1968 517.297 mo
59.6694 517.297 li
59.6694 515.598 li
68.1968 515.598 li
68.1968 517.297 li
cp
f
81.1343 522.297 mo
46.73 522.297 li
46.73 520.598 li
81.1343 520.598 li
81.1343 522.297 li
cp
f
38.7949 520.598 mo
42.0947 520.598 li
42.0947 518.585 li
38.7949 518.585 li
38.7949 520.598 li
cp
43.7949 522.297 mo
37.0947 522.297 li
37.0947 516.886 li
43.7949 516.886 li
43.7949 522.297 li
cp
f
86.208 530.045 mo
84.5078 530.045 li
84.5078 526.268 li
86.208 526.268 li
86.208 530.045 li
cp
f
79.9243 77.2964 mo
37.189 77.2964 li
37.189 48.0771 li
37.189 45.8604 38.9854 44.0571 41.1934 44.0571 cv
81.5635 44.0571 li
83.7705 44.0571 85.5664 45.8604 85.5664 48.0771 cv
85.5664 56.2705 li
83.8662 56.2705 li
83.8662 48.0771 li
83.8662 46.7979 82.8335 45.7573 81.5635 45.7573 cv
41.1934 45.7573 li
39.9229 45.7573 38.8892 46.7979 38.8892 48.0771 cv
38.8892 75.5962 li
79.9243 75.5962 li
79.9243 77.2964 li
cp
f
79.9243 75.0713 mo
39.4136 75.0713 li
39.4136 48.0771 li
39.4136 47.0884 40.2119 46.2837 41.1934 46.2837 cv
81.5635 46.2837 li
82.5439 46.2837 83.3418 47.0884 83.3418 48.0771 cv
83.3418 56.4072 li
81.6416 56.4072 li
81.6416 48.0771 li
81.6416 48.022 81.6006 47.9839 81.5635 47.9839 cv
41.1934 47.9839 li
41.1548 47.9839 41.1138 48.0215 41.1138 48.0771 cv
41.1138 73.3711 li
79.9243 73.3711 li
79.9243 75.0713 li
cp
f
80.0186 82.9746 mo
39.3013 82.9746 li
36.3491 82.9746 34.0361 81.354 34.0361 79.2852 cv
34.0361 75.5962 li
79.9243 75.5962 li
79.9243 77.2964 li
35.7363 77.2964 li
35.7363 79.2852 li
35.7363 80.2261 37.2002 81.2744 39.3013 81.2744 cv
80.0186 81.2744 li
80.0186 82.9746 li
cp
f
65.2422 80.1353 mo
57.5151 80.1353 li
57.5151 78.4351 li
65.2422 78.4351 li
65.2422 80.1353 li
cp
f
83.4658 57.1206 mo
81.9819 57.1206 80.7749 58.3281 80.7749 59.812 cv
80.7749 81.3242 li
80.7749 82.8076 81.9819 84.0146 83.4658 84.0146 cv
91.3447 84.0146 li
92.8286 84.0146 94.0361 82.8076 94.0361 81.3242 cv
94.0361 59.812 li
94.0361 58.3281 92.8286 57.1206 91.3447 57.1206 cv
83.4658 57.1206 li
cp
91.3447 85.7148 mo
83.4658 85.7148 li
81.0444 85.7148 79.0747 83.7451 79.0747 81.3242 cv
79.0747 59.812 li
79.0747 57.3906 81.0444 55.4204 83.4658 55.4204 cv
91.3447 55.4204 li
93.7661 55.4204 95.7363 57.3906 95.7363 59.812 cv
95.7363 81.3242 li
95.7363 83.7451 93.7661 85.7148 91.3447 85.7148 cv
cp
f
94.8862 61.1929 mo
79.9248 61.1929 li
79.9248 59.4927 li
94.8862 59.4927 li
94.8862 61.1929 li
cp
f
88.8662 59.1577 mo
85.9448 59.1577 li
85.9448 57.4575 li
88.8662 57.4575 li
88.8662 59.1577 li
cp
f
94.8862 81.124 mo
79.9248 81.124 li
79.9248 79.4238 li
94.8862 79.4238 li
94.8862 81.124 li
cp
f
88.3589 83.4087 mo
86.4526 83.4087 li
86.4526 81.7085 li
88.3589 81.7085 li
88.3589 83.4087 li
cp
f
320.786 171.986 mo
371.138 171.986 li
371.138 140.071 li
320.786 140.071 li
320.786 171.986 li
cp
372.837 173.686 mo
319.087 173.686 li
319.087 138.371 li
372.837 138.371 li
372.837 173.686 li
cp
f
346.632 189.83 mo
344.933 189.821 li
345.024 172.832 li
346.724 172.841 li
346.632 189.83 li
cp
f
346.929 139.227 mo
345.229 139.215 li
345.294 129.819 li
346.993 129.831 li
346.929 139.227 li
cp
f
335.371 190.129 mo
333.783 189.521 li
340.289 172.532 li
341.877 173.141 li
335.371 190.129 li
cp
f
356.555 190.129 mo
350.049 173.141 li
351.637 172.532 li
358.143 189.521 li
356.555 190.129 li
cp
f
349.438 152.541 mo
358.289 152.541 li
358.066 149.671 356.701 147.254 354.309 145.515 cv
352.865 144.467 351.196 143.845 349.438 143.695 cv
349.438 152.541 li
cp
360.021 154.241 mo
347.738 154.241 li
347.738 141.96 li
348.587 141.959 li
348.591 141.959 348.595 141.959 348.598 141.959 cv
351.023 141.959 353.344 142.713 355.309 144.14 cv
355.309 144.14 li
358.348 146.35 360.021 149.635 360.021 153.391 cv
360.021 154.241 li
cp
f
354.483 163.467 mo
353.108 162.468 li
354.206 160.956 354.796 159.391 354.935 157.597 cv
345.233 157.597 li
345.233 155.896 li
356.666 155.896 li
356.666 156.747 li
356.666 159.281 355.973 161.417 354.483 163.467 cv
cp
f
344.384 147.052 mo
341.595 147.301 339.014 148.747 337.357 151.025 cv
336.724 151.896 336.31 152.708 335.976 153.738 cv
335.172 156.21 335.379 158.848 336.56 161.165 cv
337.74 163.482 339.752 165.201 342.225 166.003 cv
346.037 167.243 350.014 166.116 352.58 163.135 cv
344.384 157.18 li
344.384 147.052 li
cp
345.329 168.203 mo
344.129 168.203 342.907 168.013 341.699 167.621 cv
338.795 166.677 336.432 164.659 335.045 161.936 cv
333.658 159.215 333.415 156.117 334.358 153.212 cv
334.747 152.019 335.248 151.036 335.982 150.025 cv
338.124 147.079 341.582 145.318 345.232 145.314 cv
346.083 145.313 li
346.083 156.314 li
354.983 162.779 li
354.483 163.467 li
352.264 166.521 348.895 168.203 345.329 168.203 cv
cp
f
38.4209 435.976 mo
71.8257 469.381 li
93.6841 447.522 li
60.2793 414.118 li
35.8418 411.54 li
38.4209 435.976 li
cp
71.8257 471.785 mo
36.793 436.753 li
33.9307 409.63 li
61.0557 412.491 li
96.0884 447.522 li
71.8257 471.785 li
cp
f
45.0278 424.734 mo
46.1328 425.84 47.9312 425.84 49.0352 424.734 cv
50.1401 423.629 50.1401 421.83 49.0352 420.726 cv
47.9302 419.62 46.1318 419.619 45.0278 420.726 cv
43.9229 421.83 43.9229 423.629 45.0278 424.734 cv
45.0278 424.734 li
cp
47.0313 427.263 mo
45.8701 427.263 44.7095 426.82 43.8257 425.938 cv
43.8257 425.936 li
42.0581 424.168 42.0581 421.291 43.8257 419.523 cv
45.5933 417.757 48.4697 417.757 50.2373 419.522 cv
52.0049 421.29 52.0054 424.167 50.2378 425.936 cv
49.3535 426.82 48.1924 427.263 47.0313 427.263 cv
cp
f
82.2358 449.421 mo
59.269 426.454 li
60.4712 425.253 li
83.438 448.22 li
82.2358 449.421 li
cp
f
72.521 459.136 mo
49.5537 436.169 li
50.7559 434.968 li
73.7231 457.935 li
72.521 459.136 li
cp
f
77.4888 454.168 mo
54.522 431.201 li
55.7241 430 li
78.6909 452.967 li
77.4888 454.168 li
cp
f
252.623 471.434 mo
236.09 471.434 li
231.524 471.434 227.81 467.72 227.81 463.154 cv
227.81 418.016 li
227.81 413.449 231.524 409.734 236.09 409.734 cv
252.623 409.734 li
257.189 409.734 260.903 413.449 260.903 418.016 cv
260.903 426.81 li
259.203 426.81 li
259.203 418.016 li
259.203 414.387 256.251 411.434 252.623 411.434 cv
236.09 411.434 li
232.462 411.434 229.51 414.387 229.51 418.016 cv
229.51 463.154 li
229.51 466.782 232.462 469.734 236.09 469.734 cv
252.623 469.734 li
256.251 469.734 259.203 466.782 259.203 463.154 cv
259.203 458.744 li
260.903 458.744 li
260.903 463.154 li
260.903 467.72 257.189 471.434 252.623 471.434 cv
cp
f
260.053 419.978 mo
228.66 419.978 li
228.66 418.279 li
260.053 418.279 li
260.053 419.978 li
cp
f
247.421 415.708 mo
241.291 415.708 li
241.291 414.009 li
247.421 414.009 li
247.421 415.708 li
cp
f
260.053 461.801 mo
228.66 461.801 li
228.66 460.102 li
260.053 460.102 li
260.053 461.801 li
cp
f
246.357 466.594 mo
242.357 466.594 li
242.357 464.895 li
246.357 464.895 li
246.357 466.594 li
cp
f
260.325 436.374 mo
256.794 436.374 253.922 439.247 253.922 442.777 cv
253.922 446.308 256.794 449.181 260.325 449.181 cv
263.856 449.181 266.728 446.308 266.728 442.777 cv
266.728 439.247 263.856 436.374 260.325 436.374 cv
cp
260.325 450.88 mo
255.857 450.88 252.222 447.245 252.222 442.777 cv
252.222 438.31 255.857 434.675 260.325 434.675 cv
264.793 434.675 268.428 438.31 268.428 442.777 cv
268.428 447.245 264.793 450.88 260.325 450.88 cv
cp
258.769 457.895 mo
261.882 457.895 li
263.146 454.064 li
266.311 452.751 li
269.915 454.566 li
272.115 452.366 li
270.3 448.763 li
271.611 445.598 li
275.442 444.334 li
275.442 441.221 li
271.611 439.955 li
270.3 436.792 li
272.115 433.188 li
269.914 430.986 li
266.311 432.802 li
263.146 431.491 li
261.882 427.66 li
258.769 427.66 li
257.505 431.491 li
254.339 432.802 li
250.736 430.986 li
248.535 433.188 li
250.35 436.792 li
249.039 439.955 li
245.208 441.221 li
245.208 444.334 li
249.039 445.598 li
250.35 448.763 li
248.535 452.366 li
250.736 454.567 li
254.339 452.751 li
257.505 454.064 li
258.769 457.895 li
cp
263.112 459.594 mo
257.539 459.594 li
256.135 455.335 li
254.409 454.62 li
250.403 456.638 li
246.464 452.7 li
248.481 448.694 li
247.766 446.969 li
243.508 445.563 li
243.508 439.992 li
247.766 438.586 li
248.481 436.86 li
246.464 432.855 li
250.403 428.916 li
254.409 430.933 li
256.135 430.218 li
257.539 425.961 li
263.112 425.961 li
264.516 430.218 li
266.242 430.933 li
270.247 428.916 li
274.186 432.855 li
272.169 436.86 li
272.883 438.586 li
277.143 439.992 li
277.143 445.563 li
272.883 446.969 li
272.169 448.694 li
274.186 452.698 li
270.248 456.639 li
266.242 454.62 li
264.516 455.335 li
263.112 459.594 li
cp
f
260.325 439.228 mo
258.368 439.228 256.776 440.82 256.776 442.777 cv
256.776 444.734 258.368 446.327 260.325 446.327 cv
262.282 446.327 263.874 444.734 263.874 442.777 cv
263.874 440.82 262.282 439.228 260.325 439.228 cv
cp
260.325 448.026 mo
257.431 448.026 255.076 445.672 255.076 442.777 cv
255.076 439.883 257.431 437.528 260.325 437.528 cv
263.22 437.528 265.575 439.883 265.575 442.777 cv
265.575 445.672 263.22 448.026 260.325 448.026 cv
cp
f
364.185 553.926 mo
315.112 553.926 li
315.112 514.776 li
364.185 514.776 li
364.185 527.002 li
362.485 527.002 li
362.485 516.476 li
316.811 516.476 li
316.811 552.227 li
362.485 552.227 li
362.485 536.315 li
364.185 536.315 li
364.185 553.926 li
cp
f
363.335 522.356 mo
315.962 522.356 li
315.962 520.657 li
363.335 520.657 li
363.335 522.356 li
cp
f
320.737 519.416 mo
317.928 519.416 li
317.928 517.717 li
320.737 517.717 li
320.737 519.416 li
cp
f
325.23 519.416 mo
322.422 519.416 li
322.422 517.717 li
325.23 517.717 li
325.23 519.416 li
cp
f
329.725 519.416 mo
326.916 519.416 li
326.916 517.717 li
329.725 517.717 li
329.725 519.416 li
cp
f
332.04 528.313 mo
319.895 528.313 li
319.895 526.613 li
332.04 526.613 li
332.04 528.313 li
cp
f
350.433 543.383 mo
319.895 543.383 li
319.895 541.684 li
350.433 541.684 li
350.433 543.383 li
cp
f
352.78 538.405 mo
319.895 538.405 li
319.895 536.706 li
352.78 536.706 li
352.78 538.405 li
cp
f
355.564 533.428 mo
319.895 533.428 li
319.895 531.729 li
355.564 531.729 li
355.564 533.428 li
cp
f
339.648 548.361 mo
319.895 548.361 li
319.895 546.662 li
339.648 546.662 li
339.648 548.361 li
cp
f
352.849 538.69 mo
350.628 544.364 li
356.303 542.144 li
374.837 523.611 li
375.203 523.243 375.203 522.646 374.836 522.277 cv
372.715 520.157 li
372.355 519.799 371.736 519.801 371.383 520.156 cv
352.849 538.69 li
cp
347.63 547.362 mo
351.395 537.738 li
351.521 537.613 li
370.181 518.955 li
371.176 517.957 372.918 517.957 373.917 518.955 cv
376.038 521.075 li
377.067 522.106 377.067 523.782 376.039 524.813 cv
357.254 543.597 li
347.63 547.362 li
cp
f
373.359 526.289 mo
368.703 521.632 li
369.906 520.431 li
374.563 525.088 li
373.359 526.289 li
cp
f
352.099 545.112 mo
349.977 542.991 li
351.178 541.788 li
353.3 543.909 li
352.099 545.112 li
cp
f
356.178 543.471 mo
351.521 538.815 li
352.723 537.613 li
357.379 542.269 li
356.178 543.471 li
cp
f
354.275 540.366 mo
353.074 539.165 li
370.256 521.983 li
371.457 523.185 li
354.275 540.366 li
cp
f
355.827 541.919 mo
354.626 540.718 li
371.808 523.535 li
373.009 524.736 li
355.827 541.919 li
cp
f
282.476 547.123 mo
222.476 547.123 li
222.476 545.424 li
282.476 545.424 li
282.476 547.123 li
cp
f
238.477 536.29 mo
242.402 536.29 li
242.402 529.948 li
238.477 529.948 li
238.477 536.29 li
cp
244.102 537.989 mo
236.777 537.989 li
236.777 528.249 li
244.102 528.249 li
244.102 537.989 li
cp
f
246.504 536.29 mo
250.429 536.29 li
250.429 524.104 li
246.504 524.104 li
246.504 536.29 li
cp
252.129 537.989 mo
244.804 537.989 li
244.804 522.404 li
252.129 522.404 li
252.129 537.989 li
cp
f
254.531 536.29 mo
258.456 536.29 li
258.456 518.258 li
254.531 518.258 li
254.531 536.29 li
cp
260.156 537.989 mo
252.831 537.989 li
252.831 516.559 li
260.156 516.559 li
260.156 537.989 li
cp
f
262.558 536.29 mo
266.483 536.29 li
266.483 521.908 li
262.558 521.908 li
262.558 536.29 li
cp
268.183 537.989 mo
260.857 537.989 li
260.857 520.209 li
268.183 520.209 li
268.183 537.989 li
cp
f
227.076 541.676 mo
277.884 541.676 li
277.884 513.021 li
277.884 512.938 277.816 512.871 277.734 512.871 cv
227.226 512.871 li
227.144 512.871 227.076 512.938 227.076 513.021 cv
227.076 541.676 li
cp
279.584 543.375 mo
225.376 543.375 li
225.376 513.021 li
225.376 512.001 226.206 511.172 227.226 511.172 cv
277.734 511.172 li
278.754 511.172 279.584 512.001 279.584 513.021 cv
279.584 543.375 li
cp
f
224.476 509.008 mo
223.842 509.008 223.326 509.524 223.326 510.158 cv
223.326 551.257 li
223.326 551.891 223.842 552.407 224.476 552.407 cv
280.476 552.406 li
281.11 552.406 281.626 551.89 281.626 551.256 cv
281.626 510.158 li
281.626 509.524 281.11 509.008 280.476 509.008 cv
224.476 509.008 li
cp
224.476 554.106 mo
222.905 554.106 221.626 552.828 221.626 551.257 cv
221.626 510.158 li
221.626 508.587 222.905 507.309 224.476 507.309 cv
280.476 507.309 li
282.047 507.309 283.326 508.587 283.326 510.158 cv
283.326 551.256 li
283.326 552.827 282.047 554.106 280.476 554.106 cv
224.476 554.106 li
cp
f
255.476 550.731 mo
249.476 550.731 li
249.476 549.031 li
255.476 549.031 li
255.476 550.731 li
cp
f
246.439 560.727 mo
244.779 560.359 li
246.394 553.072 li
248.054 553.44 li
246.439 560.727 li
cp
f
258.513 560.727 mo
256.898 553.44 li
258.558 553.072 li
260.173 560.359 li
258.513 560.727 li
cp
f
263.626 561.393 mo
241.326 561.393 li
241.326 559.693 li
263.626 559.693 li
263.626 561.393 li
cp
f
133.073 548.144 mo
184.23 548.144 li
184.23 516.868 li
184.23 515.357 183.01 514.128 181.51 514.128 cv
135.795 514.128 li
134.294 514.128 133.073 515.357 133.073 516.868 cv
133.073 548.144 li
cp
185.931 549.843 mo
131.373 549.843 li
131.373 516.868 li
131.373 514.42 133.357 512.429 135.795 512.429 cv
181.51 512.429 li
183.948 512.429 185.931 514.42 185.931 516.868 cv
185.931 549.843 li
cp
f
158.652 521.986 mo
153.606 521.986 149.502 526.092 149.502 531.137 cv
149.502 536.182 153.606 540.287 158.652 540.287 cv
163.697 540.287 167.802 536.182 167.802 531.137 cv
167.802 526.092 163.697 521.986 158.652 521.986 cv
cp
158.652 541.986 mo
152.669 541.986 147.802 537.119 147.802 531.137 cv
147.802 525.154 152.669 520.287 158.652 520.287 cv
164.635 520.287 169.502 525.154 169.502 531.137 cv
169.502 537.119 164.635 541.986 158.652 541.986 cv
cp
f
165.122 538.809 mo
157.802 531.489 li
157.802 521.137 li
159.502 521.137 li
159.502 530.784 li
166.324 537.607 li
165.122 538.809 li
cp
f
158.835 531.967 mo
158.468 530.307 li
168.234 528.148 li
168.601 529.808 li
158.835 531.967 li
cp
f
167.128 536.515 mo
158.259 531.891 li
159.045 530.383 li
167.914 535.007 li
167.128 536.515 li
cp
f
135.593 545.624 mo
181.711 545.624 li
181.711 516.868 li
181.711 516.75 181.619 516.649 181.51 516.649 cv
135.795 516.649 li
135.684 516.649 135.593 516.748 135.593 516.868 cv
135.593 545.624 li
cp
183.411 547.323 mo
133.893 547.323 li
133.893 516.868 li
133.893 515.81 134.746 514.95 135.795 514.95 cv
181.51 514.95 li
182.558 514.95 183.411 515.81 183.411 516.868 cv
183.411 547.323 li
cp
f
129.503 549.843 mo
129.503 552.208 li
129.503 553.468 131.442 554.573 133.653 554.573 cv
183.653 554.573 li
185.864 554.573 187.803 553.468 187.803 552.208 cv
187.803 549.843 li
129.503 549.843 li
cp
183.653 556.273 mo
133.653 556.273 li
130.373 556.273 127.803 554.487 127.803 552.208 cv
127.803 548.144 li
189.503 548.144 li
189.503 552.208 li
189.503 554.487 186.933 556.273 183.653 556.273 cv
cp
f
163.028 553.058 mo
154.278 553.058 li
154.278 551.358 li
163.028 551.358 li
163.028 553.058 li
cp
f
62.3237 359.789 mo
53.7271 359.789 46.7329 352.796 46.7329 344.199 cv
46.7329 335.603 53.7271 328.608 62.3237 328.608 cv
70.9204 328.608 77.9146 335.603 77.9146 344.199 cv
77.9146 346.43 77.4526 348.584 76.5425 350.603 cv
74.9927 349.904 li
75.8032 348.106 76.2144 346.186 76.2144 344.199 cv
76.2144 336.54 69.9829 330.308 62.3237 330.308 cv
54.6646 330.308 48.4331 336.54 48.4331 344.199 cv
48.4331 351.858 54.6646 358.09 62.3237 358.09 cv
64.311 358.09 66.2305 357.679 68.0283 356.868 cv
68.7266 358.419 li
66.7075 359.328 64.5532 359.789 62.3237 359.789 cv
cp
66.6704 372.486 mo
57.9775 372.486 li
55.6152 365.322 li
52.1318 363.879 li
45.3926 367.274 li
39.2485 361.129 li
42.6416 354.392 li
41.1992 350.908 li
34.0361 348.543 li
34.0361 339.853 li
41.1992 337.488 li
42.6416 334.007 li
39.2485 327.269 li
45.3926 321.123 li
52.1318 324.517 li
55.6152 323.074 li
57.9775 315.911 li
66.6704 315.911 li
69.0322 323.074 li
72.5156 324.517 li
79.2539 321.122 li
85.3979 327.269 li
82.0044 334.007 li
83.4463 337.488 li
90.6118 339.853 li
90.6118 348.543 li
83.4463 350.908 li
82.0044 354.392 li
82.9785 356.324 li
81.46 357.09 li
80.1362 354.46 li
82.1738 349.539 li
88.9116 347.315 li
88.9116 341.082 li
82.1738 338.859 li
80.1362 333.939 li
83.3267 327.601 li
78.9209 323.194 li
72.585 326.386 li
67.6621 324.348 li
65.4409 317.61 li
59.207 317.61 li
56.9854 324.348 li
52.0625 326.386 li
45.7256 323.193 li
41.3198 327.601 li
44.5107 333.939 li
42.4717 338.859 li
35.7363 341.082 li
35.7363 347.315 li
42.4717 349.539 li
44.5107 354.46 li
41.3198 360.797 li
45.7256 365.202 li
52.0625 362.01 li
56.9854 364.051 li
59.207 370.787 li
65.4409 370.787 li
67.6621 364.051 li
72.585 362.01 li
75.2104 363.333 li
74.4458 364.851 li
72.5156 363.879 li
69.0322 365.322 li
66.6704 372.486 li
cp
f
64.6523 352.712 mo
86.5698 374.631 li
88.2749 376.334 91.0498 376.334 92.7549 374.63 cv
94.4604 372.925 94.4604 370.15 92.7549 368.444 cv
70.8374 346.526 li
72.3921 341.578 li
65.2412 334.427 li
61.8164 335.124 li
68.9321 342.239 li
66.8306 348.706 li
60.3633 350.807 li
53.2495 343.691 li
52.5522 347.116 li
59.7046 354.267 li
64.6523 352.712 li
cp
89.6621 377.607 mo
88.1069 377.607 86.5518 377.016 85.3677 375.833 cv
64.1787 354.644 li
59.231 356.198 li
50.7046 347.673 li
52.2144 340.252 li
60.8291 348.867 li
65.4819 347.356 li
66.9937 342.704 li
58.377 334.089 li
65.7979 332.579 li
74.3228 341.105 li
72.7681 346.054 li
93.957 367.243 li
96.3252 369.611 96.3252 373.464 93.957 375.832 cv
92.7729 377.016 91.2178 377.607 89.6621 377.607 cv
cp
f
535.2 470.584 mo
533.501 470.584 li
533.501 420.118 li
535.2 420.118 li
535.2 470.584 li
cp
f
540.799 432.862 mo
527.897 432.862 li
527.897 431.163 li
540.799 431.163 li
540.799 432.862 li
cp
f
534.351 411.434 mo
532.19 411.434 530.433 413.191 530.433 415.353 cv
530.433 417.512 532.19 419.269 534.351 419.269 cv
536.511 419.269 538.269 417.512 538.269 415.353 cv
538.269 413.191 536.511 411.434 534.351 411.434 cv
cp
534.351 420.968 mo
531.253 420.968 528.733 418.449 528.733 415.353 cv
528.733 412.255 531.253 409.734 534.351 409.734 cv
537.448 409.734 539.968 412.255 539.968 415.353 cv
539.968 418.449 537.448 420.968 534.351 420.968 cv
cp
f
534.516 466.488 mo
534.185 464.82 li
534.34 464.79 548.496 461.879 555.104 452.381 cv
553.676 452.991 552.454 453.327 552.371 453.35 cv
551.926 451.709 li
551.956 451.701 554.988 450.865 556.881 449.486 cv
559.631 447.481 li
558.146 450.544 li
552.172 462.872 535.233 466.347 534.516 466.488 cv
cp
f
534.185 466.488 mo
533.468 466.347 516.53 462.872 510.556 450.544 cv
509.071 447.481 li
511.821 449.486 li
513.719 450.87 516.746 451.701 516.776 451.709 cv
516.331 453.35 li
516.248 453.327 515.026 452.991 513.598 452.381 cv
520.209 461.891 534.361 464.79 534.516 464.82 cv
534.185 466.488 li
cp
f
410.262 557.217 mo
468.563 557.217 li
468.563 511.484 li
410.262 511.484 li
410.262 557.217 li
cp
470.262 558.916 mo
408.563 558.916 li
408.563 509.785 li
470.262 509.785 li
470.262 558.916 li
cp
f
469.412 518.933 mo
409.412 518.933 li
409.412 517.233 li
469.412 517.233 li
469.412 518.933 li
cp
f
415.46 515.209 mo
411.902 515.209 li
411.902 513.51 li
415.46 513.51 li
415.46 515.209 li
cp
f
421.151 515.209 mo
417.594 515.209 li
417.594 513.51 li
421.151 513.51 li
421.151 515.209 li
cp
f
426.843 515.209 mo
423.286 515.209 li
423.286 513.51 li
426.843 513.51 li
426.843 515.209 li
cp
f
435.989 549.044 mo
434.409 548.419 li
442.835 527.106 li
444.415 527.731 li
435.989 549.044 li
cp
f
449.182 545.1 mo
447.98 543.898 li
453.803 538.075 li
447.979 532.251 li
449.183 531.05 li
456.207 538.075 li
449.182 545.1 li
cp
f
429.643 545.1 mo
422.617 538.075 li
429.642 531.05 li
430.845 532.251 li
425.021 538.075 li
430.844 543.898 li
429.643 545.1 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: ( ) ()
%%Title: (SEO Line Icons Set.eps)
%%CreationDate: 12/5/2016 3:00 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6k?I5mq`+Mdra+4U%q#PQ9Flpg#UkRfK"V?o&1PEqBD7o4^VB`8P"@"M\@ZAS5Fc".PC(I.b=oeLHID#d.segn2#c5%0tsm1
%0L#9Pr:,:&lR2P:et!)?)!-3>C\RCs;:`>7PgM>3m]J59;f2EWeJbrlqB!"Ue+hCYCoZS$k`a)FD]-6fAIPoAp3]bk6&kd]l?q%a
%]taX;1MW96Z7XF&d!@jZ#V\0*p\Hj@:C12L0hIHEBuGeBofa`o^16f(KWd[$6jQ%s0ntZZ,<gWAZ2hIdQR$f!*RK:eVe`E3GC-4@
%duF&/\sCE0Gl7fJUZ)Yh`Oe;Lr"f>LI>V'*qop0Obi_6BO1h1s%tE8`/R?j6X9E`YX\$Vn2JP14s2$>bhZ4\q"@$rkhC%6,np(Da
%_-m>#nHgDLbZPt=Ta>+"!%ehhWMm3c9splBH/KPe,5T1ONW)7p!M^5L(Z>O)=QU`-Ht#d08<T$&h^h;gP-c=Bp?/UI6rPV)BaIJM
%lkT/"5VObRZ^S)p:!L=blTIKi4AZHmiS:AF9n9%g4k!AmoM@NA<stb$RPh2P`8,,#+W#<M;1"UeIOh>qe=^3Ueg-S&X^*c$d6b`5
%.mgtS!-qTZ"^d5KI@PtFQU*FN;>_YK_?"%g19_0iP6Z\gC$IRh]c38fVHLj"hi:FEib/=Z#5t7g8#"L?N;Qi%"A&95>+;U_jk`nu
%PU8,Io7AheZ/0Dag8YX>`^S9^'J:g@7(o_$4Vb2_O"qneb?r!Ec^r\k<uLLgkM`He_:Mct^8=f(Q07*fcbleG&$POd^7*0:m^S`3
%5qkl^h]rM[8J2/iUeHLO)N-nK=:E'b^d$=3(5$#"(^,J`i%"q'V'&ki"hUX0n4G/6@58^F23X.Je30"H!1=8`KGTW7N)t\q`)gAK
%Eh2AZGPDBY+C=OPJjI$T[eLb/$GJhDL_P5*\.`o@c4DZ($GSm&i%#cS'+5<[Ob0bBGPD1s6bM?YR&5*3&.G9;?Qi)i"5=*Jd,HdV
%0eG,Zi%+5QZ,[..jl=nMq9e1.WsB"1#JhOCn.cFe)2U)gf.=qX%hK0/82uT#K0)F?i@Fg1&]A\i?`h;b-MRqa+HGq+1D>ZS-8&U*
%S<M"q>!.om_E,=t9R@&"M+;63Z,[-C`T*fRRISp_D&@s(K.mj&,,5]8e/`%Z01-`<.g3bq%WTF/_4BO8KRjD\mR53S-=QK(3O#:m
%E@+">j:3a_M[U@.U*PE$R/2&UR.bc:9K]\,_AIkH?9SK:oAeg"!;JVSB.Y/T.[FnpHV>PE6jEV-U?lPXmK:$6m</&[&BiH'/EoP-
%*(`QS*GH^dmr4cCg>N6@'-SagmZ<)QQRnQKN!I@.=dDARi4EPM=mI0MiChHXr[/!H]CV'_JaT7gS"+^#:R:Npk8jS\7e-4de=Jg<
%rC\F*-0H<K9.'1Qk8jR)h%^)P3Uc`M3fUm9n+[u7s0M&Sj<8oir5IR82uF/*jFia?As=]W8jm[*f6?Gt^=\-g8,W=4?%;2,8sIBR
%-iI2Ss4tFYl>G'\hAQ&0bcZKa10,-DAc=FGnYkrlak[6X(DnMMZ8.^6M5\M3rueOulQ?VK$4!%_]>?:A<mi.d5U-BGj6h_F/8+"D
%0Ibe:OY@@AP^k>r2JWkX:]U$V&-H/KA-FV+^Q2kEVLm@SNTW:J;/g$`#(hgR'!;TcQ9i#:,,@,!\4AldmfJ3Fi0H8p&Wq]DVdRB(
%G;qJ]5bCG[fa<q]A0c#JEL7bKdV)h%5<'?`.O:h?<@/oC]&O1LV:;`*+@Mq,BD5DaEL<Wk:4s,Lh]NoUSZl^j=CO,VEX1P7j2be9
%1bG"&.L9W%4e04\@;0AK2O2*+80<a7P)Y.3`%7l,^0kqH-9Qk/Yi%q4)Hscu;rf`;/fp6b9s159BgR)<VF5;uE,C>=F9Hr]Q=LPp
%V_<l:Ye)Ct/:+]6mOmV:1Lk^:Q4=+B%gLoC`jp@UBT=MoaDT-cNKYnc$8ttV`@CR]d<Tr=+P[X5d@GJbk%LGTSRmTIP1;C^0^t?k
%C!F\e@$B*F2K"^HOE%>B0U0iV5sRO7c)*e8fsA;%C-]MQ\d8';R>Xq2NS0#r%D<7K!)7U:]4:)q;&p]>lKKGTE+tDRP+.0d$J%.f
%3H8-Adb:4M%E]Yn'CDTO"!->IY`6QD,R/@T(_[dkoUXo&C3J@O$P_pnDcUO>0H7Cf6iP%^\/TXdL;Z[,"<lPig]Ye]WWb74jX?fi
%I7I.k'd>OQ0-<Xe=D1u$1oN55RQgf4$;Q=CT2C)ks$PTI.?6er*Yfk2K4_Yb9_jgV56;uPK7gK\Jj@8kj\'G,DRCuGV?*E=@N9$Y
%^]3U#\]pWn>oeXl#"jB+Z==dHQ+q7eh'U8$BA@=Bk$OX,@L`oU#J*\4*<eBQEF+Bi_Y6?lrjgZ`7N;AiR+@--M&CmsXC1pi[,i&T
%s,,C&^a'+Q(S!RY[,WXV3&u8Eo+&Hq2*5UmPOs[VN$Q#V-t<MCFIl%<]89&T5qBO>7iQ[X\^LgJTTC!P$9Jipig,62)NglEOgHpV
%e_N"WY%S%>i?3Z2AmFdr-\hk8>Hu.<B1ZP>64KHLNQbt4]M9UKDH&p=-6;?dab-!"Tt!I8.nh)A#=fd%l7C\([prTGQ:3k8EQ`UT
%&M-6P_M(:TZTjYdeIc(KLUA>A7+BLn1)U_2%^8EGaQ@#[:,[q2EmYJ`nLbFbK>M-0G2WWOq3+0O8']q0G2:0;Pdn%V2rgEa`sJ#d
%9Vji,Ed7"+N+T;braQKHe?UZLmc9D?Xea<=7W9(-d+Z_qCK3*%<VGc=ll9E$bI0Hh6F4t34<]HCdj2qdW".C3)rmq'[OEOaO0t$T
%'4l%=+4dloOH@n6JtaIn(?t$[*Gb,bJt)cmIA[MWM:]l?#JH%J2?%J@@Pk6*o$N2;OGUL>@2U@P+iFAJV#r`46mf5RE5E/YY"!(E
%8\gnj&MieZFicaWO_g"%@PB"jZB0*i_SK7*[Z37rBHFuJN`LUi1a7[nLrs;a)@!;MX`(S'*%V<*I2iRrCtG>a:6CZ*`;N1gli\&S
%K5`Rn]-SNu%B'[eWc"XRFrWmKIFK@`W8U@g=G7deB;K-\G:R]c(NHu)B??Ho&*t4M(>dnSEL"$I':d#)GDko75s,S;KS<d%e][;H
%Wu2Dn^In=jepV4uc27C2f_e4YrAV(;RI%FJps1C3:'>_!SI(6J:ptL'+?cX_J]B$F(t<QDj46+3"fD9\a`'!TCrWRaH,AZj?"JF'
%bhec'VHbCg$(`06FI39^]2c$Rjp]pTZGM5[l8nB/GY5S$#Kg%WG.ai%LQ&I!pbp/iO55k<-nsl6n[lK:1[):P:naiUTL6"J/#jjN
%](61g'sQ^>X!8\0%Z(j"ejAMBUA55N,KdN.QY^^tcF^rC:.<l&CS\4U(5\f"GHba44[[)!]=dT#m)(WCLhFpI!5Y5UUrbgI0Ifg-
%7u+'e;!M'nVuq-VB$ia+[+abp*PpI/!#aO^YpSh!OeC]%(H0a47,&#B*N%3sB2LiI-4km5_\&_6d#;6V-HV9PXrWoTWWZNsd,`V7
%8"Q5sof2R0'S^Fh)3/>7P<bRAK6A:bJV>P<X&7VaR5*L5)sB,lh;oA\hjcg#Nqt=di@LAIoYcP^eWC'[%61sR])Fq<-DF*7)Wt^p
%ZWBEZ_N%H)P08gW+V)niCs.6tRb_E!+9F0,MUIg:/iq,Jfn*p3F08`C,C5B@P-sVn33#="<a)F+4D\IpE(ZT1g=A8^kE>1/b]7Aa
%)`"HU]u+MDU+tD9%NA":8H2F">"/ogb!2,GFcq3?JOn,lbGj1KJW-?Z`"]e2R;MKYZk0&`GWK<8P'$1JR#F,'TE2kTZVM?A&t[H?
%H!GOL&Q;kLh)4.gIs,cdXKo`n:?Lp.mTSc2C_luOI5lrmcqZn4N)7qW<O1U\fgudd_9hDhBp]A0p&-l%p!JnekLGNPBr=Gn,:NTB
%^I@EOZsWQepZ&-a6^8OuAI&60cJng8j4p+3@mS+As3e/G)Q<bc%>or&%UCAW?n`.WkR*dmR#*)T,/Fie7-,,a83Ycq3#OPU&tS*D
%hH$l37qQsC4o:E#KZA]RFN5F)@PaljC;1:^A6eYU3g>@R*m,s0?te/jSb/OB3DPj*=uKBiQ5*#'Lj6E?A]dWb3H]$r$0$::12&U:
%#GmImfJtR!;4a($3hLG+4BcjcI_m2fCnW`X87tZ'c@'OX.!9^/gd-iS'F>*)hPE*A9AZFcr9ah?9cLqW.Kt!)8*BLR'bXC&M\WlR
%p,OW_"J&_[Xc(+'In'V]%V#gIP<I;[lMqEpPq/RM'O"8/lSkU#+'8#MZ#T@*iHHY+)kf%)[Zj>X@"`5m7j+jRl8I.pVaE-`U))"U
%15(&e4;"t'Z\5_*iG@_?G<2I@(M=l/aAg6;,%YQ]Ehp[nh-DI"AcO+:,QsW"4Y4f:"Ig+i;Y`DVe*bn[*0/mBZRjP?lr<CH=%<J$
%.(:s/`<RbXZgkC81U=$6I6*&NJS#lVPKo"fk>^hVD8S,2<Yjpp\(lR,WeI7.(3!=r7jjZ8N3I'00"=g;;'>;#D%1HVX)r*P:8,]3
%Sff^TfA/kCWm^sqm*0Xms#HU#R8hUCL#lf"R%2)L:ja.!W5iIb":7]cm%_*Y)Fmlhgr>1_,iOc!G%fo*cg<!s@r%@:M@uU&<`*Z&
%_m;Fe'1p4aQY`##'lnhiP'MF'$GE>b$]dIJ:a.eMH^^=%\O.UIk\7BXmpD.=?+Y-8PY(hfmXK"RDNPU;YN>4p8]WddQp82@7;BAc
%&B%.7XW6<7_'-ft8t?fN7Vh)O"KMhW6nKctT8Fc3-q>+)g:GZ$S\#/<hlVN#PNYm2_h+jRT%F-VnDJeX1M29@)iUPjCr9P#,&A,B
%eDO^PF;WjtM!^l&l9)VZDh>?!)3$UllOp#e:[k-3F5eI9r<XZ+;4HS+VB0b2g^'K5hN6G#,aY$)*TK-G+^]k'6#GdFB?c0DF6&q<
%W<^A];%&.^UBR*f_<#+i]cflIh2'H2I&tIa/@RTlVRJ>J["iJhM!f#_];$sb%`%"69)^UV]BEFNPJ>l8C[aW&>-DaVaO#6@iBA`H
%)U;f+G.C9mBdW))IE,u4E+YUK3QB$=).u?-o,RV]4"!D\A#miCq6<es1]hlI?\$/G-DerrVeSLU+K5M!OXld\%C!t]$#,)>pBqGp
%(-rDu_`4O::-s`DM\nk9cAg=?kKZJCqj'TVH=eZF)0&?>EYGfV30Y8'+10:6mCs0G<m$uH=Y$b&@B7U/bo0V5gJeYE";e]*T4@<f
%Ip6TWP[h)m3NTPaE8,ZI3u[:Jh"L4JE\DB@`4WP2$8f)&(lIe-7B4".hg7s2m[!mh\dc'$BjmAGUclsGR)_XdOt+T91=U/HDD+Me
%N`$a8R:[Pgne$VFiW\R1&qj6)kkd-kNoU^km_T8lB]hMScdBnoEo2DM\Ku8-L5IHPLN2KM.)+>eZo?KNAVmt"r2=+n,c\1D+67<0
%#C+>@Nm-YbE:1H<5Wrb$j%A**Ap)E`-N0IK,<$r3nG9Urh$8,a>XbQo^JA@pPkWkW534+Pp\P*9:BmBBh0YL)mK4iC]upD>qL]ap
%,u&31>dB:lASj6epcVn&E\6/8h1cS"@X4NZ5O^6P(ru`Slf!Jg*B;6c36im-\=&'ZHe(=^"'=j$EJNtjFWq*S6'0&I?&'J#68E*J
%Y+:Nb9BjeNK/R'Zp4)#TW!BRP5mdM"'_`\U+^Lk?TD9$;jKe[10ka['+KC+p312=\NqEV4'1(aklTD<-PduRX\:d.D7uh<o<(]Xg
%kHG&trP.s6N0.<`Y!@ur=/`1J+66NN@>^8l\q<=>W1=LMnZ\0l7nCKe;-fYR&toFtLlsfSA7QLr<L]h$!J.(<7m=N408bU2<Nr8o
%PM!-_))=.M8^J+<-5Fcd#R`Lb*+YV8-<,LT?jZ?'e35GV'H%O@g:-b(.RPOS7.'0-OCOVF!_0NA6%Ec/r';Bfi[Bh>R<+hIXn<oN
%-]M6"W?\&oqe.]2o2@i5>-JC)kb+\`%P:r)7Z28C&\A)mnfn\1E4^sc6Sp/IG8JhDS)D6"[^i%EcZ)!9%^2#$B%H<:8Z_ePSa*03
%(sNKCbb14/>9bU,[-0Vko[n$:aT/,S7QDnZUJfkXOe;lC55?TW"8+_/P/>tbY`):s?FHQ)ZXlci-mM<M6tk*ok/'t/M.W#WbNJtH
%O25:8e0Y._$D#A9iDqE7V1Ii^(KEi=/5-[@7-_-N47PkQjW/oM8)+%ETcGtJZt6)[e^G*%-?=.Vpqsh2[e,&f@n#@1U"P-Nja2:Q
%HWqF&%S$F&ZeOrdZ[7#Fj=oWnf&%Zn+1p2aDiFQ(Am[aZB"0qt\t3e@i.KFZO"$h-+(#O#MiJmJSi;Y+;7!Dd?dQ34f'@P<OBM)_
%28!33TS)*U:M0Xes"<fKkZbdS#8`FqUYj2%X2Z7](J%MaP30sPD9[hhqU!cc07_bUZhLA+2Sdp\78obL=bs#&-TG\a6::((l\!)Y
%XoDqi>HQ[:9`:;YnQhGE^_\s;r)!]+d8\9hA+8</nM4LLWL<s>ckh*Vmp>i@=qrUF)$%.CgHW'Bd@gcaE*c#X2q>?Og-d/jq>mat
%J?-tW&5_]KHQ#g=],a-P1l@bO;ZWgiSu,D4F^MGR[4>O0FSsZl3Q)-2Go8?52Of$;<',69lq<fGDV\ANN2Ac7M!Ob.oJL^sp@O/1
%:G^alD2cg1X;8V0KF+u?qonSHG-=b!JW#FC$R&3TU'%56,MWr@$@f(k.cp;c-XeS(CmBsVhJLr@dk,iQg[oMb/,\c-1f)h3.&4b@
%U65>99dd";92tcDZTts!ol^Lt;s<O1c-]7\eU]s]j"&X0NeSrM+:HJViZ%B&[,24GVg:1c_&!Kga2!E$i6T%%fUmT(i7n3Um_Yo9
%kd."MiD6_Wk0GKCikE38X_&MW$j-QuHE#fNJ0EYOJ-j\(#@Ybt]id(t2M0k74'>sam>LJ1pCj81/d>F4=V(@P$=M5(bmj;4D>#Q[
%\u+*E]eOJC[=uH4$4,S`>bgng?Kp!'?t7$t$5kLqr8ds=^ZHJhT,pi(3BIoffsaAU;chl/l)<e\&%Flt=Wq:Jn<EdgZfsGLOmPKM
%60/,-(\G-p<9DFPpA/C#%g'SQ2Oun=f2T'.K?jZDDE8j+Id=;p;h&IeQqRV.bd'VREB78L[B!k4mB[>5l,CpV^s<@u[Sc8Q+T@jj
%?l-Yq?_R).3#D4gOFugU*ALLYp7#AT%KbkAfSj#j4))sgNMKUFAi-GD:T"%`Qib1kBh0-_bu@!3idiNgk^6$khB$;K>ojqObmKSb
%d5T8&0s2::_8m9V1Y3G-K6:$lk!<:%dje1u1490bMH9DhQ`8a[U9dPTjp?`18`bV:.eg]?b#M.N,V%%H6goJjABoho/mpHtTt%DP
%jd*I417)5-Em%^*REL$U>Yb'#\XY$h(*o4SF5J+0o7k3]kAs5^LXn$+eV`n[^V)qBM"qO(0IY'AGMUHTVE3O>7F?SJ.U8%4TU?"V
%'jd_KJ"3E?i2HHRm<?1Rg.m[KDSG.C&)pX[@b*%c[-M%;n7'ou1GnFSe77pKQVjl.[GD%'=C>FL7(=hEQ8`5#$r?J[NM^.Pr`L>8
%\%)@[c_d&_TER8)RIbACU>%W-C0<'O<Gr/R^m?D,+/&^rXC(\Al-2H"#IDP=49uol]&-K3PgSpme@$0pL:bY<5K5d:l+]8K>Pf%b
%:6u,Y35QlWGTbDHB>Z:\$&pskLI"i,$&r:5d.fKi(aEt_m9\(BKkpS[/Yc^QC<h\U(,G+LG$>#T/9K,7c@G*!i.!i.=e&cXH*[Jl
%gd5LUnUP3U"Ie@YZb_")JY*qm?MH2a:DXN-I.P14`GNiGi2W[2X1,I-Q[RM?nr-rF,]iDhJ)c"RN+u-OFM%J!3W:8_c^SkO8u6`/
%c?,RlAkdoB>f^U!]:s^LIf.bs/5Q'm:\fr;L]'uGHpeLTb^3LAPC1W#;)=>_9,U2TBkl?T%i]Z7q_l1+I2d"@_`d=_>1*4R-pdoH
%`U\oC<5!*'03"P=]oJP,^gU[FAA.Km?Tn_jgYtrFm*t!X"[+iE3D;f+Ao-n[fQT#U^ZcN8H,X?/]`+\miB*PUr=8,[@D?AnoQpdd
%C&BRe?f4kehseX1:QdU(]'eMWmfMA%mi`$EhVCDGGP@H:A1n>NGW[+T.#qrV+&FZZN"2sA?>iW,nU1^MKPLM4=aUV/=n3\9MdrkO
%+>`ar*S2?Ucr,"oh:A"uXbhKL_omeg:mY>DQgh5ip3$:f]?Jp^.!iAO<6H3Xq3Q01Z]Hf;V1RYgCpbi_VSi2MJ%hV;XR"ngK[E:C
%&LdaNCPt1H50?5eD/jsQ^\eqf=k^A"]G^KlP*),MqrW_Oo<'*?DC/Z1kC%TRl7@tHHU-`*5A$hYnM!j@D`5;"fP/WkTl$Rl!>W"I
%m^N$+2LoLpB]*$eASNW,omg2AU;PlNo7E;<3\.;#H<X<2*&B7Kc18F(jg6]F3\.!g(j29SAF^+]`,qleiFdk?3%i:L[o9t&3=/'t
%$4XE=Vu"jE._ndO<7@U0_iQZIV`^VNdV>Aj-OXg(6KTH/28&"Z``u#b<RYW,nZ)q3VO<.lem"_nk4\7I_)HTm><'2VM)#kR>5:7N
%7.GlQU6I<s-W0$*53keGk$?TP4S`^mO.n1T2/k:rU6NFA=VNO1/;iarn?XMa6H]NmMrI=,k5R!T[r@r#mrT>a$Soo3.*JqFs+Rpb
%Sjf'R>\D1[Pj`l5`KN`\HQVpOcD#PLAl0c;76c^iM&5cd*T-N@9)1Q>7IbuRU1jM?\P'8bB50R!ndAK.QFpJhLZ`qDiO.abi]Wf@
%E>\4M=#%l5I&lEH-F.OsH7$kj^K_pc7/uAFijX<`ccdJ5p?d<Vq28%:=k^9efJRAWf0#.&C"JYoD/%T;_QK_0d'=)3^/qhA6)H9:
%g=!#"Dd0V\YkG2N[A?l->.+BEX%)O`^!0r7Heq<QJHZ!p96R!e!1.HmFZ#>KC?0pK9/TnQO\9:S`[?'l^k\&dp2l%MJt5mu#)koU
%s%@.iS*J>/J,*utR38m7D'9EX1:<E&p1YV,p@&j2?.#ZuHi+Cm\rLoU1ps6+HH$'k4"JgHc_Xd;kL+H6nB!N9O]n^HdS+^pMuQTl
%f#tBqQ;=>[5*b9&8XYX!F,Z.p_(4OJIrXrq]Z7hlhs\*-A9Jj3=.]1BDkYSQqG"a)+OQb)q-6][1qkZ!pq<Bm^Nb]e7N'2FqOYmc
%h]hMdA*2T2Q]5%dk^q=WZ9QW0rBkoi91+dbfI`m6n5/IeN8'DeR/qkN(3Y#>@GER[(Cp?OZN(LqN5O+u"$>Cfn7$GX1GlYBWV>[0
%XlmZU/>.4Z*:hFhDu?&&=XYBfRi]<=/Y(lGDFAl7[gR6oBR-N5ErU@Rp4*,(8+J8+J*5AK0)'j^qnFrBEr2I*^YeU+8XB7g#\^dK
%]A3GbkKtO0!TocZa%16]k<#RFTK03B/GFOYHbRZdh_0`c?:CpQnPSL&ka;T5*^UgZ>4$OAPgK]l^?n@1L3h&N]:W95C&Bt3`MQtB
%pAdIg$m."b!Q2_`1Q*/6R.@so"hBk!WH<d=\a>l1:MVDr2f_N^1&C<^Lb1,fb6lq.6FNtWGsTS?E:FC[ABQ(`?'`V3UPM*?1Gu9T
%#>q32#JNj7)=\f[dF<J^;ldhG;f.TOf3[%SB(<q_&(O@U$,1\d2c6e81Nu\,32s[b<kgT]`s,g=S3YB09V^f"A^<Z72:Jl\$;NEu
%QLe?PYm8;4)qQ.`Aas33M\"X(<X)]aq:k<WR*ffQ#H>$`s$FhJ\BA-XQ*o?<?QG6bIL/<<bHgWC/A*MA04,O1A`73'GZbegQA(\*
%XhourB#00;WsXLE0?_5U*+tqf_TQ!f0=17JhrgNUg_>hW<l22i'r5dETS`,Y/+&[\/Ba4(/1o?A@2!VF=[$Z=$P)e-YR)rnC7+aN
%9mGX7nmN1f6Ho<5]D;2]^[\3aAe_<?nu=m^hS+)lF)94ch)R*[`&&R]EVUlW3HgEi9Xj0@6$d`'$f`1m:LO$*:LO##?^FPq>!@@K
%<aqN=^(opJ`V=NM,;oKO%k7?]GNF0r[at#Pr4*+?(B/K#%mLb2)/"(s7n3KHSS3;b_8EIY,,"a4O1D`+7^^t#H;GPSXl@_R0:L0n
%+rpV!F+D$Ch=$a?bSt3/l]5U11UM(eTs6_d5$^M@R^\JJ2W1Z!*\2J$k>/eNknoim2_/FUXQT[&0Cds/_a/33GR4Xg(_8ZMN9.sC
%QZ\5jbQO_Q*FjY@RY@qT7))#._[?st3l]re\r3HWb<!YKN\PIB=k5<nFc6L'A&&MTVg:C.[EQt26[i&neT+H&?5U8?A(eBL<5R;*
%cNL*8^O2J_DBB&2m^FeLo6tqqh3\D<'iI`D_t.5-C0/TGg1Oc.Qb=XK"7WY6X_ebuHETH6*pTa:5e*QFoY`[)oZU:W6bRAGT!ID\
%RH5*RD25WKd*V>L6d#]DrQdZ@aGW,dr9"J?+#>b1=jQjt6P0hnl-qN%A0o6c8%r!PBR+U+#g?f:nU$-7?[6J7mje5Lqduhb"BK4k
%Mh9-MT6NrCB6a<BV_hgJ9!r$<a_P$-SLtp6o=YW]GsZ.0%X`OfA^6?`GsPm<%sp;hqJG$DrQ>Y(Dml@dRhh;Ag3/('""Xg^LhE$=
%pk>ff6hU;)VfnB:gbP4c^"+a@\Rd\.biY5EgbP?<7_tY?GmGIXg"^emk.]gE0Fn[p=MT=0"'3TeDOJd%e%'$N[nPtNl.e3nkJZhS
%c?V`h6.3:tq[F0!Db/*%8p=nbQ("[uEHoZSmQ9KNhsEoA4JY-`#;XO&Q4&a4cnEJd^b,J*-'llt>Wu4u!M:ks6fbtBnbRGNO>356
%F;'>.p]n!H922hLM#2.Td8A)5n)pjO12+/kZg";YD8FIhmQCKOpVQ-V7sl(@NA=?"(/g()?$5c-4nrXWMk")gAf2W5d&M69j"+-d
%bI0"rn)\ioNM]$Fob7\ATP#Qa*jDr!>VfrudBAd]aaFA?bR1sHl^i"NDd#AL*hHm]B`nZ&bR-QFk@M5QZ`9<KY<qIX?RE#W#S#*E
%9=lm,anlV9Ie*f8804@tUc#tIO6'dWG%Rn-pL$bG?[AdABg9t!S/"6/8C-4^4MNCo;KUtoF5D),[t!R-O:fQ::2hAO\Rf<UN!s<3
%CVTM2]F,AnGXs.eia9bRL:bY<57^M]X>^#Ya(T6q6I=u&%#U?:d;KGNQ8-e%^6!rC_[@J!ICg-kG<;JqV6FAG">,PfJ!W#6*-l&L
%SiFt'#W+(%nq+cha2b]/i9*.qDN'3fiP<_t+1t_4`XE<[C?iKY9CqcX"q0N9]bbeRh`H:r6c`!8QWNjb.HJo;cET[)GN\2/Z-9h$
%oYQB/GE-#)Y]Pn`OJ".TKCnS.QG.A/IH)MPOI&0i33PWon$*mk_iN]dMM7:NDtja5n+Ea@ht"85Q;<l:Om1jgP%a-uHPSSQ>OVk2
%[8\iMLZ]R,KFMRBN:l),:Njp'Csba+l9t[h6*o_1BcVi_h$HU"(>)6PgNh'll.UNSM=20"IFgu:r;Je;AuS-*s,;p+GBcYJfL$'2
%pJ8p+I9!/4TQBoNh%)S?m9ee,9ROIYFalp<(1<3a$h<E8Rfp6d!#\c6Q;7ThlpCn_j3?A;)XHL?BGWFqVA\LSDSeikU4j,V^RN'R
%YA.Z=2eQ7mQo>NLe<1X9/jsiFo6JuQ5mZ@o/O-h>B5C9trHA!_+jJ)P'!d>[@sm0>b`8$!2JY$W^V;KrcLc&]8o`c@_*q:>GH5&!
%8RW*?rnE]%^3l]lgfHYQ(3hH"*0$@CgIQWnqA@0lFQ>%$Cb@N6^FQM2,F6+-LuiPY_&%S(Bg%SiRC@:M@fI8XC(k%)gP+&#K2KuO
%L;Hu<;QK&!qT9o[GL8_.UA.p+fa"^Ika+uYJeAfnV"p0c^K^H'X)58ARD)>#!nK?uU(:U*WQh;H_u@s`/K.*"#JBcRob!O7K"d&K
%+Fo,l3PPU&1$aH/N*B`;3]b1c5*fX(+8h2;kCrp6ji?kuK\7lk#D./N3hEa=5MPB@eB,K>&-iqP[20rG(I1TSaqjVMVlA?7N:.Cn
%OAepD^O$^(>_AB!'U'gQjFRt8(-2;DO,C4K50/+F'P$&'bKHC]>?Hn#-.Keg6HjYGJA[J$;tiN8[o;e\"18"5aQ#AV4hWP`arfR$
%2:N0kEs4*+*>4-*9T*s#&r8ks3mI51;sX*5N*O("Z&qJ0@hCIN.E\Cr%*&AQ7:HZU$._]N:Y27h[qDG@0q]OTir0aiVu+=Qs-GC"
%U0Z[e4W;PUr6K&TU2=MMgi.u]@uL]F/4Sa".)6A!^kr[V4rS!W2us9RM+JpU"KqK1_06;pP2O<rXT9ad\3OY93.V[9?iYorU+r89
%!3%:O1*_eR!(PuO#n.&GPOR*[e)7W`NDca(+B@@g!W8MU!tDVlc6jWhZ/st\lBMI1GH')r=CRB,WQi4bUPjhuXch(b6iDMA*?Sr8
%2hSMO`@1Ib+R)hS*[&Z&gC@qJ)@sToU(Yg<Ke+H$Nt23jYT3fC=2Xr/Z]+M*lYdF]XnB0=7_AQk6T)LGWF6PBL)6_Q/aV#0h-Uti
%<$f3eJ+ILQ=]k_486XAd(PjCZa@1`"cNUUkUHLd2#&m;3gsDo^*Xf*'JGu$)n]qLr0pl6ro>YPdf',;2L)9:'SG?MN$G/O8Rfs'Z
%+$pJ-/GHb>UGW;=n$e2<DHDOS1A%9Ud!1o,s$CW2e'G8sfB`6=Wna`U3=#,g!1(:PeB?aiN(Y:-hmq=fjogXVrAl`<"SMZ9Mh.@q
%T5$i2E.4m6p6\RpC[,na4StZ,'DB;CWJBN]!e/E$9#/e!%:^#7-)1]sMO[`7?(-(VH@6\`B"6=F`"0pCifZG#l0%jJ+FmggMflD6
%Slu/We\A>UfKW]dC;hZ`G`k&o)E!AA^dY@_,dK.sCA(8SC0#`G!WG:.=)t0IL`.PE/F+M_q=Li;<-oO6e53kA)7n3"=eX73q.ceS
%mgR+RHl]ViRD,i\l8P9?YE"W0O<-Lpcr!M^^H*3&Y5n'!g&QVXd364l'R=[\cE,@!Zdu+K2,gi,3>IpUj]&fQCR>H$YCVu6-uT3O
%b#q>Rs%p<2(QBj*j@ubWR6NN8;>[EW93:bW>1/mdn#+&ECsS;>9rgO3F\><!,Bd`S]35HVl@-d?!DMioD89"*9@$*C4m[/3>3B(u
%m^lN34jDK++iaD^2'?(N8d8N@0)N<lOJ=71=M^lSnD\J']@L&!RP/T$Cge=S00F>iBT,PRO'#4h=MP&\:l8Il[kZO42K`KIH&83A
%;(IntNc[?PcdC?4esGUp$l_iDI`N)@9r"LBYI.-?fc<@,`3F(paO)P[?S37fnJ@D18^Z-1rF3=H!a%%gZ.Gpfis7X&[0g+/7-t"U
%J718jX)ubNd2pSfbo(*#$"_-\9g]V'/dJ:$,`:<Cj>@T7bcI`Bd#N[bGXDU*s4*n2i-8WXmk._rZ8'(n/`=FE2>+E?lN&RU!@gs>
%C:gD@J4QV,-3C7[@3Y>hZ:6%-kr5)"@W0)_!)::0O/qL<9VZ#$%K^3,/<tmp>kM*qkJ!J[6Yd1b"sA.ronO$oJ@BV>TA1@rERWID
%'u0gOBlf&PoT]I\o[SrD&/Gtu[FWd\Q-4@BV^(SRob>d2A0XT*<uY=@/N7M-VMl5nL-Z1FC/t:L$@0fh]`Tf=/?\mSN-#NuV!E+G
%MF$tjOm7[N!0I?F)CVYD*`Xn)LZpuC@ZcWlRb<8H,i&c?k"Pr@5D:Rk/p*Li_EhQ<"19RfQn>^)M)Yu-<'e[4ntX7>kdN*GFUA=<
%$He*+d4-@LKQ$%jkddnG[-)hP"C>7e?$%nRn8tg5oR;_(pb0Ga=-UuHVYM<+4/&X-C70Tel,5=C\A].e$Kh&\E97k!Pa!ICf.KW4
%"s,oU1DZ"FKIkOm%K^'OZ#bgL/ictl&3?#AkoTV?:`=%TJ7p`F>Tns_(o(b,SXF0`8\CjuJ:K!Z_1M`^Z$)W?D!/\a77qm0V*`uX
%':.#7SQ`'+.7"bb<3$V$l]FGP/::)J)r2Z^G/SFV_tUb]E"pB%gE)&45X?eiNrUAjVM</WO`AlMh-Mm8_.+YFC?CVk(^.>+W8(ka
%Co>\__*bQrI2/<qe5:4RhglcddS@iii$K$S!*Sn+D\Nj04?&FY!1'c>70PR^)[km[Y`4ql!2[.iJ/W-R+N,40cffUW-\aOY,tqVs
%L3LaN!([q\7MT:pVb]$5]O[$72;#Z,,49Z3iumm36VSpJ*mCkVQ_-1k+P`%e+>B%%:&okMU7uf'>'j6&3XCR!Uh&"V-B<p*NN1jb
%]E"s;CnrC-#_[Bm@i4=))/2)crA]nEd0=FU_5(WT*Y?g2AP2/Wcida_&i!'#"MLhiaGtqT!rl7Zb[1IGiZK(!0Kd<bj,%Q6aV&7f
%O\JQ9)%22ebHsd/$M\*<VVQ9j=oLFt<+2G?]/rlU!Dj;;pN3*@%$lEP9ss#4*#@HX"H^CH:_ke5,X\dg4HMBsJ.WVVh3;ABJ-?SC
%dsI)^76#:g'*d#/``N>OBS$J\##mL?_16n=V?<p#hQ@dGi(WDMhpcp[@U;sWmN`"J",X"+`Wb1nnX9YU],D1l&@E,]d*>6G!7NG9
%V+9'Z02cLZZ$mOg@oeT_7+2D"])@eoPPchHFTK(V%"&a[8V[?4,c5c1D69\Pb/Im>R(n5$[Q?p4+<YVdm4"ef=ZE"D7Im5@*!#?V
%eV[sRPGeYYZlVnogL,F>4[tGj!%*c4rI8r6mZcJ*jpcj/6ZG7>NWH8A8c_B^>4.NQ#`[iG",Mjn;a>oORli4&/ue7ICCI#d.8R6/
%#bjD;r<T.GT+L>hLi0t[`!u\1YcXj&P.lK%VM$I3`U%ni0*nZ5DjMhC('_'b9j>1uY7/7ImC"`S6Q#rpRVJ'kFN>1f)/9Zbf9shB
%lNA=$4U89H9-;>KJfNor3JJ-;KB#kA('k-/ODttE!"_iPo_'QX6mLYo<4V[C@asO*)SN_Q,KB+6#'_gc6/[/jTlsTt5!F]I>9P+E
%Y>'q8@CiN5VEpWc%%CPI5^.U7-]8XU2k(HuNr\-5,h*1A%G5O]*=s1!)]g@RfQTiKqU?p)5s.FHRP)U9c<a%Js%@.i27'<J#=Tf6
%G'aO2R]JiF7C!GVM_2uH>(H^d:Mj17SX_tR8\##Q.gIS-@!L0/m6(nshmhgc<N%QHL:_`!mE:tf/A6,X2Oo)q:N*!`Z#uZ_?54te
%'6"WjYd4,(*P.f;:)"mL87f,);#s9d6+=\3qu-M95F+N.^A/i\%X;RJng#!sW9`SpZ;<\kc11<3^Yc\6r#<Mpp!N3h;(neZcC]ST
%0-C&`bf4Y*oBY!]^H_Lrq#+Ed.t3!+F9N'l'm&W_?d:kiNLr9fYHf_SY\(bU`J".eCP!)_=5[X9HCR+GNq%ubl4?3C\paA_Je+??
%k\L%.S3;R5j619AO2_^hf1QNWHn=a'Y@[>`&\[0ci'UlU%_e9ck!,m(;fEh-/V7\s2^=/rn7;toX]usO2_K@EC&7sT:T*i&E<gq]
%9,3`5FgqfCKNWCSPL@ZNq"4i?%B&(o4p1;,$=71NP,jpCoG(jL")F+=Q334?<F>HL8WQcISh:bGQ->iJ:IP!5i>/'@$0Mu@cgH*+
%S_W3)]`TqPdb=,Q;VaH<=3g[?/#!rV-P(r%*!dikrH1lWo&lOKp9`#Uhm1kKIVj2XbTf\?eSA&;r:%e(rScg4]lal149=9s)e(X7
%iD%j3iE"tN2c<`/9L,0!'hIZ;)et&^62N)rFn=r7Zo<(.]WqoJFSQ-DA?VO-b=H<0=,"O?s*PDeO-:*8f88h9iC5T9ZRVU_"X:A#
%f8t%"fM?E&pKP\[BB_S4fWAs3I6Qjd8tqha0;6%pOXUoB2B&3EQ;Qs\p+k;o8NJBZVY'hNh,*r1`u]XMQK:q(Qar4Q[=7r'YFW\t
%R6Pf?1M)J:mF0lZ@Jd!odVBSB08nV35):UjpJ=UL<\qjmh2@?6c<3"MaK6i`AmddbnSIs\10n@tqh_Y7eLKM?7jo78>s0Xi8p1jV
%QY[^#q.*E/0?Nc[\&p)BEg@.l@P:PT<j#36gc6TVkkj\>A=BP?-Wi/E3_F7T'%(Z/7B)$6GpR`bIPAiFMke%K0`U^I#2-51't@3B
%9',-OmoSo[+M;=/mlrr%_3M0*$k$sdXS@DapRhGeh:NJUG0F4l@VKc="b'\#"H4c#9=bKi6V#s?/IF.bTof.1r$r^>]Dg>tjhedP
%KhD>e)//Q[rhTn.?uqYpp'2(s:]=b5@/.4ViXp\(C*i-%^4!]fLS*$;r^\IXo^C<%I6Z3'?hrBXXSM\BhO:)*hai39A+.o#D6L\M
%AbOC@7utr@Ik2h7pigZSYPrbah*C2]hmemK#7%/nrkmLhRfB>2LA]0L/]F?.>(-"?2p=./-NAAP5?[G;qm2W[<W?43TCD$nof)oi
%@4:?cDb+%2<@OX=$e]U;J&C(!pi$$O/,jm*47.NFgTSM/T'pT.s6E\Vg&G@m\,E/Xl[lllhc]PP.gJ(a*<]UG`WgMDDs]`9qMi\>
%Z2_.XpZ_-`F!iL;XP.#am3L"Z2Nk*[.tRQqbt9C,aK1',lgH@J\Jei6g%,uHAjuXM4^EnNC^*r"]C"dHK2$K,jiDiE>Y3JL$S.Xs
%1LVU,P&7A_Skgt?/h?,%b'!<U]lMT6/Zq2i@%c[NF(OI8i."r[[D:;BGa;R]Dnl@Te]u?1-QgUMBmQ7-dcsH@>[-"q%dU/]]l^_%
%/k@@j/H68e'fYp7C:'g\=81S3e^^G\O2k8^iq.9aUqgMAF*EWBebo$(YZgtW&$J0u"ufUj@\&ca26WIL>-6.TrSYsb^bi+ZlVr;?
%]90%oX]uoJf/C*:[C+BIEIEh'T7*etrgVJBm.p$imGP)+?V;j7k1U-6#d9eSm_lO!mI'u-?"E\Sm<RkQ^S^G%5-7i2cg#;*pMPJ_
%dlWSkqr@X'0[9I6rC(TeeDGX[B.qd.]$sB+f(UdT%b?h;[BP*b^T+K0TBum8$Zb<ArF)OH^])r'I'-O7FD:^6m6/5@WKpa-re`1A
%Cc3bE)j-+\B1%b^iZ#LTp1`PX:B\Hi)opCofuEi9UV0O[f\YM1]K.Z^W/N?Fe26]0UTN<?2YuCjh<%3$0"`(QG4%;CgR#unr$q]Y
%R639Yc0T#8ZC-2+38D0q".d]gIf4Z#.QrGC>Ij+TB!62r#d*(J_7i,FWQ+?.;G>dRm!hEMJTN5f+#jK`1/Md'2?M4NC,o*NmGn>n
%,U3J=ag78jAl:,aG>b,^:sS/4JqpPc8FZCQkm$aA7O<;/R^rm@)ud1:ISb^H"@&AQEGJkU$uJEkSlW=r(Zf`(n3gr+Sa^FKf%#MK
%DESijlP>:*T=5a8bL9M<G^Bc$K=.$W(H(&9nWT5989njJTo3ca)7hoE2ack&G<PS<*fYi!/(ZPDAioLjRb[$\fo,72Yjo)kmUl+Y
%bAqfLqr&jIDjTAWoQI:b\-oLIMiD\#r?)f?GJf8Vio9P^I+GA;iEPi?&&1?dSVJ/Hl[$'JHXn=ojO8BBg*eg'8+d@^-?=8K\;T/)
%p=:GQg!**aH.m0(XISj.45oMkdS@0T.dj,/-a,Uu]01W+n`KId#Df.bo9k([0nDT!O5Y"X)pG"SAsh%RI[.IG.<eJMMAM[=R$_1*
%#'+)iQG!RlYks,^S^"1Y3I>8W**ZlN#2;>`hfA%TH@k2N2acAOO`#2PWRhCCIOfH_<O@A%IHFQhq4LW!o9'Z4k>UC;%A/uNVu02(
%m>1e`eY9q'h'E0#&U&K"OKcJID[<6OTbZO8CTSst%r5IEbHH'-:h-OR`pVn&nMle;(N4ILK46iGA&Q^\/Qpf]8fgT%pAID%,^0Sn
%n[e3:Q(!9$oGN#.OLLeb8WEs))<g%>?dJ0%gB4T%=%m*smT-!e3PW4bm[]kiU1^I$&:HZs?UXRnUQ='mjUi<h['P-2\T-A\?)?k6
%Z$1$oBRY&AHZr,4\D#c`XS@AB3]u8Id-@0-]st7rC#Wo@9d;9dN\bZDg$H_:b"F?n\NAW+pJg9mNsVnFHUk%GI4nq\BD9p>F)^TS
%qY7cH5(#og+)Fr/q\O"\]`3/eG.-9g(&<LLj"p:7?R`Z.>b#YB&)JARTa2W[oZkHb31O_'*aG'cLR4Q:r_UjU.u._,N?.Ck*q('p
%A:F-K&6SZK<EbAW_Z0J\8FYo.Sk)p(C5KRV>rD/WWRd9&H]=(sm&Jr8Sokl+q3jEP9m4a$#Y^G>>\rr0"ID2@'mdRB<4-gqX/t.O
%.uJ_"d8`pp,8'&!Y+AHNn)oDscGkF,:.D^El'l=8,->dk*\s4/+5KV<V]O#dBT8KTl*Ao(p?r4[O2Z)1of*o'JC>LQXI%7o5=7a.
%KSc7r:6`EE34Z5j%o-;4c!#;&G]o0C"G7fLS#:9Vq[knJ:P4)`iq,K?%@n8lop=/(X`eY!\:!S5m6A>ASq1u1#)oJ:b6=X&6Z2p`
%K/X"t$CcmS>lFB\j#kEZDpJsdAEpgPUN>T?agh?p,hM;t#q>gpE@7nq>dX3rQ-76o-@Vr,1>M!?8q6a/1Yp^-F*2U_T07SikMLTh
%]ds+U[=8q9(b8[SZ+rDfk,K>_K%GRE4EGqlJ&p6Nd@J2@f#>mJ@7T(^.3.e]QO9p__+rCmnf0,KMhcYur,1Gu=R/s[2d>CueXPXK
%g$[*piTTRH/B/X<ip/dTHX8or^TDCL5OO-FJcM[Y9@Tt#GE:/EPrl<uOM7&V?9[d16\5#\X`7Zr#edF`&'E'il/C`\Ma$u;^&#6C
%cQ,1b[s*hP<]ZUp@]S=eV_c'\qG__l*BXT$bPp\S])ML&>j<<Apg53a@%*GW`GXr%k,OMi0oA^$<D]OBf1Z-Roi7?fDVcQr2sIef
%J<f$7p[um[:rr@f;f/u5rqb+pX)$D:Z[-k<H`'%KjU5ffS%gGlYOhS<D<3Z_1:Km-jlf/%(/.XZFP3RtEL'TTdWY#QE`H_q9'c1"
%W!TA\W9*aqP?KaW^TR,TTB5A"h0m&lW#kIdT&[/bbJM8'XjK$(FoJB]YNL+5\+O@N1j.b;(tYs/G+\F#71KO!+&]hCr?sd`=s';=
%G/"XDBN?%\8j[E;5<<P#07=RP54i![[;t.cBH?IT>-1jYF5#IZ`&?B7:%l,'hI6,;D)p$#:/CXHUL$"6lYt)0C+!A5Hg_dps!a>t
%1\uPCIbnYd(":K!2"N-dEbiC+aiE5qH8YEr%\+0MLs/mca/(qaHNI!rB![Ql3"4:1G7H?dX?XUe5-JMRlnb^VW[n\d#[?Mlm>>XR
%W[O$=Ml,>lLDpXC@.S,-bI[CnVC]29H(W%ZS"t8l-`uB3X3h:r6O*a_ZM"Y=k/>Lff/g(69pS&LY&uUoC21Ih?1V4>.=>F'#B0Y2
%qYmR3D'(l-#2#ubI?=Ipe;m-$Os.4@0B,KlJ8+@+jUpBE(C^dZ]==JKi1EKrf4fi>7bah@FEds@!tSR6osRY7j*j0aoX90U@XEV`
%5fqV6i':kuVka*Kl>*E0hbSKk?0ua&3^+bNlb^]DJ-BT?$9AgX%#/E'joZ=aK2ijjB0gjqf5EV+ZVViUA=c=>(qFJJSLM/^KIIeH
%gUkp,\%;:2#EE:Gd3mKh$*8R=bJPgV=lH/l96.--'hpqjXYP/*!ht?jp1_rEd+;$(Nn7R;`_?b3)Tu)PmGMLG\i*!T&9djD3]mK"
%mTER'R]sF*AEYCH`Z2UTF/*T:l_`(X'Hf"&L>S\fk%#(@Mb"`QMX,6"R,.9u>Bcu>fgp7*h-&g,hO_Sa%[.f.-/1$S;M3N182JZ-
%imVOZM8`?ddYsX=H90>Ib)Jq*VLX``:-#qbdkS_QT]i@<X]Y&$8o7RHHLVd%WQ-3*c\i%i!@AD@Th$9ui5B=h_-]d0mh;*;J;&FY
%R.-'^mTi2\kCinDMNMp5C0-r!5%+<)>>h>4pk[u*POV.@3^<Zul8,6RA2\=a*?(af=a7S3;)3SsdPkJ7nZS!aJF3N+r20SVgus.%
%GU:M0;,Va$oquC3hB=T+dYsLfadBZ-5(r-!_a2O]h66=W843\.?a>RB$=L&DeL0bjHG<0^oVmGi`#:Do;rr3[K>+SA5%&QLFaVi1
%4sV\>$3.Zo`?e2'!0jm@9eAKIq%i)M&W@l'1J']!H!o>@9LO!<!)2+a*2Km\>Mm*jYCE9Ja_=8q4l)bfM*3!."T]CUd`%ZSiA'S>
%1&:=[[%"Be<XT,MC65_7c@H!$D];?BO*M:<Nk-rf?uNRXTUO/VA4sJ+rm8qVVPF=i8.=kYs.+KR5Wmrjp*+(CD[5Uhcp5%qnA.W%
%dH:Z7:9K;5LW:ePP]1^LDpLC#9"mrGa`UgB/A&@'Bs:J/UCL2,d'euj:YZNu%PKc46@3qRRrS+Mqip!J$n%+[j&UT;f(P_Jr7ceI
%PcdKeCXUI!>$B`F\iDr6(CkY1c^X)fB"om0dbK+iSJ?fXL?U008o:&#4,UdB[Z:'i45H\")7K^F3K!"t-@n5F-#4l0\YD;R/#;h9
%K<c,HCt=@'b#KLuKX-bDhj#:EHcjB%;KrUg-X'!B$Wu2bLCU-1IRXq#mZJ[:br[V=;IrTr,=bt%@o`?ulKL<+9LWj>cUu+B^)ZMt
%1+u/0h+0&lCp3RhJ`B?;9S;PoGmF=DWP700E.db2\!jDm;K_etF]%4J6Rf@Pc_J1kbr\$!=EHLp>'i-BVi=K^8a9*+UE=9.6?ont
%(NHWZqI#cE7j(c+Qc6!jW\1s'pCcfi7OWPer=4$AD_`cD^NFLB\lt/]bA%-.dR386Y)]DlR2o9cosOO"rUmO\Cp"jtL<\(d5ERI4
%HpRsf8+G%hgf9^#[kC7.G'UD/g-:YeaK=WRh6g1nbM#=LQ.,.QTU`Zoa`fjGg!s"_.UY#Y^)mW!CWWHDDdaV,EpH5pm,%#5H93Ij
%%9=eP,cr-/.H<:mG?]@Hj[uR,B\\763^Dppg002HH'7TkX#;6R6*_)e_No`/<cSWGZ?i\?W-]I$J*>:5dn&uF.iJSBJ8(D!8le2a
%63ioAldO]rq@(9>[aX\i2"#q<!XZSR63db[D,**mm99\KmI/"E*uD,:S+_`UGaD!a9EUrNVtLa0S0bCjrG)\8$)gSj-^?VYDRcAm
%8<;1h3Dia>6:uC`lnbcDRqkTpFE82?YM\4_/lTm);D%+)8"VHH27Ri_4;?[,5p)rGA,;/oh'RjQ`+;F6\9gm5+4<osg01[k;Um?7
%d.#t!QEMfn1L[Z[ffDc2k-iPj9!E>jWC(?Y<<.nAY7nGR*T!fg(o7<`WZK-;]p2"U[+?BhDLf52,mZ<p9g9Mq!&Wmp"a@&sO-TAV
%pV(jM0U_)K*m)7Tqd)_m1:";.8fFtd6%6A$9/Dng",kK6^"Z&!K%SGG3mAZmhG.3!2g_5nr&k^lSja:9?La-cY.a8^Q+/7eorhk/
%-Etl(VWuTP,9=oq160!K4a8ZBYplJ!:f*4'G-s4.Ei[#UXe+t'naaqI6@S"`#5O?FC#6E*?TCl:[nEu'Cl($VZP8cR;*;%8J?_+j
%.EU@4A(5f:-j=hm+BO-bUcF/k(=%]SVjG^4o?DML&KeR1_=9U7N2V@I^oL_bU_Qa%9&[rtA:#NeamD!T<S;ZdCaD;lPub3D^,6PB
%qY_<Lj(um[TTe4j0"B+p=FNkI=6l?KgVjBdL]JO]%3@mMfZjVH3u);R.>%r<Iibd8^Vhh>MRcnR>27am5CO(j&Jn]O!H%+eoZ>lQ
%JL/%63A(M>!?4;'1nUA"bglT^A&8g^J73;q'Q8l,rE-YdptW+;FhNLrkLci^68p\iFX2K_F`NTmEn:mgjL_NrIO"ZMH>b3%phK9!
%\"@q]7XBnXIn`_*MWk++oBo%-bPDV?eK%keHauf[5b0'"_p]qeE>K!'hM#:tlfr)M$YK?->aeHc3Mj\?\T`N_JNg?nJQ.S,:0InX
%>ANhdC4"jtPGe_RL'FbriLX<.0;WX6G<V>P1<H(Ll=>#b1Z3iRBR;*E/lR^9F6Tei"bBdkkqnjK=WiBl#=?l>o.Vj&[=#Rk>CM_L
%]H"R2\2lGR>QgQ$@u?"obK@IC$E+DpL@E(/_!V;(EY^elCT7$7LT(Br6U\QO*`Cgf9ju6(efe6]>"_]A7.Vp)CI]-`cbq>h#ahEM
%^#k#+b4TA`+YMQ"GB7OFJ%s3d!DYW'gg(r\otmQb[^X<&JOM%)7518''odqZ7T5@M`#*='YQa!95ER+kDQ^062BZqXM8skoLhscf
%.(gOF)*oot!DYG.?3jh1$pkO5CC!%cY"1f+EY'/C6lSB2G-WI%a)E\edT1/ai.TCWBKSC-\;IM1=QX3I-6F3?_*_[j;Ai+`@5k+i
%Pc1<B/J5bu?RGM(Tg;XJ!Xb$1,gGJcdg8_SHi=I_`,$S&,GH?PL9kN%_+X)-@KAk"j1:k=6&T%`4sP@T35TM7`:2T5FDrI0,[rj[
%.-3[>\a8F?faBp?bPfs>$rQ!_4*,_lb*E9k^"k'>Ss_G^S!?0')KVIk]ES7VkhEP1=u^b_"#qg,`0![8m/pX5[;la'=X`PTbd50%
%:))f5H6FcGA!:h7ijp.(V(1WDF!_p@5&jD^j,^`E63,L$?Ef<IZaJP9f/1_:dHtQ(3$#Ra.OV:Kqsf6<a_"IG89[i_]?9BPIr-<R
%Zf8.Nm1WQ?l_[A^j<;K<#Ml'Z,[%,rg/e((PtS[n-su/$_AsF?@@OV-;r#&U,SVp!en#\@Ar]QkIO"3Nh]8FF2_+*ioT-mpP^%`+
%ih?="+JUdH,]bI'JsTt:-fK6jprALYR)UGNd[$F0a'm]V^]Eo9**@nL<r9D5;A+.'Xi<HbK+g-P,p(Q4d+E_/`VXt1LSE(tVKcIn
%mpHP5dQ+Qh,(k,6Q^GH<75N2*7a(8@D19#eFn2W(-)F<Y-,C4WIYKpHhB^Nf;%?4Pe=7cMX9@Yi,-C#D8+MtUhlJaf4h0)rQ/flq
%#%HSm]g&T>gIubac59e99Om)8Y#.pX?!RN"Cf4'ZT2ItZb4GAdEJMsO$`(4/8&j[t4&^=j:Cb4KX)3=GipOqj0K'cYd4aULgf^TY
%N*)GdX']l/0`DP<Oq^iSV6ZBmoH2WtQ_!1DR\l]ff^502SX7&Y!,nH8'=%=8fY1b:4NsUZ>8gmL6_H3PTgZF>+2uPI<e(P,r?RAS
%/D,Y&QcheU\FPd89CJA*d>^AF1Z%N,SYuEOT@8rN`Jl@]@-=`@B#HetD?UVWm'a*]"&iFh3B6oN4Z/U]8>_US"$K0@)<B$-bLUDT
%h<r%!l`jL?)*BC8F/R-\r)'$n5-upj5$VA-DNWj[([aJ34'Ua^]1+9N2"-!S>_Nj1eBL]kIBS>kl.c(KU&`6Ij2[^7,83$uefjc`
%RFCe@$8.*XCc-1%qiAj_6IX*-3@V5,PQ\+=-#H1j@c;t)O^"%6d6+G6it>e;5#%5:_TJjgofcZ@WKdmfps=@7F)Q2!%A8G<:,\s&
%PG<+mM/N'P$O6mUV:@R'FD[4@!7p-JQL3+o/ZJ%1XDm>Sq0I.pf'?`Vgcm<<.Q\Ms#?M028.j2qZK%tOSSPKNIqJqI$9<TIB4W_Y
%<)OGeb-i#<AY]6_9^j4_UKuMXAV]gW9_[KuEEru9Vr+=G%t=AJ,9(I6EJe,@/pu\n1Q*gVHe"qj\HNmDQ`l#<YWA\6:8M6NNu'^=
%bf7p3C.gI[RmCe<p8h68Um3&57.mLWS9D*Ej40>km:c63k76$YPhHnc7j^b10\F34H\!Ct*:&4_Uj322nfY3pg`!Hq*>#42^aROl
%"m,O<W2cAY("m,B=6lN@a0l$t]I7[!'f'^.)m=dY$#t4@e%QI*Y(Y394I!U5r/t)9m?CTd[b>c\cU'`'`9do_Tp=-Ll8j(4fZUTZ
%]5s"U76C^S%G"Fb>-4%IHi?.#54ArtaO+rnCp+::?o!skr:iGW,aN97pig*_EXN7F+tTUI!9*QB;@n%:M>0'MAltAWY!o:j6fluo
%QZaE3,6S.&R6Z5q6B%.)>jeK8NoJ.j'fK6)OkL9d`F!NRfL^jX@6VU25[*`^7sgF!.=N8uMfsVe0f#aVeb"3uec\b2/<YH^$i._`
%Feg-GItM8b.[olhZsb1"9)$B*Mps?EK]Ue=C?l<O)mL,cTnPiV\+5/LX^5ul8BN%AL&E%Rpp+lIN@ctFDNT3f`Wbje=aTsP=o/j#
%Ll,L#*KUo,2n+R%UV2;?!mFe0RXQfS*Za^+I"o#>!n9fB*Q^J,mPn'.(Gbttj(Tc0ZlZtXYrAe&B`I_P$/;%\NC:@FOCQm"i1,fl
%&ncF1oAOD6aK.Qkm[kk2QNs6D>cmeI4j#iW9=QApML-!.2jsS]K5g-%Hus^YY6/iDHNqp@[pWK!7?;HXf`E'no>;O@1tSgurC"$B
%WDP\]oi<us"&UbsnToM>Vc^0Q`ih2OVrKoJe1S_8D3kX-q0&u>fJiQ5+83-Qp#jkcEctW'SErHJgn<#5<rkIHIl_h/2Qb=Zp8o0,
%\mj+Lnc>4rIT.4D=/1U=o4TLk)662)kE..MW<."TYhVE[6QOuPL(t1J3,3!c2_\_)D'&*32i9j.%\qJ+b0G>"j&<XGNqOJ?4rUHV
%VL'7b58j2YQFORfaX"$KrO7HINL/"`Q9.UT6ib^&SLAEu^#7Uj)$GrCL:"Bmi\RRP9.c>gN(]C5P3>H2U-:O@YaRSf6^apm50V:K
%1"/Cd2W"8_ca7U[.,/?#/o7%-eO1=/(Y-"n@=#%6'&q#+2N_>s?Rd`*_s5<Wc3&oTn9-p+N/_/<YaRUIZqn+o1OGO1f8Ie_V&u2P
%0a_=?mI<A-q<m`qQ[@'G.;(;&4qfWQ=;j/bBYh"LRMDGsqi`r]j?W\kgtj[;M;A.H:l9-ma_("n@&D=N[(Y(V`7<Ga/_jW6Ks;:A
%[R3+`_3M0'0NI4*a;ib(mg&E2>LI1dIT$DkAV+ep_]c4.F<M.RQs4@P:c_`R7)SAg.tI3Fb!>hC4ABls$11-36bL.d*oUMD5SX>N
%d#U?,<D&\Oq/(4O<"M/mZk'=#(_5);I%^!IKNjHqCWbmQ4>n5jaO^fMj6M4I"uC"/]Sh\[5>IcN.'%>;5T^uJU6N\J+BFniE9[`i
%(ct%*TeIS.B`P1Ta^AX"UhArn-(0;[HqOE07Y%f-hP9XMl3&B*Pne*=nrMmRkVJhE`OiO6EZ/+eTa[S7?:(BW4g5Zfl+ErCPu__U
%AUX`s[dQ>\-!R(&$9S^+1LQ$l:d\ib*]WGmesV;29eO/Plsu?0,&Q`<SA'AG(#u>0Ql.-&/u.f\L+C#U*Q=XHe+d8<h8JuD,G9:Z
%0XH&;T%U[V2JmLs)32a]h*Mk^1#sAmpYk6?*\M\h_+HN:PcmC^\,BG6I30ED$<B6Fl_\ncU)UcB>].6R73u0Kl7&W^5R-[^?gZ[d
%!(p'$O_CLZS)iAH8`m/L'$_J6C.0goB5<0Cm981HINu4L'Wsg4QFLgN+!3^:MpK1E,jpnc\=k:/qW4$,N7\b/b`lt9YYDGd?[B1Z
%.2S-0"]DZ#R7ZJ#3kOS2^+g1AhX*ta-QBZuasj`lD!=#mH&ka:l,RNsD:ee!8-+AqKhUWbl)E_roqu<*8Xb-N(_477'e6)f2oA7b
%SN)C5Hna60mtE>T2_\e0W!U.H`B!_P)Ae3`(sM?B/%Z-ZD(b.$c;cE0`DqiE(AVj0N^sDI_$3p%7$LGamcDmO01eClcF'0/.\bPO
%G5k\Mh6p(Dd_0gpr:i623IZ5=^q'No>!#It6[bFi3:m;dK"*SB$F`J8Q0RMj#,&nIP$ZU;TU,sqeNN.D?U;[9fueFq!#"h&lYYb5
%?Y+uN403Q$=\W:6Z_!A)`spnOCcp;&9%A.mTi-Z:YRcu'\Z=mnJ712?Ms&(>I\cS(3-u''*>*gUJB`2H^[`;V4Q22QIetsnH/$'h
%F\QP1;G9GL"1fS'(_AWQTQcLsB/Y;F)q!&CFJRrMn_)_9&I,%^$f.rde(o_#khT21p=pgBX+HB1(pjl&+P'Lk&AU_#GX9QL85J(.
%Xej4;m0]q:+'NN`Pmth22dF"FgiM"Y?K@mVCUamRM`9Q@.N?0/LXh'?cn`lJnN_IE&VmeB.CZWP<dC[XE&`$JL4Vl7p^]&Q9&B_1
%T03nB%_CjY+O76hLjpXm47q`tG"#\pea?,8h@oZPrZmu]rD/pIcrTs@@Fi;4<-8uTW@\mB^hjGs\C*+5>HY<Fqn>2hp`4KM*]rK)
%@A;F+B^jY!olH/2-P!*t4!+/+f6-j=Yje=G+4MscU=8<#Vit9LQ^6U2*:pF?e;&K#f-eGd>j7=L$Qs+))t`7GkV+,]gSj#e]#cG9
%>p"fM"4.m)jpcjufFKZf$[mXlIZ/a:q>S])riZjaOm%m6Pl;-,*;kL4PD2;pKRQ@h"Td#K*<)r"*56*9+P3V!"8kB9nb>gC[EM+8
%?t@'F0Irih3p,BN=\4PX4==".3EN6uNPo?]GKr(_kZ2F$JCb7M*<*H+=B<dmIqN28q&>G1fgo*)`;q6p;+m]gBlojW7^pYFP-Kha
%E&"SaBIjeX^^LcG;3"$^:8V39Y#\,O8;n\N<dTMIXjdW_7oJCm@"lGtP,-Wf,Y+VIO"e/1)IYak>JD7W7l]T9=HA+I'dA5Pd]H=M
%)3,M@P7V/INh`(3$cOk:<miHe,W5u1mGUGc_T%-(;Y-%ufN7&V;)&i]!J-&G;+u$d*7[I%la5@RFG=k`(rA4c(r5t^(Gu2>U+tS!
%&2cj@@\0K$iUUN>7j^icLnZ<0RV6HgXV,#d9RqZeE59iBU*-sHAMkWii,dF/JHc7UM-t.G32ake%B#IBcl(+p@gHF8NNJ[!,,tKa
%E[f0D?n>fD'1+7eZ7OhS$>bA3@P"<G/Ab$m7lSg0Tj#;1;6V`h3.[!D*(ps`C-f4c!a-4^$;;3[0i=g'Ea#Cjm7)G:c;6D#_jHIM
%83r&N*,A\]&6K38\s4#'4c(=*AVZag3nUQB0`i/DqIpHF<\/2efsN<1#uO$LE2)CpPQfKG&*Gd[LuG_("ZjQSBFNo_IhEWaJALD'
%-NH#8=lu\aQ=kc0((cU]Ls.P.h*b2[Ba)#dKUD,$L?!jP&nDeI8/%^E%jWmp!fR3Xa>5Ps32_V)f4hW/kR;+!0oYR7\`A=<&S15N
%_8J*V=JaKhnpH+WTcFca82Mg<</ZYMU_0[rQB6.@@tF<YN6>j9/Vjs'-"AK%JOTB*N+Z[I/>pTY#J8MmRkpLm^bDXL-$"s/rb$g4
%n?IcLNEQ`M%2=@#5gU?]FE!/RnI^eDJ0g.o5\#A/'j*K5M]`Z>"'2045T\P`X:^@/Gn?hr0Tb43W.g/KE(Aud;%!n<;QqC-CZ%lO
%,JZh]@m5GE1h=E.@6i^P%$2I;Lb]qi\2KF++esf3"Y`.0?@X+GA9&SSSAe%(W"4n!X=tJ5fP_(t>$uo36K%t!'9sFN0*8QgUl>BE
%<WgPA*\8FIQgI8p!nM"lY`+BBU-'Jg#(47^"2#q27?+$L;,E?ceA-\j"gs.KK-pe1$VP._b+t.)`Y,^NC^cBC6pVTH>+e`G%=HCf
%(B\'<&]>?7"OW&-gBh^TBFuN.6pN.T.\RUndN:%t$FC(n?GQM.U&3$l`Y^@"<hi)r%S4&3UbL!pU&`BpK49HsKRr%`rrAnrU;b0G
%S=gXn7=kNl_TEJp"i<DtJdXjh62j6RK@'joOMbN/)ImfHC4rVf#nE&7*[:]6ZdgIE12[4%ie%\;Oi=9A*"1g6"?4*s`A#gb%%Lb!
%E=`IrpVDHE3N<\"E#aY$ai)!;:lEP*&VEQp)P)Yug^2^81aXef'Ns:U"";$j"f,s392m/;[7#9k@PTeX&jXqpJ,uaf@N]4!_?dG5
%g^#0bKm^bc&#^u\UEBR]+:XHaWH)0u,!e]ONDKp!*e8g8J7M8S;4/iP;iCbu_]!D!4)C.<+lK#0_\U('J-lN#KU@EsJ?YdD@(ae$
%khA!O5ZD8:o>D-L%2Iu1ODm!H]`]=][W!ILeJu.Z9B'(lBa&14,c_+6,AMepNg'cf;$84%%,r6-UgF*1O@"[_%4L@V+9Y'C!umq4
%KJj1Ud9(UCEFtk_6WYH#cp.U)ZSK<`"q6?o=>p8g!MuJ_!b!+s6kKtJ20-L!&>`kSW),2Qg)V%[SI"42ciV^RKBCH+PLX%i*R?Mm
%"U1,ck+Po8OZ9-^5Uo2b+YR'4"NuS2#@*ZF=ulm*-*dSA!13oj6uo")P6VuZ(23O2(0[Bt7RTZGJr*P'@T+2h-Zb@`Jr%lBCCrN+
%JQr9H0Muju5V[UsdF*%V=BX,t`h6R(lQ@D;$o1Er-Z?4$GRt:<]M]4Y(KmsfL]J(rZ9^fNZntHG,`;[:C>!Q6?\hRb7*974K11Xi
%"g!aC-JgN4HkZh&Jfk*^_tEVO#_L#S5"6GM9JbP2br-7@QkKQ[&e;k#U<q'b]-oDbC^g#rTIn:lZ=QFufIVVD&4'Ea7:^Yk#RDYZ
%BM*M3QEeL:A.<;\LitHi3G<5bVhd*1Fa+s/-BQR]clPFfTY\DnOdh!_`l5/(@\OVgULYXZp>Qtq@QOk[EB?!B/^e;]/-D.U2-=%B
%1]fPU6s<^D(*V:3\S5cpIh?rlKnp(,/&<plCr&RX^&[mENH*U,#[f?;-&o"T-p^?1Hcq^U$k55/U)4SX*-X]$%>u,VgrP-C)-\9r
%q-[00o`58e4H(),It2f"$\Olr:u!H06NZJoTdp=53mU9j`+8oTNPY`S&0^8h!>l-WJ>!,knYe&i+U+%%.8/Vg6l@KZ!SOQNU0oG_
%#=ouF!;8gF,#F5+g`]3J:'$Y#00p5d-+!dj3+ZVBV&8DJ!4sOH0m]-?G1.Qk;h!X9d)?OPMTDn'F!tec/W=)9$@E=s&1k1cWCc#U
%U]CW3&I2Qo:co!E(6MCc$#e5D9mDR8aJk#(N$r<n%4E[L3+NnqBGB;hCWXD_![_*,r;riZ#DF0f<(KW3_%km50q"=QBN6?5lH!1E
%'I@@i,s[GUKFUBULb9@)3Kes`!]6+:&blGF1u]d8B1*U`)F/:ej=6pd2HHQgZTL.$!lJ,;"0g[=2mAGhJu&hVBOO_n"+1;+iCK!f
%/?9;KJ_;?#fi^nPV@Y<I#/`+8*2')iF:3%E^_23%m1</O'RL[T>69e;"O\(tObrT^#*V;#,"&nr5!&tD?/VB$Oi8afU)N5$n<?M5
%#RCDFSd0^4OpQP*$.9<B-H.6D"_'ILK`r,$7/J)QH%s->NJ/=4W=^YMTbK7:XEn;S3bD23Rq`);6NRHoRtS<UC4rJ/h'h7c.lV4e
%nb>g/K)A*f5nXQQ#HUgBZ4$hb(?,h."bOQgNB+S4K>A^`d%pN!DP[O[#n%l1I2*$SLs+>aQB=20`Z3e?C]YQn^5D2?\s41A*f?X8
%n.%_>J:)<T++h<SFrGoji1Rc=8-#[l-3@M>KB77n4Q]*B5Z8=U#73he*,mqiMZYE.'m^GuM4Y%d+e6'Q7irXW.cL@G]"ne<#.$f0
%BUC3#@1[%H^1"M5goW?gs38)E(u=J90I,<SE]4QZ14r-7WZ]39"%Z=l'KX_LUKbDSq>2`QLmkQ4a`)#iMIJ\:<,6LmF*&W\,@E)c
%Ah`I5ZB=Ei.gGKDZ@EAc=<8h]GXde'bIEV`RWGmRD3c#KdEiqCF=T5cj;N5Y\uG_5ZjJ(Z+K:+8KEmWt'ZJh8W"fnpLINI7,O:1i
%`>D4\?q(;tE7DhH:h7c.H5:6.:bj].0G-R(,h*0r-Q^3q19>Hc0\hQ&\;1BE-5pISBWu)X298f_cm7=ATFnYPK.SKbG'.>8_9@H3
%h>nB=i<hhH_YsMb]uuE^a`]3n^B";--6-VBr"8?<6Rd!Y#RE[68/Ji^i?38.#uHcd8Q"F'bKXk6qhi(^\uQ?A[8R&9=DbTYq>7Q@
%[Y+csF;"%UO]O?3>LKRYpBV[m[c=BU7Q9<!Cg[a?RhQG.q9r#i%#Rf^G@TnWq8#^#8lZd.<E^+oBK!=_riX`uW2_ZPV\l`sIX(LE
%48%oRj!aVYe3+m?W8bVNe38!N[%dr-$BATMX+%Q#q(gNcG1`U(ft%Rb+&/$W1Gu85Eh-77gJh+dZ.G),<<bKOb].C,oI,?<;-TdA
%1=1JQq$*e4db,CLSbp.<?U:a4JYrarLODg4)Fe+mI=k)$W'<@CoN"9@Kn/>*TE+XC^P/onRe/eeV!uF#OU_mdj@p7`D:)tg#$m9a
%p"1OpDsfNe\K6i=*YXd%qTpWVM^J*=BBg7rcsF7?Il0%Zk>X8<il-fZo_Ue6:eO_]9&.9s`R.kpqUO"1)'23-37KC*HDh)FL"N8O
%bC/aPD=8Sc-MVFm^"+#[WngNif[;BCFmE<6(%$b\\7P@h7L6/I)Y:Y%dDbPE4:PWk'#OdMGjcoFrbJUhG*>).M!cF$/\u=&0`Re>
%hebaG.(.J$`<o''_%!g#oTJ.F",dFW8^r/8fL(f1>:_ko>+,0NZ;R^%ipj4*G2XNiU8!t=+7,B>oV%-8#hs&ts"\P#kS$"_.^6-k
%6\4Nul-n:"&Cacc:fWs-&u)YLC-UL:G+ORQ4<Z/"@7.mDAEDPAkjro6UD#NI(<#IRQ&<T"@!d:RV=YsHjuK(hl%`6X4[>Kl=DX*c
%aoAU;$*,N\NKlEUC/Zl0UUaN7&5=IKZ!#LIJQ[H[Yf#'_YS/;N.JUI_kel,:g@=r*.]BPt;<G>JN:-"IbC7NfItB[GmD(/VH#!%&
%;>&8<a,9&h_u@_3C07Ne)E5DpP17)L.`mG#[KqK0^nTNATmhcQJdStSXR3`1c#7_B!4oY@+5.<31qnLM/icK6.":O;a>q#)r<F@Y
%6iRVqg1lKbaKTSc98LSe46!'PiPNaCX9+B08SJ?+pP+6pjfCgtiSil&Le:dNh:Sn:ErfS_s!nW#^+n,:X>2Jtno3CV$5K"]SICuM
%:!a_lH&1)WP@8iuKSBdp9B#cA:IF-\U\@eL@fI3b/9+;VDM96d-Nl#-R#-7Cd)[LPlSjbGp3%iXkn8R;g7bJJ`7sGoG/838o1SfQ
%)m2k]mXkZk1`"K"`!jgg8f0Dq`su=Vh2+28]4dg(/J\17d6)2K>!epeT^/bBeQr(aMSa12iYHk1.>;bQ`K_9@3;fd@i9VZ=2e2_C
%fnHPP=5GX!d=e5u9(2%.6X"DMMKT1F`@__8ms(_oe8><[CU8sJr@%M)-EY][Bb+qKLtW=KHS[:$3,iThB)QJFK!]f3T7U.gLVDTC
%Gij.GY61);<*co,p2^.IislR\@N/Tqk\6A->iMtmE2j-qWgI>Hie8]KE/tjiTMOZHP([S>_[1p@5Y7#\+?,.02[UrjEm)&doY!+.
%6Yht7;s=#D1$8?c4.p_hSWpYH<Lm[JXc5LJ1n.o3aS%m_j%8&a>"JJE7VUQ]'FX@Z\9,20.,"KoGPb]k7%n\[+J;4/0@a_HDda[>
%\3!3&E#_NQ<*^esp\,JkITM\<6Zkf[i<Os3BZ3FS1Fhs!7i.Vqom@b0G1[7qDM7;b3X6)8]>![UW+]<hFQ9a=FkCJeel@>#9t%*4
%H[Ya\i7d(.@FW]W[l2N[D3O0r<5I-BF]EUKh<HpNeM2JdR`@apWK(n,3&JtYE0SVe;g2)`hNVIW,32i376HmC7f#t?p&k+G-(<lA
%%D=DR]lEO4k'qGlF!I+AZ8<PtGYc?`%F@C*,sLG!XKBg7d8"&8@k;BLL;t#2&9hi[>!!F"I,,h)cj#>P@3`l0lB2CaL>Lt<:,fa9
%E;.u5\Y.K]pYdukm24m^>jhdO;;`t]hicl7%Z^!bVnLO=s8Eag>+\,#GNKb>Pp$>PC41a;gXX]_o5,;a7-mb/bmf]U/VF/$1:kE,
%TKpui'4+rfXl%^_-%0R0<p[>6@m+:!Fu8E*Eb^$W"0/+.mh1(UGi+N`L=gQER=iO,TKH7hDdMLh!fD1'2l3VcES7!Jn</NHbGMuP
%\SGOK1:Q!uC5n"!^!([`<h[RQ>!T2_ie'>H706c4!#S#^#p*Vtf$ARHoZD++fJgG)NX\d\@afeXSg9Y3r,DE^nWLa3KETW9"0W:X
%fYO4#W=S41<-VgnONeZ48cFM,q:cP6YNjU`"=eVPAnZ6@c2fo>V/RhT"2!_K>nuXPaHh"uX03N&C5Oeq<O)Bap"%a?$(i%SOD(hs
%dbr"\gL2,?PELrt@@g<(LBH@W+Zb?a'(.PP$;e"SplZ-LFmuQ9R!*kB]9P,],J,6gQ]#LWmTP3c3R2Rtkor0^3Q0F(q&e>&l2jO'
%8goEK`)NfE`K^T)EjX)kd\>u%p8emqmUkp3^&$pYM%BLR:KR;NXHLb!?^&(6Iqh)\igDjSo7@aNd2pD._EI00%%TVT]8VJ<eV<'^
%%sU/R#C9]Q(iY+d\PC")l6O$rKaJ>gWm,jl&pt3#[5Mde/G-TL5ruIG.cDFS&q9VKs+Nr.;#=FO_i?ZZ:XC&_6XSbUgWJ&/r>jAo
%GW&_Mnq`(02d0#()m']@<SQ*-k3;?-:;Epn<BjkB_>uqmqlZktFCdUqVAAO+R9'An$K2MR^5R$]5-GT<1n"<J/.(aRAP$i]TBku5
%,OLd31P(tAjim_^L>C684[`[PQf/1s1]:lrBZ">>_3G%>^c;2Y.e\Qj/?:Y2NOVV%3+su<`XEmh>-j&s2TGF0Zd^Ym#(sBkC9VI$
%]tW^UdZ<:F0#IcR4c!0DOY=`Nr"aCHc\&6iiq6E&H(RtZ;30h06Pg$iA(dpnqY188T7-sq(S!OtnJi,j[lRi,I)\nm?);c!d:_%%
%9_X:20p)C#QM#"c&6's$J*<S93X/:.*V>+=jY7e`GN`G7=_9I\lHh$3>'0L"q!*Q7>-Y+E?G"WFlOdhh1\kl4cj_/9j,et8jK4c`
%9>A,DW)H1r=f&/->BFUu<KBj6+RW3S*AYjuT$qp-m0-MFkjb?gi@ke9+fH>H#5Cdo(iZZ2eNDi">=,D'0/CH&Z*-MX2eoSTq@7*?
%Lu>A$&J=UAL*</fe.'7:EgYPmNj*oN,&/5cV,1##")-W]Lb!9XhOgZN30(jjNtb"1:a+_?MGdk+l5q(oe@_&u(_@iBioX*GYd8+$
%+qs2@?84T_g$bZ2$`oI#+=L(K-WYLohk49p@nj8'MHG)fUaoDneQRc8W9iqTSdsk:QNu$i]bj1$2*,3A#+Hqh>TpSVVuY<kBBZ!l
%QE?I^.RqCa*S+*<[#VB+rhp680JnPhm5'nGZ'g<A28s08'J%C=Dsbn#b2IgQ0ai>Hb!=k9=01*A/T=Zq/+.+[^AD.,gpo>]8D+BR
%s"Hqp^&TGco_N]kMHQZ[+*sWd-e4ZCkRZ2u$uj,M(s%8@?:.7`;/^=f,1X.@/I>fj]Yt&JleoiP)a)nHiH!-4BV"Lb&5&,-%=q^0
%9#!5C4ICI^3>?bt0oR9XU''JN@)QK+14^YlltOlq8:g3[L?hAaY>r6gTZaFQgh5R:RVgGhO^UOY8mbV92`2*-SNO+K_k?duU8o\X
%L>(3,#9upX/OMm.&bqQC8?7]bU0)8L7RTm`6'YgcA)!]M.b(1^p=Y"1,:p`;bi"34o=^#99o;9r0Bk"f,?U)C\loHk2=/LG.G,U3
%=()rnAoes^Xk5S2dN9D<[R=u@fW!6?,O6K,.Lc$<.N9?\?plN&hSsfK#UL@jfKmus719iY((T#-q]=FD^]i#bG_H0W!"V.DTN7no
%#0(^4!R)61h$ZP&G1edk6*G[GGrKf*O^CW93pNrJ_HpNUPo#m/Tj?H]\`ZZ<*E^[elp8IbP/B9lm0G@rVA?*`U'5T@1K%p!ibUkV
%f)+:Gr'T)B(Pc'>:#sBj[`Gcna!a'ohBE["c!knnMF0L6#<-Di#Sp[CkTkNI.Q4h<Vr:f"Bg%ZXDhbtAlg4IP3.>83?,Y0.LX)Ws
%!h&#&ERsfV-sQg)de'M9mUG@ok`l[igLY,jO"<:?[PFllj*+!LS>YDGSZJ"epM?=n)*1;,`IPr>o4(jh-'`/OR.BQ]HY92RG`W:B
%=j.CVkd-Uf`_kR]fGW8I+)r"o`Nf?2/T@)[qZqA$1_gHR_s[b!EUP]TIDJ8fW,u-dj$`bg/oYdF,iP=dhp9`V`Rk;Sg,=84-u'D0
%%6JoUr\,N+R'TQIMMHSi$_8#kcq%QBRB:^Km/('!4O$Ru0u9U%mK'X0A!.&;kfI!(Q=BNKYNA/[JaYNs=$i+Ts(_(ser07.Ka_u$
%jmp#dXodRfX5$VmhX;BVk;U@ap#rTIYZt"QWb'i(8,-$Bp,GmeQdLMQ;[7b<%RD1KnU!50HRqo;-S761LUgk!A5UdCXt8moM"u\l
%T+e[V?g^6NrKahDM!*@'hsQu,!#qst75K]o'Z"a/O%%tp^T8.\>rlJhE*hPrRH!/`e)m0#XUJZO'FX#.5O<#@NRU^nK7%<*FB3@;
%S'?1qn,)!ePlIJgRdIeE]4-AKpeqcKS'57P6)^O9>Hpu]6%_2OSeh>W]=g^S=d$C6;<[b">D:[`1a&qQasCUh8DRUmqQ4dl*%39Y
%c,YAF)%HU,75IfHHnl]</GHH2_pYVJVRcMN.\)Mpc@qj!*AFB4\-D?+Ij*s]R@g`OTB1M6/J;ZJ\b>#/?Y%^'FJ,dPTd4'/E?A^"
%YcBd_fG"'J@l.$OM"04K%LVG?Y[bpu#P;FjguN*N5G[:bO'\?/>e(5J'qF8a1S3<IfdU")n7p_#k`+Pk@4:Od]9Gpaak>E9^,IBr
%7iK79QS`Am$DWM\V%!2saF1dQN,iNlo9;+_99BmX<?%*%rLY#)qci-bRuhkJP#)2A5Xl93=q!PO,SS."5TaY4&%r<5Zq4,'LPDLq
%>1Ddl`PF<`#EpZ^5Tc`ZBNo0LLO>VIm):QtQg<"$_'s7Zj/K_@6Fp>8H&d;&;S(aI%YoW@7+<?$+G0.@6'pG1BO@].IlKH.%"_!2
%]rRDa+1at2YK-PahUDn,R,T+HHXieNJlCH>``%6aE*iO$3LN9ka;,Mha$))j514FhT]ZJ!g7\$]i?!+SI_Zfu#8`\ufG,!l$4Ja9
%(MFAb)]u3,3*H!K91afbq[eN*?,mJL\aRWFWVIBc6L\.CCTeh]qo0E!mCi&d&YWJ`LS85g3eaG`1sp!a&SF0M[$B_.jYOa"*@u9u
%'=u'_D:mc<<JtN2Mk7MZK=e-Ogs^Mq!,:A"&"JHNO1(SZ?dL]#JrrGq2([0Yi2=93C`o[U2mcP_C<2&FUrbl1+jef]_^/%LTaH;E
%3kY,upt=sLdu/W?!`UWe3,&tA;2Ra6B\puf%TTAnG'1V+^76<.?i)q+bM)TYo7\+$:Cf/-m/Dce5KqRt]f68-@N@M1\&?NL4>k\1
%./pEtFi?PtJ`@<*B47d#95YQeGK)toeE=g$kME/?2k'Y4r==t:[o;"#2Zsea[9KrrF&tce'ed>`\=-FMAbMj,#fc!ddGBce=WeDh
%AT3b"OG2t.dsnmG+]Ra:p;hbDYm(g'qB:L?o'XIKkV=S73\._Yc"9)IpO6#W'O]6>X>3uL((*e&!KKaS*dV[LaS3\BE<k_EM/Q-o
%2.A:I.tcKKBJDI3L[`.;njV>c0"nO:;8FPr2WM?]?Z07/R*68\No&R-A[tWN<bSoWG;%h6%e;cgd,*>YD9,BjNmW+=OTAU'[`GV@
%5GWk"*B_:maHsNc=huD%2WM?]p[]"0l`oXhJCda`*!i\]`pF!@s5B*`U`:LOnZf:'.B76jk4o@$e%cb[9nGn4Mak-1-Z)/9NgT%3
%h%DZ9nD)MH3$f.`X^i2$:EB(-SL?>EJ_.+5VL[lmbCgiXZ<=u2d)eW@lWu6beUZ;;Rf\H&&)eOke[n3(Jpag2S^gs(AfI<\qjmP=
%Qj^NRK=c'R29\ma.*OUY]`6=_39\d.'<N!HD1.[#EU]>\l475PK/b:jUR5=OKGsq9".cq*>peZ$B*FX3fo5+frdZ1O=<\gJWVPC(
%[dX1S='eS*l'O[r>SYK;2DgM20`D]o,%W(:\lYCA4gqE>:ZP.=`]Yj%16@rV6,Ea#!2k)Vdt7I**4\DW7KB>J%j`sKinK/rf+''g
%TAl";e@9N(oV"qq<l+ULeVmo(A$354%,Ib;ZC]1d?1T1%Du7^@M'1Tj`"AcnN#<^2Ct(Pb*K_oYdrF`D_S<DYOaI6>q@FNl^I0pY
%_`/:,cu0rP?4OPggd98,a,,F%"!W0lJ/S!QoHRDQq8:kmBU',>l<4SIQQSKeRm-TK?I'JK=;=feh_<DKIU5k+k'&fnKLTV+h4`J.
%`mh's(\EgTFGFak6?hE#s-F&:EX25cWD2*S3M";i^p)jQ@V6`\i/luLK.aQ7BU.!&M&RITdl6.prVP8o&*//COB!Q8fjo9BmMcn1
%4j`eP6<0-/G4-^3UJA\LOt'K-;UPb'X?=Sq&<>NcMMf;G-8JO4MGo0t'5caX-CT*4nj!T2h`n!k08Ho:GZ'eX-(dO:#ql;p=El<t
%9I<gd$gUS=$$`K<hr<kuo6Zb/rS(P+B?RJsAu^I"H_T[,`EAA)AJZ9eDF+$qX6*.4ItMD+)k8:s:B.;854jY7k]oJ1LjI/:E!a#X
%h=ofFi@c(j/.UJpGYsSjk>S]kR_aiP=0rciN#ZS*_EGIU]J)k47Xk5.D:MZW@OG#l9_>ujYaZ@rZT8EeW0?^.,.XD@i@FacY_ZYi
%>CIDkLUnXN'(4.3*8"WSArm(U;47eFb%Bn$5d*I$eD:%WD,Y%uR5Yrg:%o[LJO8X?^=RHYGaA3CWP#6Zho+8qhmW$g1]Fn@YFEU(
%a^P]c1Y0A-1krDX'0VHSrZ5>H??Xo$)M3]:nYa)YL-DtamuN+jeAciW8bb$(j6aT'*)V4VA!s#")6k;U2"SeB,mK*\SelK16n3Y3
%!Ona!I_I5h/&aUN+JS!Gj5"`4O.I.EpmOk_pSa;F'sqh&B3KJALc7u8ZQI,E9'KmMGsOf/JDthdE!s8GB.kLtIo?]R,(_/UgTuSf
%9_>uji$,*[Ni.\)\4<*C+1G&FMV\R'%P*>DEJGSZ,s?eA"mdUQQ.ar@ILE=)Ir*m=q+GtW"'@6]HC.qA?KW+%ac<9EFH8$T2j:</
%U9V4'Y(9n,(YlHZ;BMd`4mF<jX\Pb.Lb4%0iA8Ue%&lG#ItFR';_NLD&)?d66(NPhi-r[="XDtYZV1Hs&&OZX:Cl7Pha*f`Y<]27
%S7&'e%Pe2CeiWh"YE'!]*fNs$3WQul-<A-5e-j%nhkb(u7AHuYo2;c=e4KGiWD@sub;g26d@h@7")r@1.aVNgF(.uu2F$,46Ts2^
%6ou\\\]MqXld,mIYIjPrjFB?6)[VNi"q=if?<5Ou"W^<]*V(cU[2rAIOO8FC7:`[I5Yq\siBY]s$9N4Zj(OTI\4<*CQ-nPeqBkL`
%pl0E7CsAa<"jMh'bEQt,3XK.SH>l7\AB(VrV6@]u8_NA5g5@_<9R&))^Y0iiqibgZ!rHBAmG>qd'@\r#\Y=l'5Bh&#jbF$8mC]Y0
%\0<:Y.^fK)g-7Of2DBlR&j[,P:8ep\3Dh,n9lT2_:`#=43lq'4"C\gVjD`Q*h8QaUY#5IP.,e5.AYT&FdT\J+@u4EOmth@rl7H_V
%&^RTX+sqb?1\\8oV)FOMAtmMcX/(-9dmi&:#It=I?o5:t-Z-Nq>d4Cj3#$@;\fW\;.?d7sE=6g+/oXj08Xk]aDXDZ1V!j4Pgsd!K
%<`&@t1Li$gZOZPIEe:o#C-$(j\M&j/$W(t"a6WXHPAN)>nJ&GT5:7g<X1+mYkIq4g^3K<6:.Z"bH5@'GG#0Rp,.!pOoXphNe_%:^
%8[q9]KGUMAZcY[GM7GNbT[uXWGI7/o3skY[POPSAJseE1UNR"p'QK!`oXpi2l"-B<HSf(d7k\R%r*(&cEbQeU'qQ>S:u@chi?%sX
%7fHjC0^NAH9;]:d`*f3iQ(XR\QYDXZq^n@4YS`cUpTu/Hg!c)*CXZSW7d_d>D_k:+WcQUnXsf!,\ml<%nS&$e.Ie=\M6)@<G;K44
%bh1L,14K*CpP"Sp\2t@=.F%.\b@iRrEstts,H#19Mu4OH#FH7_etVrQnQX1qr%.Jo/L1]2ZX>Njk@*\_?]k.`#73\s/'2j1:AK@,
%9,8rZVQ,aEQeTTKq'>V@X\L\tY3oX+k3/pe@O!jUIRMjs4Zb@o0s/1[6=78Yk=fFL\$@>tHl+5+`Q'--F#GLUo=Ph7g:aC03H)D:
%(4-PuJhNVUg/#5pg0@s2%l`O;ein5=qoY2WImXu$hX/cH:Q]BNr[>XMGr!anju6D6,3a)'I[9kDf&k9hY[9>-YgYuX(dW'bB(h(5
%YXWW_0^^`NOGDD@It@*J/.G1NV_iWhN*Q!)eW:BR:!TF-1TEp6(Gue+ike1(QD@OZVfpq3[cl">k7-(`DP28%&)\hZ?G@W?$O[C&
%O)r`G:S]''PqqPjf4I&D\K@P3R9#%kc9\T`-9/'8Uod*K[Iu+=fClf)KoWPJ-&.Q.]n2m>%:)!rAeA[s9Lc\<<24BsIqQ?&XYbBh
%4\L4b6gG<,2P#FjN;ok,[QU,7b\X#MkMYhN@j<:F>./Pk[`q@GT#CW41&lGrAc@'T=QiDG2^U=,OD#26)eLF]!A^V_)f6R@$UEjJ
%6eRPJB)Hs]::-5jY.WsRJo'J)3.D3c,\BeSiZ.#OFm,co'0#4VfM#'El2HK@@ABhk8fqf2-OPYI?jIM.s7;?@$'/,83J>48d,,&A
%<.dA6(HT%:+/Va=@#$<5hl@P?3,>rJc2'X^oSY+=R11Ye[[/aAmrL/`#*6Wf3?Tr;qs2h]"^u6$83&QCU6Kpr(3A>#A`Bs]#P;HX
%Bpa+ar=HlG-i&k4&6J&s8):&DeUXQ`?<Bd#Q25$G])#?=$:f+bR_sNAX8r&AYL'B"!h0gOH>-(nn@i"W5*W>qOjMGQYUGgRMd)8n
%eq7#:-#GR"WO6)E4sEc:'.EB9h^m4d;H"YIA4!ViCbSf?Z\OnXWofH$A"Z@+\gc*i8OLG#;WZ,##P;G]@q*1OO?8"02?7*]@B4-A
%d&d7W1]:R#[AcbgBGA#4TGPcK<70hA#o5/7Wm:ga9l3*6ZAaj`(M_<PZ"^\&+(eB0H>s>``Hp%6\&?NL4>liU9LY%)<]].]n3oAU
%-L`6%i'_"#QDk$l?/_lP8Gqk*S`rLEC((6/1G`\r=_9V_Kc3?/fKlLBI^fWZ$?>&FjGJ*DW1FY]g[N_FbD]\U"Wsp/U5>f*+=:WW
%fqK8qgjuWTlA('36+2uBPYg)#B[DP"_=XDgLSSnuLR7-Gh[^d9qCQ^<L50r$Q)P%kd:R<dQn>9apjmXE1"D`p.7g12aos9S`Fi7'
%[,5D%?=(Lsa;I't1uq#'`hcpiL'>>WMl6gT1)Du%2l4b74LW^7_Y(rT):1R,L:PjjU!0=Tm"?Y\X%.Db<g=GX,hht0+g-u9b`s[9
%_ijo8l`Zro$Mbl\6,$$R>32'Wfn@DCI[,alVY>IF+Bt'cSd>U!ngIYJZZPX1(KR#XRaRS06P`iV9AL3sGKU'"arM&-7BUAdDn-tX
%]"EB0$Zb>iFB!49S'?1qYFgr[<`N0El]%Z3F(QgC4)Y^*N:`)No!S&P!A0$BG?CkR=0=j?)g:)@++ae_Q]!g6X`>4=/%EOBAj!Kq
%#GTUQAA;_GMb:$7(=?QC"-\.lFrH\&Ej1.P84tWd^Z_ZE<FSuK\gd&'Z2'%)f4e6hCF]CMHOTi:5BYC'5;:g4>d('n!HB3JK*`at
%-liqHCZpk0hMQ_i)r[KYR[n3@m!h^]/+k_sSHd':0TTKi<<j4ZXe*+CN8kDGS30D^jM%p^E,$@.Bp.t8l:"CtFB3C+Z88V*h<h9]
%Z"?\Y9ERpC=2FK/ljMR8_#M7%oWD!?ZDbd*4bUuEOY_Q9WH"lbZXpSc"$0%!HHZB^)nA27"8oQ0$O7"#S(K[e"p93T]:e<j%>Vsm
%]L]P&SV3hMgPf8H(;i1tCndr0%QuHnI&)tfRT^?l;((>QWcUG1A6ED+T6?/-Y\#`r=q=9(NQmO1Ea4E]bna23l8G<S'[8RW?b'Cn
%eV;PGh^iV;m+9p8m"X)R(`9?VM,S#U$1K?oa^9m.bk6tNhehH#h_B:IDh:_setGm=(eqsQDo60Y\X<#MHc)H;&J"\i-@$4]lZk#R
%Pp^fR(s01B4&QjAR,oh.1Fj,4q'L]A/rutpHfJ8qs#5+`?Xt21oC*RKpJ&bRi2%K`kt<?1cZ<oV@#fZQ=*t1u+$D$cef4SHEOSC1
%`0QZoY:9Y$N[UL;oKT!>ca!`@\EiTR&]tfAJ@KM/iqhP@rrA*@&L;V`Vb's.U-,N=Cbi$?+u4$YIGI=X=kSH/l6,0VqEK-Wr:<r]
%":#nF_$c2/72j\eH2KJK'cR@oeGb3t/T6n#+CT6jeGlek-#n+Wqe\i1Jd$b3A+LZ%j^Kc:J+T$i44GHgUfKp,.X]$U>%2]!;=!]9
%IU-H9%lM$Ds+YZ@Ymcp`6Y_mG=12m2)nW4jA\.qKHe<,G3=o&Zjl^$<1P(uY(9\3FDNI0u6mbao<>,_W3JOqK.7V.>^g^r`h/;+J
%"1M4t2HlG4(l%9s+E]i@Ck`B%Dbqn*_4Zu)6Bm]T*9f)<e)I7*s6smu,GE5o.'AR:<B6%0$mTg?@RBAFE1i$I3oJ<QVGAlM$c;@2
%YYJEd0)$bA0#BKEe8MMF!HG?4&^7F#_Ol?2#YU\?>e(65'jTa11S3@eoE)a-r=Nn8@n_n\4G\hk3-Y8F`!gGlnQdk7-CudGQ6^>i
%3F(iZOS+73%]gb([Z;loVm(k[\m_;-DG/]"^iMmC<eZ)(^L%WZ8l?\t>/Bb]B95Hgm*P?]p4m]K'MX<qjI4dI\fl22LB62#fHnTq
%\J973ak3,/H>@`is"`$Q*A"2^p&qrM1"hR$@'j\N,0q#J>4r,"Z;^n%,t;RVr=1L[WY6jrF.)6`*K$tk(L8Q&5F$LtPf(4H_Ti[_
%(=m5nQ,cLHRF\SMlI-si@a^OP]CJl[QFEl:[7)p59OXVtDo&IXdk3D41Lnb*G!Z%Q*8F6kH)F\X@TGQ]ZmEE?%10Xk7[-%G.oBMk
%$Vr[mRk+OBl*UaeUlU&KApoc*#nX"aOq&J&Pt:QXPa60.Bg<dCTkm9"UX]9>h8_2a.Y%-'^A,K5@eiuU;@r1ocDs<bnu&_AIM&R<
%:s1chg0UMJn(<'npL@A_;rntq2H[4[PPrhBO+6h,flpiP"kRW5U$N9El(c,;L>=A!`##5(IjifkJ3cJ\9,M=\?m'ZI%Z"E*>M<EX
%_u;\-j!9dE#H^lE3,5pubr.\neK6-@;RjP#l\RN_8e)Q!T*YUH@Gn!*=3,O'!h0hD3bc7VV#33)ZRm08G4'^gr322]1;u8pou-u&
%op2u<M!*@gLJO.AE1B<@WP"fM)gl(SLP86)!F4F3)Eeh\IuqKT(X(gI*=qa9>9T^a6f4e/Z?.7=0+6Ht@V[X_OP&[G?5@^$&_F])
%d6=&&^LJp,d]I@["[ch(^$K<dFujA\HPp<C9CdEI`c*Hq@5!O)MK>Ks@d\FeNQS]8Tk_VYC3<e!'-:rX\dHQ/PNP;J(@^59S$SY;
%HpjY:Z;Bi=j]t(j;Y+4Uh-TEODqQ5E_>LduYtJaL96;/cm$SP0Na7=R`\``i4*H10UH0+&04W<hFqI,Y$"Vks)g9mKh6@p);:)IU
%(D@t!r,D(YT_G'RM2^](JUF]UAW`,GR!s&pT%BD)la1i%SEJ#ns+Bp]9k&=<"QhSf%dcol^JpW0I;[^J>2,GI`t>POc%BI?lVA3g
%c32>=qB8aO(-W#%3!ZQp*B:(.Us2@k\(70"Y#=[Ul-j8iZgc\-K5Cs5bBD74PQSr<Yb]Nrijt20'.'fnkP-25D/-8CiZ.%U@Y(;#
%9A4.!;euF2M=P.+Z<u^[[+c8pM`o1`56mVeLOL%s*\sWZlFu$aiNZ"i3FilX>2B_J[s/H#V:`FHc[hsUP;;n#GD..N4dn=#<H(4c
%W2&%QI^kFI/"g[EpEQ1u(k`PI!Y/b[hCN1e-?:oj@a1r,38M]R/L8R*WlY"BIO(,FhMHim$Y?BW(+mLC5Q"Jb<%UUOTVYuK2;m3W
%QSH*3T*EL72>claTLh!H=_YM`!Z+EOSEaZJ%=5e7L!(!,!JCAGr`"!DG<alH\@UR^[UYL[MR[klF!g?u+-%:[DbUP-$b]rjB(le2
%)ED8b*kM"<Ah;JpB'6CJP;m//KfuX%_of+()4PE?_fprkFd*crpM[2L;3[)i@L4dh@dCbuZe<5&UE/X/Ruqs1*M5PQFoBIr5U4Ne
%\ZkdZkY^%s%eFoW=t<mgV:B1pU*Ftp1tB7M#9%T-_%3HN=JVp=`=Bt:p0q#'jmb\`Z"<iUUpgZ$TQ$M`Wl?6#D'.V4bhpK^[=7k!
%)q:s^DcD]#jn^[Oedk'q?+#2W)L/8:'jS#s;Om@-=[*a4p>Hl[295(3S%cYI9WlZSrBLm*UB;rl8.L>68m3-DiRfX2TS*.b9Jdt[
%`W"+R6Q?LZ0NPH1Ne\'PT]R',B[_[P`0?<M]7.L8RKm7t:1fkRQKt(.HLPbU;a3E\YVS';I$]2)kV=h"78gN9QTZ!P-dEKU\U7cJ
%aC"UmMpi9U2`3p9][<KYqf^H]?QdDt[3?4$)tMCpZBcuja*eS3j[LpkX@VoS;%QPt$0SGGh_f'GHoD9kg+ka<dlqP"r08di=<?$r
%@0Il,%j#:nD`=>UkkuIsOe"EPb:W#-@G]*aI@=FcL*ogU%KQGZEep5%$2<YFqtll^mqO%qOVnA12MY6n#RiR[Z-?aP#)G3V$oGHd
%EiFqe#W/;"+6.'O?sffN?Ra_<YL3Wd8fS*ik!Q8TIb*ic=e[8&8t=h@fG$1ns3sO<Zrtp.rRMmg"+kb#-]",)@0At*i-'qFJ-j)K
%\sllSU/8\]Hj:(uN*!:SbqX_!f.Jl'/l<;P*AG<,YpjEgri(la@!BN#P]:PYn0HQ@L@.u/%6H3[P-\tABG@6J\HQua*i</0`S?'G
%S6(ghcEVp2o:1<";VY"9o\b13NLZ@.HO%..^BgC4l@uVb.G05l2>2GCD:#s*&=O3m6`bCN3N,kJ&R*OZ_*0HAiY-!od2gHFD^?n\
%?o#(JaaeA<5SA(Xa58KF<j:Oj94)`9`a3t.X:Em"?sbD2FD^shesPm$R+hYi0@:GA,]Qndo=g:sh\Fb8'o2]gD/hFL`rHKq&Er#r
%!pN-M7F\5]jZ3gU1!8I_=$HiA3T;bs8/o#=l@s$I+@Y5T/'>\_3kKGKVd:H_/3A2E"/c$#NZ3%9T>pl)A(iIZ*Ec$qRPcfLF78Z%
%fL2FNiaGV*aM10V=o>@'AI^`Z@"%dI@q-b-Lsl'7&Kl5"C\n,/T"A!M7nN@Ba/q42/!02S@'1=M`nq]!cu0>oKH_?O8Q!Y(G>]p8
%%k`tiL$>*0#.gdCaM2G?8=_Jb(6F`MnkgTi`9>"Tl&(AOnZ\G!YNd4*\;_G5ndiD;(33Oe'=87=P0-`G5E=Cnh(X;?L[XNm!Yo.h
%j1s'L&9q$D?8]&fJ%kUUNon=`1<^HMkZ&pJh8,TrV'-Y,B-111q@M8q[+1k:f>R"dYsQ.i+_n,<`Z`[GRcA>-FfW%MbTm-?@g?//
%"Nh$fA,BA7jjp+mKXJ,J^di3>`ZUX/)Eg$Xq+#N$$klM[[`enU\NECs/jMsXJ]r,77,NQo(CF\3@j_=F%MPIU+HkV5`csZ&g=Y5N
%<&?M#NTU0?dU(A?q#tQW+YE:_FO;Y]G45rZ9t]`Lk6;+@6?]\VXq*glWjV^(fk!U<S3dH6q<.+'<h2cJ8h8OJp">+Jd_n`d-"?!P
%?PHFqSu"BX6i6pXE.dEBpa/l1@'+aCW4\Y%ak9;)",VL+kS\8?jgSa+WCbX+]/EiB?=r3`jJT9X043X\$)]=dQ9b0=A.7bhXO+LH
%(Vb6](!$6R,:=eLH9FiHm=T]QZVjiP!uLep$*Rim+'L6mp/oRt0aJI]A",b%mN$E9Cgc*4q9lTCn(*=$Gg<<4qt'AI^L/m>l7?Q!
%]Z?\PW"C"G\qE;ir**OO^OU7#i-^=:%+toqI`2pW)p#t8Ta]ac0ODSXLmHreT]#gqRur,1j&l3hg?0EIc_jC!?e>N66ds79QA<<c
%*.%GJT_SHqMG;#%NTB?Loc995?]#[3LMs-K7=@D%T"IQ`s8Gk8_9ZcklA#U3=5K$VY,-:M&l_6qL9Xkea<FFZ%LW&kc1pSD<rG22
%9;"&8PR$ikAo=_'o&<K-qf"?S]k7#EM4PNjR\q#rKdSa!D#<+!CoR70%SG$GC,MN(\4<*C+88ldg%#[/p0fZDCTJSh;B"N^;ID*o
%i9A)3\%b9BT^-Y02DA9&#Hgb%'mjUY;&=h3.Il>a^Hh/#E;`n5^uc+^]iF&Wn6o%;S%,(6q+.AMZRhB/#5p<Vhp=aQ*?T0<8(Z:$
%)d-M5Ar0mk0=R[65/8FmMI$=:_IB<4jSXa_`;\YQ1P#dirYtOIF-Jk_p(LP8'P5$p+'cl.p!!G42AlU\9HHIog3_S\hK6t$UC`1:
%J`:QW?L1.j15%IfbBjB[GIl]H&ACoD[jDC9q_CNrSUO3h"9^#9']q97&*;5;G+JH8RG,.RX^-])]i3nWC4R*0WlTZP,gBII$QR7"
%'$kDP[d+?kTV%nKEt@:#^,J!c<t=Q1_ef=e0=@>nNh66?=b??Q:/A$B%/I,"m%loDXRWjcO@frnO_4"I5D/n>,MXA@l4.fM_jDK)
%$RXj\b5f?^#;7(h%U[Y/5]:V2F&UO!Hs!])J,ZMRgSmJ,duMX`PW)&A+gFd>2Jt)*&>](i]EWm%g$%9sGbqrNC<20nX,4c5rbU^b
%#"(QjeO2%eJt"iL&M?q%=J%LWpQo2sOju?Fo2`Um14\/cVT)TUA@=U!n9a$GfN:QT]>2jlD]_mSD(0iCoUkk>ESS"5=e!XU._2l#
%>Lg"/Z00;m`dP,6_i_65T\ROJbEd9ie!o><m+#Nl3GX3=O%FL&qTke6o]'TLY<"lmhnD'qORNbfL/3=*I=a9+!)F.!+mEpu,&hqt
%_.rV%'9%or)L6_un3<@,_7NJ^_8JTsgtsF8Q5gl^n?Z9:%0YS]I4rbkIf?F9:(@Q^>%0cO_'('^D9WY3#QiZZp4q%h(;UNel9H<?
%,Ci6;de?u`*TLJ&r.[Cj5,W?Q82*OD!*(9BAT8j:jLdlJdLHf<KqK2Q3a2i$K\\Nb/2SE#]Aa&?!ss*&-J??=1!(kD'2V)imYo2Z
%G:>@0`rlL.(Lr.=rL+%jWrC)j[rb=EP'?c+)M3itBLIl[j(D1D+Ns$h9\+.mE<s76X$.LG2EJK7Q`)o=Ar-UURkb^ikrQd1k\',W
%gk/G9dJm^,0ojA3"<OZ5R#Jbj"7$b_KN8R;E,S#&[Hel$5-,*V5m$IeoF\\ZZ*f.]Q2!$f@]7$fqru7qV,lf"hWN1U4Q:"r!22dF
%-QTd1he<D%Fg5PU!Vi`L1=^jQMU,OiTh&CIAJ@]f##C5lC<cC?);-Ze1=CWhl=2(R!Gk,@OW&iBqNFh<Y4H:C9Sd!iXf7.^Fp1*K
%@^"sZ1^EYe%t!]k$+E/HL,o+,[i[ii;Q7D?$TfB+C1ke"\BaK^FUmI&P0L#UBB--X.G@^a^JoU\/D?#0XH#A"i@2b33"F"B`KV6#
%iDNn<ks6o=-kJ9Y)NkR6,$\mk%CQ+$j@!,(_^Z_(H^RZ0q@C)Nr/riMcRlZl]]$9-(Ia/R[eHobE8Z!BH\ko"Vh0_(lD0HSH2!R,
%XZH)Ke--l'G?Y%H%=Gd8SaWt*.H6EXh^$;<`%J-CXqI0mUfcGohq2^A4S'LE>!$%C;!O=c[m#2Q(%5>H\d$eg3JS7*E<ls)%P)GN
%2&V!I)%\cO&>:!F_@UoX7EhW&Ij_Knp@Nl,F7f$=PJJsB@-S]H!d:AXj=Pjjo]b]-+*pO/lTgW^O`)Nr@Hg+O%#8_mHC+^W?>i2U
%l]eaf=.TMpUAr'?aG2&k:;\#1;E-k8Gr-?26-I+@Th9G1Y\\H((Q>(/WM@)Hisc,-&g8hCPBMJ>e:u&c&J4$(+i6de%ZnZDVpX@8
%9f5rT9o<>s!54/nT0AWci'>1/1hR]^UlXMJ+s)'3s-TuqRKJ2PQr(7UZT"3I!+L*@o+4Wu5JlUi_S:SuV(\7^XMRi3[rb\EGOUBK
%4t5u%<RVErnp[@e1G$/9pm]Ys+c5e&+gTm7d?V":pO:tW9k$)a1$#[n&29"G*>hJfJ71*8Y<352bdiJ-6&/'fX;SB1Yg9]UTFjs;
%RKFK'lDL]aR-;mJ\_gB]$c'D<`@Ss2Ns/SG/?J@,Ad>[%rNtd(88d!n+6Nb\320V)'`P+>#].ek"Vpd*,?fR$g"'mqN>?j]*Zc%K
%m;pGCnZKNdmapEu8=mYTN`!g1R?''7qVhLjZ]Bo2]"$Q2S1(g#4`.a52>b0q30lsMNCQ1!1In"5BNl*D>Wa#8$;*;RF[C2A%BRu<
%Q+?)<.BReb62E`m]mbdOW(.dN[rJ?#Y$#?)p+[X/X-0fR-86`c#<fK7h&$^%gbMOg`s?-o4pe[7KnjFi2QfQt_%bP75$FSsTF<<[
%eBjOh,5'UW1T0\lLOQf$167^2OnE(9.$q3%jpH(BI&c>dHAhPU4qOR5ae<oZ'B,QqcuF##(uWO'=&+tn`1/$\+nX(e"@E[`n&Tq/
%Ogr1X[j<C/JJ`e8?&=<K?g;6rXtk<':68XlRT,#hLTG5Mct_l7=c8ku_g**/3qep0/e]`N)fs\+YW&^m+!lM^4(-V$![`R<3D"p]
%=C$1RY$E6qQ5oj/kD)l>`T1TWA6*,i<m`4,Zt0tbaST7-HkCk"Jn@8>(iY,2U;d9WlTkX%!4>GrrfS7Wl],k`1fB[X,?726[=*S+
%s)I-nhgm9'4cPV&)rG."+isdWY\g$aV]?38f44J/=Qi@77DrrX;tKtK9bp!8=m*<_lrJRhF*pPgD]s/Z9O7TUOE]U2"4S*un[ZEK
%Aa8J&^39k.Oi&i^pUclBQ0HdPci%nZe0U?t-[tXT9Gk#rYht:*Z%Y=iTlLY-GAPWKkd<+[@/cKcPaNn(M2&ZMl=Q\!A7VK<=F[Vm
%+]KiG+fc@g[)t!m@j?6`$U;+$%F+nGaZ_`S$s;GJqk8-tWGm?/_!I2?,muP:ElM7eMK<FLWo3!?kSKJ*4Y'D9]9D[pf-;>I?(EBZ
%N[rM=pUdU'o>gk]c.Z:P.FAa$k["#+gWp'7VZiY56u]:@)m@S+62125I-^ZnZW(7K8cC3)$!olCcb\<d5#`s-oGiXi>gj0aLD)V+
%R^tjN971%2E,@e=W>ZWRfNZrdK5tp&+Zsh0G7BS46V]^?.Ehcm[$eK5OI/\IpFPoYm/tc._+PI=H8pSqCGT[$(e$'BKe0>C5!#A>
%/5efJSASqA=-#+Df02UECJDW?honfm5CojL:Df@Zr3>^J]KpW:RZa7",kK4ul.pqRSn3AcID8.PnOlQjrG5>S%2\Yl!Se0>Ffr5;
%#M,bs`q/d"4o-/nLH/9D\@]rr5EsiaoN[`u5ECDj9q/b]E/uUXJ!cAsf3E+n/2ipo"Vj-c:E;UFCJVk@7a/)3^b+ca^ZfDk4lhu@
%fC/;j0c"u+k64;]l6\8e-fH+h'#)6U&R'b$[+L^O#.kl"]U)r2.*6adD#7/H/U5mji3#T"oX1%%JY:)$hocB2iDC'56c^P.UL1-i
%iM>,A^jkT[W;:R_kTu!R\#bpLHh=J5bGJUUp+u&1HraSMH(f4p?q\9epsj]DmB!IWqnmt!U6eWH+F(G52dE!4Jp0@_O_:]4LE9c+
%Yj^P)Ju:-Ll!e?>ma3-Biu`?0q.1ee]akOpN&0?'C[rq?m>eugKq9*F`pZr_p"(JEUJAZ]f>9EN*F>NrU[59<mm\6[dIVt<0;b/^
%GtPS:SV41#j'fT4hd$&H[jc@CpjQNtaRA^4L\][MgnV@W%//J$4S1FN#XGG>l0!c;>;dR8n"(0[dBD-IcoCR7I-G:6:%6WEp@CUj
%6eIU5JkZRGkZpF5'Ko"?iqo.cHH6ZZqg"l\nRslgpZR\2o;f'HOZ"7X>\'8M5DSP?imB)6rK8@63;2:CQS9#>42nfb_'A=!UV)VO
%3>A&e<*b[`8o,_3EJm^[@5lnS[3]QW-AOpL\Y()>@#d^u7<WoNo$*?fT`30&Nh*r"aZ29kP1D84:6nHBAt!D*0'2<;&n[@"RB[iJ
%1m#?+)UO7bW8QS4LH?K'H$e`[?Da2uPue9c]Sgh4'.+H"#EaS7Q8.K[h58#<h0eBVCp4kH8AQ'W;bk>*GV%8/MUE@d]ghI9R,>*Z
%:'5bE0-_&fbtg?E24EVmP"!:(ntcF):Y;H:_RiQqM>#[7FMO7SrK#3l"EV)VPX-DF+N#gtQha"E\?r`p(?!?dDbBXsI"V$&CeF77
%krD&LRlYUp5[KG>*V]f&7i8Ii3SercJ@WsdX?dphT'.W]IL+BOX??W6Db'NJAO]B.d05>,j`qiGc"/[(\?6'&/,UOID[5@(CtG&N
%oH2,jUgN>`:f2O/`[oeb4_/FXQP1B%kW3m+01^9^_cT=t?#hC7@!_p_MRqQBn!CY+iYflZ@[meX(O-F12j%8KV>"l_[I'(D)cJ&>
%4HM#)q@s-+L0i_IYNe9Id\.UlTKAXlb`hD(l'E(&JeU2+(4I6;4PB(1HL(Z=KS[Q28@Ja]1JC;lgdLQPfn`AZjcpgTLrL?".F\O/
%s'jFkg;QVa0>u^5;<sGQpfqAiIq5p3Y2Ye9<#+YMZ8P"_DEm7BXbjlYMDb`V/855q2eqp;kF'g4O53Mg?&f[pQ]]#WnBS3!FXEj"
%C4hN%QiR:S);'?In'B"i``/-8_=@oODpr<p!u7Z`DN'ht]R<GSI)#-$Fri+^R9NPCN5OWQ[cr6=_%*`rCV>[Mp`r\rN6W8T9M>ja
%oj_4c/4U_$k-bR?QsrlhT46Jj2D6OH\->ftl+\r%l+ZYah&"+(254[UE^P/:k6h23NR4l?<l1ulc3G9A/\GKT:6sFhNM4Z*V\&tH
%m0GoLZKhW$nCE@g7I*@q`HO??drcQ.@"O<qWiV59)cF'OBe<l4js>SIKi8Qk/QOr@q@g8q^/q0dHrRBLF#t%R+5ErZdtE2!?m]8#
%dhZS4_6r6N5/B<L7%.?g].ViLjKde5;Y1E")R\[oE-1`g7m"&&o#2)G6WDh.>c`%tXR?$307W]F?7_HEp4lVsV%Jq'W3+:7=qiqj
%TBl:LF6`Lbf"]@*XFWWXb[uTg*B^>1K<LR.QbB"&G?F"uUuQ'Qa(2UI$bUV^bshIKnK>eVAk.<Dh,8BWg+ViMrg.2XYR]Po]U(B2
%/G'Pa6Wu!M&$$-J+LN;3e`[*LVh^I8j!,;4!^Vig]TdI3OD`ZJ,_?$;g(gDYK[HFV>W@o!qH!>-+:DuRs4r6n5;`"-8T;<qad(I.
%EL<LHDcLUnYJ^Gk9?na:Y[I6F#V+I[?gC)?=3:jkCt6Vk81SFpASi5B'$jKQP!H^f;8m@_3ZQCk]J@AK?>LjqVd](<DL5Pr.[0)`
%Y-<+27p/V4qVa,[ZZ4mi:WolTgG)$O^=msN_F@$6dQ#bIMD)oUT0t4)<F<qkL3qC?1G]\QJ61qWj,=?#>dFq!Z??77aP[Z3roqe+
%XqjGekqUeVOM!O<\:$Yil?[(T1,n!</kX\qN%TBHU:\V:b/80gV(<ookK"0Z?tk]Z(lCKGVCVjQbeVE05"$KY6gio]q34%P-$Rf6
%/&0NC12E7,)I'falhbnD4FY+A_lWpD-R'[X#%rVpn8Iqj@eM/CX4#0AG"&.2!p:;*<J0C6/l,n3.d+D-KYg"n`+%Q+p2Hp_bO;V4
%B/:?kO`(L!<uNS89SimkeI@:Z@g-q+&lW\DlW\l2g3\E[`&ncX/!4)An+8RhMulkTM>0DVp/KQOEGG!9WTL,cV"F3Pk'G75pIdF`
%Gg_9kJPBR(IHTnafJMZ%!$^2q/W+BrarGtfEjPL5TA[[*T^>-i8.guR5"s\?8@.s6`=lq%a50h_`n0+b$A$%Ak]<eRUT]'98>>:U
%@diK8Eo+*k0eIRf[W09?A!b7P+AsfY*T`F'oT\7BoYeg!L+#VA,7;a#,5k`U&S\iq+25)SFf/7A-G-!_bAFcIUUbKV3%tN!;)<8j
%4/=:-[I5IQCbjqX_:uq*-A6fJ`'_/R[OYKh?edNb.Gfe\pT[S2a+[@OmGlgEo+Ls"*cMojqfA;4p1<(:JnShH46"WE&^3^M6nK#>
%AiYgN45H^?"rPb56)m@YmO+rS("D*V/;cU=%dp4a&e"J&as$bj&('3/ORC^CGTNSMpX'fU.ZmJo(,j#\i]Pt_W(_XY9HKp\&elg7
%q(BcaXW8/\L:2'+%cfupg89TA58uQO+UKcfBe-@%GC%5*>K!XY,V4ZW.J$`PRl`@k8Seri6K"u&W#!(0n=D1SR#[,silJTCLL;'<
%[lCMd+cR>67M>84S.KYuK-u%%q93G&046i7M`&9#iOI1c&2o.,PAouLS)#;#]B&fYJ9bd_\h=Kd_ej0acFth"BpOL1dZA.fbSYbL
%'ob$p,l%_b*eTsdnGQf0iG9$9SjV:$R39R?i2FCYi>r&`KiK>6ZT$\N8EOpEdtR7uPI&#\[%0s@M%NhJLrValK9^TD=<D9rYg2Cs
%:\SG5HF^X(WX(UUd\=Mh)TO/s2re)hT0VH5eF1YG;*0`KLAX2;!'I?UW73+0&*SJDXD(`enBl,s$lGUPoq[Y4fJ'\.@oGKeS.sRW
%p5b]\l`Mk?$@<cGfVA5I(u:]&LtL2sbd3(J6La@5K#r6Z)gAN$*85mW'-dSmfLjPLJa)!LLo/NmjjLBM(W+iQaufpG"1`>B&nN`p
%^'p'@.WF!?QMX%g0(3!aN;34qOk/taeP]T/mG$_HC9CHs/u0X#b;;]b0TQ$#iKV8%OnB,Q24<8/D_oU3KJS></i12Ydl5]@Cj(+j
%OWdjOCSX^QQPFIo/)sRtg3-l)>UYtI]GQ4r:2_bH]H#$U[)oPUS0d)&4S]n+U.Nf4`rrU$Gg&8M&\524Hs"8`XP&3m(EVmFnm7n-
%9r6117LRN"5fD&Wc)F;Wg?=^C!Rg2ZB.chI1?Pf%p1T,36=3$dWmpf/&4m0ciUB"'YL,Eb6#q,/b204jUusRm0<'(iq&GhIWQM'u
%ADgco&'UGgN+=S_G!@R1+1k&@;6]T:O"IOp*?sP;q].,CSXWdiE5oO6)[jdS:)Oe3J.i5lQtOhU0a.kAhiOh2B"?Dh'hrj&j9OrD
%H:d>p`X(*_7r_)bl3ZJp:R/DBA8RX[*4J[3CaF&F=1LKRp39E9S,-n^2L15NRa(JF81rE8NRNQHnO?!rNacKl].]#8R()+Sa07)g
%o7O/9PApc/J%\Y14$g<-o<usd/-^ONUY\fKm+.l\?9X2NF#tEHm5'_%VbkV%Thrs=.+6t6Q_YVl(Bl9D@^:noX^/P_Xcub-^D&OL
%Rn2EFNAt*>XDXD;f11Rc)"Rq%;IeEfL8bQeY"*@NA'q"+Pnuc[al;E4>'HhYeJlW^JA'tuJY'IC&$6bb_Q8d<2Kg&c.Uhm]>:oK?
%AckNJF#9pCFs=)?0pkrKQd2C@G*l4^NS*hmT-6G4]f`R0%ksNog06sLIE:V0Q5'j:befV=I4QnF`ke`nH'n;s`.#J75CWok,tEXF
%]<$UVB#"X3*2am$)`E"gf-YMHfKN5ll,jVSZru=)jM%p^e_K1_^R=YK1rDoI"$,o6@&kAQ)EQP!3].@N*#L:I)]=q%rk+Nn<G(Zl
%dmR@^)F$F1<4Zf/DH*g.rF-:!G9u&7nhQFa!E+Ne82eLH(]^P-`NdDkbB?R@@CkodD)-2&\f086i5@W&*>Ck"hiP.#%mTCN`j1]D
%FP'!$7:Ld!%`"OQ3^]^@:oKQej`F1>/FIkVRuQ3a;;7d8_aQ1q8j.^[d+/SDG,$r8a_gmHo8lU[%lW$a,O"HJ2a.TgLH#r=6RS/9
%%ZPrY-QHjk=PLF/%Z4OX.?"m8RQ;ba'oTAb51;R?nf8kIm;=O40S8gOKhcp>bI1&i&[o-:F$[4P#AD[cbs$nrE9=/dSfthkcJ(AN
%_A1g<dNQ3s6%AC'P?GPb'89W'[:9#,h%KX21?(9W2C+_:ke%QDIErYPFmU:UpkR&%e0E05LhniB2Fg69D,W+uSir5+KZH=la5BDq
%5OQApYE$M<BG(4bM<LW\X+R(X6aBJ]/MntS&@:@bC(rQRoZK5YZ]l+?&=q*oLDf_mf+T(=f+5\g:H+sn/m0NZ<N^VJ+LmR>Gh@b3
%)B=_sTtIQ/e$C(6of,fF]eFlT*1C1U@rPWSpb^EK7LAn>T*U56Tm5>6OIn+;Qa2o.nFU*noSAqSjU-T-7:94?@e4aunN.:4?(h(B
%<Tt9@<LT>kefTf4$U8?4*/uAqh/Ip9*,@D$f\f?AkX"L7P`C-BGU)U&^4KH8!o<%?9"1IodT>qNJ?qup*A1VkA.?R"SM[>["@k<9
%`]I0cI:O+F9GPRTl9KSe2(BhF<5dbBYDfO#JLIBUn`6'F4[]I\6oeeC\A1tH-#-EY\W,33qb`nimLl.t`&$r."JLAHO.ESFA']8<
%Wm1Z%&t)(/0h%)"S?%Yn+&lIm<Gl7\fuLWgL89Oup+OeX2'n6^5I^-?Gl>.4TFk)lTeo[o#GO^,q$hORCF6iGOP+#MrDC"Q>>h2,
%n9)EPLtioc&[DLIol"ONErWf[>MuI.&i=A%gpm5QGH@+>_2LKA9NNPdAjZBLFtLY?I=fPRLKi.=KrBT=o*6I3Oa\,g%]n)n01ciH
%c(CBRC<7>NIr=0dcFI<ApCjL,5uK3#bT]5!ji@oo0Ao#),5:mb\3>CJ4F'KNT0/`.VsD6/1ni*44?gF^it&NakN?nWPHTGC%gGV0
%6!o]-#mS!6=Ak1Lq(6i.UM^lbrm?$\!T'S:G8ltnnhK>cZG+&jgrHU)(QE_nS[A$H":[X<8M:<nH4W^&U?IC.oc<0Yrr11:ql94Z
%9.kc0igASf.lZ4!+u0"Gc3</M?00d)U&IH4"$87YP<'H(96eCm*c`M2]Q5r)rd&$$4[hd133]hqY,NRj!ET+[4l1iX6"sN2QHW(m
%%WbWW(mDQPE!N)u)C<g7ERiM<g$c"*L7L0=*AJTCKBiqGCI@^q<o#,-Qdhc=*u,`N4)BnpX%5cdopBXcPDpC!k.j`Iq3`umq!>Bs
%;l-4%F-."2l<49B;oPu)r^/d#EX1/")rM:@!&mm^`b1&`+*`+JP^88`WT(13]tf+R\d$BjX]K(6dt#V81$g`D@;ZGT&<bR#LA_H]
%eL*gfCMA4J:u#Jp-sh#rDhrT=YrJ7`F0V-r2DU@5G1,n)AS-'=Cqd.4)W%MNs19>9L43Q\Ic\f:k:L:WGRPR\0ErndaPca>(nZr*
%Xl^Jim[J(GH.*M3)\j!Oj*D-Bcm0>,9^`Bg*8'L0)![9HUlB<]0_atlEk)'q%1`N=E%(fr?k?C3K/t*W3s3qumtZ!k(n@?O5>3if
%/\nH:n+*+u#1HWj;pQTX*h&8.6OM_J=o89V>r;ikD%1k&/ThK,V$/X%$W-B^:/fZ.D/s(9PUUl7p8OD64)J!,b"qhs]lg]$/.>ZC
%kb&7:'!0(\QrTW;X4kFbP))iS#l93mg);LEHuBJ\Ut`<DY619:Xs*Z2)iP6adYQ-K>`^gS8fistK4Vjq9eUpG4"VW`W')fr9D1Ah
%`jW,#@Jb'ORbut1mb:g612U:hO=We\P!4)NCs<5TVme@UDQ(,Zc>W0Up$I[+2L?<;:K_Ms!#ak<X<,j&@X`TXX\W:_AFr4.0#Ztm
%:VMt^%O[BiSK7mdFrS>/hqhf-gHTZ\r@QM'5I#E?[q_lr[fJ<XU3B-/gmT&O]V,3P1%'Qe_EI00bf>,7O$1r&^nM4FD*@rP7GU`2
%]V+ag*uFo&i?!+S?G.GtPc$'GTVQ/=0q*HpKe<]I.6*<<&]]'&&*dnc<uhr!'?oL7:L[\?b"rsYgcu?/L_8"&r_D8Y%D&bU4XTo7
%BX9](9UeA4cE\D"^Y?i%hTdr%5X?D15\bgm,#3boC$(O6(N6rF)$Q'ugW_APf(#UtNbedJb%I\,*6R*m*Ni+)^en,f$<M4F8s1UN
%[h73.4Jqi9Nb>W3]6!sdRk4K7p`P#QVDpV;Es<l:+k^Z:H="r^S;5?gBGuf*4ZVTu6P(4]',8<$\00<F+6qK11/#jd)/S>98Q:dr
%1]eR(8RN5@=\e9AW/V,$:RJ5X5CjD+0O"t[gKkC$Tf<1Z]\dmlhot&H9sYYa+RCjnd_enFha"5pHlcB4io`$H.L@@kRYonZE,-Ec
%ht8O2LI?E]Z;i/&8;pOkH$E(n&92hY%&\AK5M,BTS-k(QBHn$!)oR1u(.j76*k<\u7&'3nVX)nQ*gBs9*fCiNM39GF%Z-_4D7<4g
%47p1[qkRT9BTSAE4!7(N96gLJq<)2?):9q/'WmB+:&Nh?MP%Z'&KjBkV#[uSp^,\H*29`/"%B.'idEb+h88bJ7"fC\H/ZL]9lZ$L
%i(;CtJ/m$K&P1jK8L-\.mgW_0ka7[BV.jC`f8!*13PDa4EB40D>%e'GDt#2\HB]d&+Tsmmdqo$)R*jFWTT#6i`s?1sJ/iNkA/=`b
%X#NS."$pP/4T\ibC7oph?)cKho75mdK<ogOVROaoIsQ&m:E,e,LCH?_IH47L1EB4BCh4e[&)sfaA9$:H2bH"2p[35J,hPbUJr4!A
%T/p],:0XPTK/_d*7.G%&h/FX8O];9;4)*Q]G-[<O<#$MoPZqm(ruqT+6W9+hog<B&jgBk,!0O'<hOA(KBt4D)U[+I^RBd,rO]F#:
%#=0FTs%+EHd]FjNGArf`L6uaCA>U%HR[l0C_ICm0kh+6`s#7Nr\'6Z1Kf$6YfmV3keAHHcVb[3h?1ZAI@Joc!DaCpKhJtJ;YYQa!
%)6fQ.;9UQZ?PXHB[mO<4:W?RV4227r&SbL<,)-&$m[_f'7+h^7b./EG)=>fZ[-@/G^Hg:j;_Z:DLCupb]PMn8Zb@S5P$GTX-?DQ<
%F$,q7o:_Nn+0Am.+IG^@KDO0^B4(;9=p/`DR$/3-=mYGp6"ZcA+XYh;$grtnSalba6t92tEX+DLdQ&GsD0:7BE&lJF_+ir\lt3#$
%abZ?JW^HW/MQ*KCTu\dhrA(6:ikP#uBocg#e\5e$Q6/dc-9oc*69$d>m!I]jZeUkeB;23qc2qd:r!aLuaJ'S.7En5[$TW/c7/*B[
%Vg)#(?o$WEKilK?pYgiL:*+nLNsuJ&;A_l[3bW9F;]>VJWp2cA_h'o10?!/FgrB*#LB$3pJ!";,.QM0Lc%hU^4C2JW2!imJU50Yb
%@uR/L85Lqd.$r[6>'cM06GmX#;>lfS\4g@%!\YOM#-bKjHMUU>+#t,n=W2CS7;smnroLiYb'Mp#Hsu?@q/GM&S&cs?]bmT-du#7m
%@3Tp^['9q>?P0gTn)TBE=Z*D"r^NC-c]@ONQ3.`>=AD=fLcE0P1`I)kjbCHI9f5fEO)MPUA2%/?iDOPiJfS#4YSS3s\$e]2%L'%*
%^M(5G[R4ideRh)8Q^SHW<1lZ&0DYGaYGY+Lr$]KL<h";enJI,m3c*rWIcu(H4k-s]ThPLA]*%fD4m:BrT<3t]kl&rk_0:135hu#m
%a@kHMlH4(-CX,8e5b(o_.+=k?Uc`jH\aAtI]6pu)I_E=$QJirF.i-90b7W;\a5J*4c#Ms7J85MAk:Ws=b?l!H;N,IHV^4]E4r't>
%#Q9LN=0t]I.PKa%>nUJoaBZ\bg+.f;%84.SbLjPEo*T*MI(m>08#Lmh%jRgo2J_:jY^p,9YqW(jGo3dSTM*/FL9VR'%TY@FEB'!K
%&O!<GigMHfbXo<7Q\>C37I:oUN+3aIP;:$XX\Y>HpBV8:]oau9Np_gs3ub"G/dK$S'A\TJ3^_/XC)n=k\@kQF`+HR4)`.`0.1X?(
%Z=hP5,/\k-`f^?a+*9@Xc^ePCXUBhei=Y+&K[aU;W)ZqLnr^T9$Od1`,]^9n_,r3T]epVUJna^pc^m^IdAo'TgNjGBVm9#p!UK7`
%RP!Cg,,()@jfpX=QVqtg.u(:9<Z[\0NcKkM?CD68*959s4X5-.o$E:&of^#7psE6@q2q0^_msnl@&TMj`r%OipXNM5QWD_JC%j`.
%S]67l#=X>IXj^&RW,47LF@[VU3XX[i;(RrC_.K^P%tK%]l*KnQ3misg1W_M'b.-W^5gj,70*VLs!`r%IRe<P'E$Hd$n\#r3+E2c4
%6(tMG$G[eO<j>XAF[P\m?E(E<e_RVVfShT_nnKa'cXn.<X(,%pl6Fo;LjCN)@b";1?dNP0%2T?JLj$LsL1ch/L;%-$/EtFI)o827
%/R7&RkC"ik>m!5DBc&JYkg7l?97S+S<L+`J<A-T#WstRA2*\J"c)&rJIb$[.>KuG-N4teF"o;T8hc`1'&\d,#rgbGt=X'Ja0M0*#
%bsP@5]H=]e)[amr4C4O;Yk3K1c]pSb%kUFQ6dFRTK@_a((?CBrkc!C'2B22A>,OOSFV6LjA>nI.bJ6Y8%B^llhm$lVkgC+P7DLkG
%NgI+8=eTK-"8^A2C##?3n">&H?J%Sl57DL3DMf>AG\ZCX$,?(;!C,q6a2K2p>rPTC99H[ibGnP(!EbF*Jr03hB]'VEiXusJrJ^Ik
%@ZV$"Pt_14]9k@E\-6/-@A0HJ9AF@'F*kYX*U2Xi:VMq=4N^5q)3U+@ktO>%HXiap]L8YW9IitoY?Dg^(.F/GF$CYgLeF7jHuCQX
%<,d\`c$4-pn'B0A@p8[3QKp<3\EmJp].DS4)&>P4%QuIYa;U65,2jRhF-93;jLX.<pV9TPmq"h%)06C>#N^DOp?O$`*i6En@dmI4
%mSVTm=8D351Hk+4V.85%)j,cqS;Eh='\026UJnr[\A!HdmhP0o1r/J:@."^eZM)SIFb/]jKIY%oc0kIUF:*9C0Z!mQ[f+oHdXZDS
%>RMS9gTnQ.7pk/j__S`,>$1P2]/FV;^*W+2Hh<BQpTTk<V*OgThLj`L_Kos;TJ0_WhGkA<?;^4(-@&G3n*dLRp",j@:1RnNlZ^ZE
%F`_J=?3Ee?"as3&0;BiP*aKDm!(.N)l.X/Hr&-!$>gin'D(o:)>;6Z!-/fn^T#0Pg)_m^KMWt\38&[dh()ctqc@Gf'3=%2CpZRe0
%74*'W$Z=-3Ce,j7NpT(R-8XH<bQ69d\4;m=5Il-S14T?EZASm`./PRK^()m)R&fR&FJg30d(+_X5p;1prLnP1gOJ%=h#WAQ&5kdE
%q?8,UEkCd2b77%@7f&%9Cm:18muGV+Ju]<jBg%\kRF8PL^WiKOUH`Ud<#s(@:d2;AWR0k2RMicg=);Tk5(';%XS`9e=4qm'YM;[[
%R5h`06$f@-$<3(F,"-X]OoZk;[tcLNU;#FgZU.Y73Vne&G.cjhEQ8/ocbA/qTH:4`,BoO7q_4.@G">:\'^)qo&t`BRIK@Jm"=Q'c
%->=(MKM8kY-FtnV$cYp1L3riACkMF2-RlPr3*)acq/"(:H6`0<pF,eS*UNW=0<@r03ZlSjLoGK`b)h)#Q+(2!(Mn8n,ZB&!=s)K2
%a&2FNpQ^^hZf9&R,D%>YM_n;^NAE>1(&>NH+fk7J7#/^$9TS<@\M$-BOb?7>?^p\]jpKDX4!Xe5k)@QTZ<GsJ5.7n&P/\TU!["9%
%XjgD^-.B=,bsAWmJ#\Ap(V(!sES>(7")$:*lA9BNdItbsRG629/,"0_:K0jaqd9@$8+\A-jn?AprsGBgAsj?Xb1J0k`T.1bYFm,S
%DL[=7!P^_pJ%d3D558?hWr\&Fc2";=*eFJW05(K6^R6FHJ6UBK5Lke(9Too$QYj\j_fD<WQmQu_Yl<']6F?@TofY@Nrt5ZOn81W9
%?G:o9s%qdaIi$8gZ"Aht'(4/Z*_+]]-:)]9N7T">:jij-$sp8m(Nb(RO++2P/p8t\p+WX?9UKnciIqKS!OV+Z@1r"U],l^+/;`h0
%oe:E-P]6$KM8;u$+#`igof`/jHFP,dE-UST-7,c)1XMio@Q1SE/-36<?2l)na^3/eJ!&?Y`QJ[3(s_6bi&ncg7t7=a?eac:@%n@7
%>0JZ&L?MeVG'Y\b`<op;Gf><-\6'a**eL+si:j5+-PLfmj$ZUHj9(+KMDSl\FOb:DYlLiGqb8U=#fE`/_\mSj<RqRXTJ?:SU?;^Q
%c#dVuN`SQ@=M77qm@.XJ3Q$m>a2P8'Wucl\o2X%<LkAr:TA/s;eo/dmg&Y"5c&A5+TltgL%M[ShF=l:CP(>Rqff9a;\A3VHEb.EH
%\61qs.q#E8/9Nff&EL7d&[fg1``**,o9nB['saK0)+pDIlYX@&%ZS'6\jG$UaE>431SFKs5.o,$eLkfq<c^Z&(+qF@ApUp%*-/?.
%ODdFt[\1jW,n"Pq5';Q5%62e<]=Jo&m:E$SWWJb'k1cIU)<o2/2oOW[&GG7u^3lLU':d<O"jB_\j)*0?D'+3-V$>0@UXrnWZEtb\
%"M(8i"f5.X--o[+mSP@jKeB7`g"QlYKh<5,e6;\;KA##mFO=lgf1s&Cj7IQLG.s>f`6TFp_K_@B_A4?e8K`GdD^#f#1(3<BhY8ZI
%f.LpYFc\WN0AZ.LpP"SpT#6A#(d#&$*O-$6D^A&Fk]oH[r-Oeefog<83XL9sPiemYAHUSW(f#sR`Y>Yjr;g&jBP&=Dks9PC'Q%.d
%bfKF*Hj`I[66Bn]rY^)3!ITI=@)XMcNhVqc4uj;YO]"6lk!*3qS:rrD.eA,D(jFm@->=#3GLMf\9l5.mS-O@H:u>B1mY\qPFZ4(=
%,4d>M[b>:(lK7rY:j-348C+X8q5WR.`'LQ6cgCPGc2X-dT+F+kR%ohe/n7UB3-m$uUBoMLB.0B/!C<(o!hWAan!uiC<Ln[t:)r+]
%rU0L+Prg+9$Z^kVbR+,S3L$Ii8XkMhFb-<29@dpsF(:c]R'2\AMPQba$O+q6<=*)-]r;CMFMn;TIgq/'c,n,SrK)Fl,it&-5:ikA
%LU_BZrsPCJ>N4X`=2[a5]_"Yp6A!"3gf22O?HaS^mEG9mG%e86':iWS#:=D8M67En#,G"YEds9gn4a?uGNb1B_=DLI`I<7Cbsd<a
%Rkc.liXOs!VSEUC&(88;fteA[e:=1#EaRHiVGjXpq:J%eUQL[a>Z!r(#&GF$H,?GJQNe_VK74%Qb#Tkc+SS[(m(_I\#<,:0Xa,dQ
%l<*NDSjPCE6dH-d3S5.Z.t0=:a@5Rtr7cdjIm)<f4e1kno(7n$N]971eXV=QaIhfpmCAbRnD^@b(Oj%AKL@,$fT$-,([uIJHaN3'
%_T<$JT]@>):3D11:3Ap"Tl^9TT<B`=Ljj_VO`dTe2W]iF6ne[RB>mC^08HcnSkul1(KL/'2)I!tRO1fclh!Q^6]lWod/F2TY%-7#
%O7/eihuOf$[5)g)N9WO7`h1n'($@3gnZFhV-?3GP8t9t,)XOu-q/.tOrS"*&T";l6A(.3HXe$Gb[(FUfTYIs#\)n&H$#k)"3<iiL
%:bd$<L)p&@Sl[b)@HtKt\4;m=YP7N1"4q/\1p^Hp_(\aPm_Db(igC]I'bF%&BamuVWCml;pgm)&nJ&HKUu!%!lO5a]G$9td7JgXQ
%c@-DY=^WC5q3CPnRg+C7-Vs"lo)b?ti[o?,]%5Ji,SK?F%_f1]FO_dC#/NsgEPZs;A40gu/gRJZUA5e!^>n-+*i,31?0oBpBf@];
%K?ch55[?ZuA1LQ;j9!q0c$EX\hVuVIkuroW.k<@FlAoEo\Q)q]/T>k&qV$qJ.`[MeM=[!\\1GpEUs2l->37k.8L**\X\g2'nS+r$
%.2=c$=&3i@pV(*;a#X;.*#O-/[BZoTUG_/Y.YTubD'TriOdQmq1:ZSo<KZuO8Z#FY3GLGV68PCG`DZ/T_%$s2*$!BnSg;q6=kUXM
%6)/C#dPB;WXB<a_s"tdO8pi#lq+7;-5uM_1c0?"'G--)9b)^^[,Rj.,BrkTabX;c?h]0'cG^\t6@[/a)Ct/d%Z]V2#essZoQFD=O
%&ZM0W9nLn7"drnCL<XV:GfA0Om9^CLO`4[R+`kW<c&_^:7:g.GHP>u,oPrWpaePVbkI.Y'7,<Ul]O,DXn"j4MgYRm(%WnARMopQf
%+EL])Oc:;bPRE'&"a7$Z96h7(h/%X$`Y&G1"L)17&dP->ECXR4#$@p[&5Q.2E@!ZM-q,4;GY%6SQI[Ypq5'it/M<Lu%XWC@a%0]i
%R"n&tpO45RI7f,b"g+EFqVlX)G)s.:9Fu-2N(e(Y;a5(*CL!t_Lbd,<U,EpGTR1"Q9[NWShoc[d[003/Jj?r**QsGC+\5"f'th2.
%<D4R&R)uP^DkOm6:a!6bEN=gYALo/lS*(MQ1:M"DbaHEMiTI#@R+(2CG5YfFk0G==3lWYNVI0,Z#2R>sE+"<&##>sn%qCa\lmgQ6
%d3>IfSNRm+ZRr',`>T\IL8W?8MrTT3A]o6JPT"2C;k$F!p#?SAb[;<TOYB%l]@]lGZ@[Fp7;!?uBQFO$R2d--O%NQG_-VB=f2[TD
%lMF$#k#dakO@cp$o@QH`!4Uq8Ju8FR.j`W+k^op@;,2`_;,N>BWhmc,6C>p.+8k^lFr+fZJagd+\5#2=3#l2D5E1`MkQmL)Qu!iO
%9#Qa`.O-0X8b2OfTZG61V$6:bd=EPlqNV(Yl,rZ:r4>1\bTN7W:GVm"6XY#kr.bR(c6>.2Ir'p%B%N$$pMdW+fG5$_f!Z4GKW$WJ
%;:chM"ji*VS>(>=G3MNFf:[aX`^VS),0Z)[2$3AG8Trp(VL!jCDe:n@nfrp+;pI/&_]:GP;&"pePB1([c(DWEpRaV+Igl7<#8)&O
%b+Y&^q7S6/B*.$`=P2jm\@3F#VYg32?/NCf+%NfnKA:JiK<X8A"Nn0JmLDC`-l?T\[K\,<*aKD-/.h!Bn'sK;OdQW[%gsfi3N>C+
%M$o#X[?BPggfS*6o+2<rK>Vc(a>Me?YnK(;j'9+s_RFcHA;6AQ+!.G4(UkMgY!Y\_Qak_-kOuL3ci#^PeimWk%EFbT$8&?Rk.lDc
%N4C##[9>!,EqLBY(O,)"k0#W<h\Nh1],rq(C%&tlaHsNc=huD%2WLdM?bdM1=rGKn*<DWF@R>l13FHej#91Hm,F1a0#MP2Vd(e[p
%>YE`>.oUZ\Ed/<d$4)7@nOu`!kRtWU_E6s5Z]gLUK`/D\"&^l\6=BZQ[m<=F*CV_&h),2\.o[VpK"AQ'/eKf*6_2gIBeA:H@eM0Q
%k*&V(`pG0_lA)\2F(S,l)N>Cl(\k?0o8DA%ef9W1),.TeSbP6\5!O4>6qpbHC(4P+,_!\Z[a==_lKHV%kV0L[<>,0)%L\q](4%P1
%<*oY`Lbs2e4gK1bf<G[Hjhf"O`<=t,0#N/GN?TG`dj49(ic()1,g/SqR<@XBX4[gF%VK`hSS\SCOgBoDIbTR+Mq[Z%S1-G?@ppqI
%/lFCmftt9q@:8tC$?I?`HR&E2hqt2%^gqBol]:uSD(N$(X>15J0.8`lQ;*Dq-/>7j_Q,Ud&;'W)d/;53`PrsJ6I./c[7Qli$2<YH
%n@DFK*,+"6I)bu@F6ZTsLk4_(9O_EnrRZ8Gr:i]b,,i)bOSmJ:.K[.rlPA\fikE/t?f/^EA'Up)LpV"F>[-DWhj3s64o.Z#r1AJ*
%TAh5rGi'88+9tc6>%g(UUYB2u;+&Y3cD)^uQoYrci'q2H&qIlboLA*f/^U-H:_J`kMfIR56[KD$,]C[qd1/>+E*Sk-0=;ZmcJR3*
%EFk8ka6+",$Z.Z,!X09PK!4&re_l5?=$M0DJ<1m;p'tQT6]DWDi,?MCPPYHV.8d)1*CNfOW8/nQ5>CO=e"<]1k?#l+/E[OmGQ,($
%pRhHa^\R?ms7JVVj8X<%jkp+7cYm_Bq"t*]0E:Ons660UnpgS0J,SQFqbR7]07Wf,^OH('5Q9\-rTdhiornBss3nH,pufEkbJ4&*
%5QCE2^\mR#o`"p-8+VAJs82io5Q#_TpRhFl*9hK'~>
%AI9_PrivateDataEnd
