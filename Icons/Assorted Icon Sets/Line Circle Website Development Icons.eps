%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Line Circle Website Development Icons.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For:  
%%CreationDate: 12/5/2016
%%BoundingBox: 0 0 600 600
%%HiResBoundingBox: 0 0 600 600
%%CropBox: 0 0 600 600
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 20807 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFD17FFAFFD7CFFA9A984AF85A984AFFD10FFA9A984
%AFA9A984AFAFFD0FFFA9A984AF85A984AFAFFD0FFFA9A984AF85AF84AFAF
%FD0FFFA9A984AF85AF84AFAFFD15FFAF85FD07FFA9AFA9FD0CFFAF85FD07
%FFA9AFA9FD0CFFAF85FD07FFA9AFA9FD0CFFAF85AFFD06FFA9AFA9FD0CFF
%AF85AFFD06FFA9AFA9FD12FFA885A9FD0AFFAF84FD09FFA885A9FD0AFFAF
%84FD09FFA885A9FD0AFFAF84FD09FFA985A9FD0AFFAF84FD09FFAFA984FD
%0AFFAF84AFFD0FFFAFAFFD0EFF85FD07FFAFAFFD0EFF85FD08FF8BFD0EFF
%85FD08FFAFAFFD0DFF85FD08FFAFAFFD0DFF85FD0FFF85AFFD09FF85A984
%AFFFAF84FD06FF85A9FFFFFF84A9858560AF85A9A9FFFFAF84FD06FF85A9
%FFFFAFA9FFA9FFA9FFFFFFA8FFFFFF84FD06FFA9A9FD05FFA985A8FD07FF
%84FD06FFA9A8FD05FFAFAFA9FD07FF84FD0DFFAFAFFD0AFFAFFFFF85FFFF
%AFA9FD04FFAFA9FFFFFFA985A9AF85A985AF85AFFFFFFFAFA9FD04FFAFA9
%FF85AF85A9A98585AF85AF858585AFFFAFA9FD04FFAFA9FD04FFAFFD0585
%AFFD05FFAF85FD05FF85FD05FF85AFA9AF85FD07FF85FD0CFF84FD07FF84
%AF84A984FFFFA9A8FFA985FD04FF84FD04FFAF84FFA8FD04FF8584FFFFFF
%AF85FD04FF84FFFFA9AFFFAFFFA8FD05FFA9FF84FFFF85A9FFFFFF84FD04
%FF8584A9A8AFA9A98485FD05FF85A8FFFFFF84FD05FF84AFFD04FF84FD06
%FFA9A8FD0AFFA9FD08FFAFFFFFA9AFFFFFA9FFFFFFA9FFFFFFA9FD05FFA9
%856185FD04FF85A9FD04FFA9FFFFFFA9AFFFFF85FFFFFFAFFFFFFFAFFFFF
%FFAFAFFFFFA9FFFFFFAFAFFD04FFA9AF85AF85AF85AFA9AFFD04FFA9AFFF
%FFAFAFFD04FFA9FD07FF85FD05FFAFAFFD0AFFA9A9FD07FFA8FFFFAF84FF
%FFA9A9FFFFAFA8FFFFA9A9FD04FFAF84A984AFFFFFFF8585FD04FFAF84FF
%FFA9A9FFFF8584AF85AF84AFA9A9A8AFA9A984FFFFFF84FFFFAFA9FFFFFF
%84FFAFAFFFA9AFAFA9FF84FD05FF84FFFFAFA9FD04FFAFFD07FFAF85AFAF
%FFFFFF84FD0AFFA9FFFFFFAFAFA9AFA9FFFFFFA9AFFFFFA9FD04FFAFFFFF
%A9FD05FFA9AFFFAF85FFFFAF5AAFFD05FFAFFFFFA9FFFFFFA9FFFFFFA9FF
%A9FFFFAFFFFFAFAFFFFFFFAFFFFFA9FD04FFA9AFAFA9FF85FFFD0485A9FD
%04FFAFFFFFA9FD04FFAF85FD09FFA9A9A9FFFFAFAFFD08FFA8AFFFFFFFAF
%84FFA885A9FFA8AF84FFFFAFAFFFFFFF84FFA8AFFD05FFA984FFA9A98485
%608584FD05FFA9FFFFAFAFFFFFAFAFFFA9FFFFFFA8FFA9FFA8FF84FFFFFF
%84FFFFAFA9FFFFFF84AF84A9A9855A85A9FFFFAF84AFFFFF84FFFFAFA9FF
%A88584AFFD0BFF85A8FF84FD0AFFA9FFFFFFAFAFFFFF85FFFFFFA9AFFFFF
%A9FD04FFAFFFFFA9FD05FFA9AFFFFFA9AF85AFA9AFA9FD04FFAFFFFFA9FF
%FFFFA9FFAFFFAFFFAFFD05FFAFAFFFFFFFAFFFFFA9FD04FFAFFFFFAFFFA9
%AFFD04FFA9FFA9FFFFAFFFFFA9FFFFAFFD0EFFAFAFFFAFAFFD08FFAFAFFF
%FFFFAFA9FFA9A9A9FFA9AFA9FFFFAFAFFFFFFFA9FFFFAFAFFD04FFAF84FF
%FFAF5AA9A9FFFFAFAFFFFFFF85FFFFAFAFFFFFAFAFFD05FFAFFF85FFAFFF
%85FFFFFF85FFFFAFAFFFFFFFA9AFA985A98584AFA9FFA8AFA9AFFFFF85FF
%FFAFAFAF84FD0FFFA8FF85FD0AFF85FFFFFFA9AFFFFF85FFFFFFA9AFFFFF
%85FFFFFFA9FFFFFF85FD05FFA985FFFF858585FFFFFFA9FFFFFFA9AFFFFF
%A9FFFFFFA9FFAFFFA9FFAFFFA9AFAFFFA9AFFFFFA9AFFFFFA9FD05FF85A9
%85FFA9AF85FF85AFFFAFFFFFAFAFFFFFA9AFAFFD10FFAFFFAFFD0AFFAFA8
%FFFFAFA8FFA985A8FFAFAF84FFFFA9A8FFFFA9A8FFFFAF84FD04FFAF60AF
%A8AF8485FD04FF84FFFFA9A8FFFFAF84FFFFA9A8FFFFAFA9FFA9FF84FFFF
%FF84FFFFA9A8FFFFFF84FD05FF84855A856085AFAFA9FF84FFFFA9A8FFFF
%FF84FF84FD0EFFAFA9AFA8FD0BFFAFFFFFA9AFFFFF85FFFFFFA9AFFFFF85
%FFFFFF85FD04FFAFFD04FFA9AFA9FFA9AF858BAFFFFF85FFFF85FD04FFAF
%FFFF85FFAFFFA9FFAFFFAFFFAFFFA9AFFFFF85FD04FFAFAFFD05FFAFAF85
%AFA9AFFFFF85FFFFFF85FD04FFAFAFAF85FD0CFFAFA9FF85FD0CFFA8AFFF
%FF84AF85AF84AF85AF84AF85AFFFFF85FD05FFA9AFFD04FFA9AFA9AFA9AF
%84858585A9FF85FD05FFA9A9FFAF84AF85A984AF85A984AF85A9A8FF85AF
%FD04FFA9A9FD0AFFA9A985FFFFFF85AFFD04FFA9A9FFAF84AF85A984AF85
%A984AF85A9A8FFA9AFFD0DFF85FFFFAFA9AFA9AFA9AFA9AFA9AFAFFF85AF
%FD06FF85AFFD0BFFAFFFFF85AFFD06FF85AFFD0EFFA9AFFD06FFA9AFFD0E
%FFA9AFFD06FFA9AFFD0EFFA9AFFD0FFF84AFFD0CFF84AFFD08FF84AFFD0C
%FF84A9FD08FF84AFFD0CFF8485FD08FF84A9FD0CFFA9A9FD08FF84A9FD0C
%FFA985AFFD10FFA9AFAFFD09FF85AFFD0AFFA9AFAFFD09FF85AFFD0AFFA9
%AFAFFD09FF85AFFD0AFFA9AFAFFD09FF85AFFD0AFFAFAFA9FD09FFA9AFFD
%13FFA9A984AFAFFFA9FFA9A984FD0DFFA9A984AFAFFFA9FFA9A984FD0DFF
%A9A984AFAFFFA9FFA9A984FD0DFFAFA984AFA9FFA9FFA9A984FD0DFFAFA9
%84AFA9FFA9FFA9A984FD18FFA9AFA9AFA9FD13FFA9AFA9AFA9FD13FFA9AF
%A9AFA9FD13FFA9AFA9AFA9AFFD12FFA9AFA9AF85AFAFFDFCFFFD1CFFA9A9
%84AF85A984AFFD10FFA9A984AF85AF84AFFD10FFA9A984AF85A984AFFD10
%FFA9A984AF85A984AFFD10FFA9A984AF85A984AFAFFD15FFAF85FD07FFA9
%AFAFFD0CFFAF85AFFD06FFA9AFA9FD0CFFAF85AFAFFD05FFA9AFA9FD0CFF
%AF85AFAFFD05FFA9AFA9FD0CFFAF85AFAFFD05FFA9AFA9FD12FFA885A9FD
%09FFA9A984FD09FFA885A9FD09FFAFAF84FD09FFA98585FD0AFFAF84FD0A
%FFA984FD0AFFAF84FD0AFFA984FD0AFFAF84FD10FFAFAFFD0DFFAF85FD08
%FFAFAFFD0DFF85FD08FFAFAFFD0DFF85FD08FFAFAFFD0DFF85FD08FFAFA9
%FD0DFF85FD0FFF85A9FD0EFFAF84FD06FF85A9FD0EFFAF84FD06FF85A9FD
%0EFFAF84FD06FFA9A8FD0FFF84FD06FFA9A8FD0FFF84FD0DFFAFAFFD05FF
%AFFD0AFFAFA9FD04FFAFA9FFA9AFA9AFA9AFA9AF85AFA9AF85FFFFAFA9FD
%04FFAFA9FD10FFAFA9FD05FFA9FFA9AFA9AFA9AFA9AF85AFA9AF85FFFFAF
%A9FD05FF85FD05FF85AFA9FD08FFAF85FD0CFF84FFFFFFA9AF84AF84A9A9
%FD07FFA9A9FD04FF84FFFFA984A984AFA8AFA9AFA8AFA9A984FFAF85FD04
%FF84FFFFAF84AFA9AFA8AFA9AFA8AFA9AFA8FFFFA9A9FFFFFF84FFFF8584
%AF84A9A8AFA9AFA8AFA9AF84FFFF85A9FFFFFF84FD04FFAF5AA9848584FD
%08FFA9A8FD0AFFA9FD04FFAFAFFD04FFAFA9FD07FF85FFFFFFA9FFFFFF85
%AFA9AFA9AFA9AFA9AFA9AF85AFFFFFA9FFFFFFA9AFFFFF8585AFFD09FF85
%AFFFFFA9FFFFFFAFAFFFFF85AFA9AF85AFA9AFA9AFA9AF85AFFFFFA9FFFF
%FFAFAFFD04FF85AFA9AFAF85A9FD07FFA9AFFD0AFFA9A9FFFFA9A9FD05FF
%A98584AFA9FD04FFAFA8FFFFA9A9FFFFAFA9FFA9FD09FF84FFFFAF84FFFF
%A9A9FFFFAFA9A9AFFD07FF85AF84FFFFFF84FFFFAFA9FFFFA9A9FFFFFFA9
%AF85AFFD04FFA9FFFFFF84FFFFAFA8FFFFFFA985845B368584A9FD08FF84
%FD0AFFA9FFFFFFA9FD05FF85FD04FFAF85FD04FFAFFFFFA9FFFFFFAFFF85
%AFA9FD08FFAFFFFFFFAFFFFFA9FFFFFFA9FFFFAFAFFD04FFAF85FFFFAFFF
%FFFFAFFFFFA9FFFFFFA9FD04FFAF8585A9FD04FFAFFFFFFFAFFFFFA9FD05
%FF84AF5B6185A985FD08FFAFFD09FFA8AFFFFFFFA9FD04FF84FFA8FFA9FF
%A9AFA9FFFFFF84FFA8AFFFFFA9AFA9AFA8AFA9AF84AFA9AFA9FF84FFFFFF
%A9FFFFAFAFFFFFAFAFFFFFA984FFFFAF84FFFFFF84FFFFFF84FFFFAFA9FF
%FFAFA9FFA9AF84856085A9FFFFFFA9FFFFFF84FFFFAFA9FD04FF8584FFA9
%A95AFD09FF84FD0AFFA9FFFFFFAFAFFFFFFFAFAFFD0485AFFFAFFFFFFFAF
%FFFFA9FFFFFFAFFF85AFA9AFA9AFA9AFA9FFFFAFFFFFFFAFFFFFA9FFFFFF
%A9FFFFFFA985A9AF85AFFFFFFFAFFFFFFFAFFFFFA9FFFFFFA9FFFFFF85AF
%85AF85AFA9FFFFAFFFFFFFAFFFFFA9FD05FFAFFD0485AFAFFD08FFAFAFFD
%08FFAFAFFD04FFA9AFA8AF84FFA9FFAFFFAFAFA9FFFFFF85FFFFAFFFFFFF
%AFAFAFA9FFA9AFA9FFA9AFAFFF85FFFFFF85FFFFAFAFFFFFAFFFFF84AFFF
%AFA8FFA985AFFF85FFFFFF85FFFFAFAFFFFFAFAFFFA9855A85848560AFFF
%FFA9FFFFFFA9FFFFAFA9FD07FFA9FFFF8585AFFD06FF85FD0AFF85FD05FF
%85AFA9AF85FD05FF85FFFFFFA9FFFFFF85FFFFFFA9FFA9AFA9AFA9AFA9FF
%AFFFAFAFFFFFA9AFFFFFA9FFFFFFA9FF85FD08FFAFA9AFFFFFA9AFFFFFA9
%FFFFFF85FFFFAF858585A985AF85FD05FFAFAFFFFFA9AFFD0AFF85FFA9AF
%FD04FFAFAFFD0AFFAFA8FFFFFFA9FD05FF84A984A984FD04FFA9A8FFFFAF
%84FFFFAFA8AFA9AF84AFFD06FF84FFFFA9A8FFFFAF84FFFF855AAFA9AF84
%AFA9AF84AF856184FFFFA9A8FFFFFF84FFFFA9A8FFA985848584858485FF
%FFA8FFFFA9A8FFFFFF84FD0BFF84AF85AFFFFFFFAF84FD0BFFAFFD0DFFAF
%FD04FF85FD04FFAFFFFFA9AFA9AFA9AFA9AFA9AFA9AF85AFFFFF85FD04FF
%AFFFFFAFFFAFFFA9FFAFFFA9FFAFFFAFFFFFFF85FD04FFAFFFFF85AFAFAF
%A9AFA9AFA9AFA9AFA9AFFFFF85FD04FFAFAFFD0BFF85A9A9FFFFFF85FD0C
%FF84AFFD10FF85FD05FFA8AFFFFFA9FFA9AFA9FFA9AFA9AFA9AFA9FF85FD
%05FFA9AFFD10FF85AFFD04FFA9A9FFFFA9AFA9AFA9FFA9AFA9FFA9AFA9FF
%85AFFD04FFA9A9FD0CFFA9FFFFFFA9AFFD0DFF85FD0FFF85AFFD06FF85FD
%0FFFA9AFFD06FF85AFFD0EFFA9AFFD06FFA9AFFD0EFFA9AFFD06FFA9AFFD
%0EFFA9AFFD0FFF84AFFD0CFF84A9FD08FF84AFFD0CFF84A9FD08FF84AFFD
%0CFFA9A9FD08FF84AFFD0CFFA985FD08FF84A9FD0CFFA985A9FD10FF85AF
%FD0AFF85AFFD0AFF85AFFD0AFF85AFFD0AFFA9AFFD0AFF85AFFD0AFFA9AF
%AFFD09FFA9AFFD0AFFA9AFAFFD09FFA9AFFD13FFA98584FFAFFFA9FFA9A9
%84FD0DFFA9A984FFAFFFA9FFA9A984FD0DFFA98584FFAFFFA9FFA9A984FD
%0DFFA9A984FFAFFFA9FFA9A984AFFD0CFFAFA984AFAFFFA9FFA9A984AFFD
%17FFA9AFA9AF85AFFD12FFA9AFA9AF85AFAFFD11FFA9AFA9AF85AFAFFD11
%FFA9AFA9AF85AFAFFD11FFA9AFA9AF85AFAFFDFCFFFD1CFFA9A984AF85A9
%84FD11FFA9A984AF85A984FD11FFA9A984AF85A984FD11FFA9AF84AF85A9
%84AFFD10FFA9A984AF85A984AFFD16FFAF85AFAFFD05FF85AFAFFD0CFFAF
%85AFAFFD05FFA9AFAFFD0CFFAF85AFAFFD05FFA9AFA9FD0CFFAF85AFAFFD
%05FFA9AFA9FD0DFF85AFAFFD05FFA9AFA9FD12FFA885A9FD09FFA8A984FD
%09FFA9A984FD09FFA9A984FD0AFFA984FD09FFA9AF84FD0AFFA984FD09FF
%AFAF84FD0AFFAF84FD0AFFAF84FD11FF8BAFFD0CFFAF85FD08FFAFAFFD0C
%FFAF85FD08FFAFAFFD0DFF85FD08FFAFA9FD0DFF85FD08FFAFA9FD0DFF85
%FD0FFF85A9FD07FFA9AF85FD04FFA984FD06FF85A9FD04FFAF85A984AFA9
%FD04FFAF84FD06FFA9A9FD0EFFAF84FD06FFA9A8FD0EFFAF84FD06FFAF84
%FD0FFF84FD0DFFAFA9FD07FFAFA9AFFF85FD04FFAFAFFD04FFAFA9FFFFFF
%AFA9A9FFA9AFAFAF85FD04FFAFA9FD05FFA9FFFFFFAFFFA9FFAFFFA9FFAF
%FFA9FFFFAFA9FD05FF85FFFF8585FD0CFFAFA9FD05FF85FFAFAFA9AFA9AF
%A9AFA9AFA9AFA9FFFFAF85FD0CFF84FD08FFAFA9FFFFAFA9FFFFFFA9A9FD
%04FF84FFFFFFA885A9FFFFAFA9FFFFFF84FFFFFFA985FD04FF84FFFFA984
%858485848584858485848584FFFF85FD04FF84FFFFAF60A9AFFD0CFF85A9
%FFFFFF84FFFFA984AF84A9A8AFA9AFA8AFA9AF84FFFF85A8FD0AFFA9FD09
%FFAFAFFFFF85FD05FF85FFFFFFA9AFFFFFFFAFFD04FFA9FD05FF85FFFFFF
%85FFFFFFAFAFFFFF85AFFD04FFAFFD05FF85AFFFFFA9FFFFFFAFAFFFFFFF
%AFFD08FF85FD05FFA9FFFFFFAFAFFFFF85AFA9AFA9AFA9AFA9AFA9AFA9AF
%FFFFA9AFFD0AFFA9A9FD08FFAF84AF84AFFD05FFAFA9FFFFA9A9FFFFAFA8
%FD04FFAFA9FD04FFAFA9FFFFAFA8FFFFA9A9FFFFA984FFFFFF84AF85A9FF
%FFFFA984FFFFFF84FFFFAFA9FFFFFF84FD07FF84AFA9FD05FF84FFFFAFA8
%FFFFA9A8AFA9FFA8AFA9FD05FF84FFFFFF84FD0AFFA9FD05FFA9FFFFA9A9
%FD09FFAFAFFFFFA9FFFFFFA9FD05FFA9FFFFFFAFFF85AFFFFFFFAFFFFFA9
%FFFFFF85AFFFFFA9FFAFAF85AFFFFF85AFFFFFFFAFFFFFA9FD04FFAFAFFF
%FFAFA9FFFFAFA9FD06FFAFFFFFA9FFFFFFA9FFA9AFAFAF85AFAFFFAFFFFF
%AFFFFFFFAFFD09FFA8AFFD04FF84AF8485A9FD0BFF84FFA8AFFFFFAFAFFD
%05FFA984AF84A9A8AF84FFFFFFA9FFFFAFAFFFFFA984FFFFAFA9FF5A85A9
%FFFFA984FFFFFF84FFFFAFA9FFFFFF84FFFFFF848584A984AFA8FD05FF84
%FFFFAFA9FFFFAFA9FFA8AFA9A984AF84A9A9FF84FFFFFF84FD0AFFA9FFFF
%FFA9FFFFFFA9FD0CFFAFFFFFA9FFFFFFA9FD05FFAF8585FD04FFAFFFFFFF
%AFFFFFA9FFFFFF85AFFFFFFFAFFFAF61FFFFFF85AFFFFFFFAFFFFFA9FD04
%FFAFA9FFA9FFA9AFA985AFFD06FFAFFFFFA9FFFFFFA9FD05FFA9FFAFFFA9
%FFFFAFFFFFFFAFAFFD08FFAFAFFFFFFFAFA9FFFFAF85FD05FFA9FD05FFA9
%FFFFAFFFFFFFAFAFFD05FFAF8584AFFFFFA9FFFFFF85FFFFAFAFFFFFAF85
%FFAFFFA9A984FFFFFFAFA985FFFFFF85FFFFAFAFFFFFFFA9A9A885A9A984
%FF84AFA9FD05FF85FFFFAFAFFFFFAFA9A984FFA9A9A9FD05FF85FFFFFF85
%FD0AFF85FFFFFFFD04AF85AF85AFAFAFA9AFA9FFFFFFA9FFFFFF85FFFFFF
%A9AFFD07FFAFA9AF84FFFFFFA9AFFFFF85FFFFFF85AFA9AF85AFA9AFA9AF
%A9AF85AFFFFFA9AFFFFFA9FD04FFAFA9FF85FFA9AFA985AFFD05FFAFAFFF
%FFA9AFFFFF85FFFFFFA9AFA9AFA9AFFFFFFFAFFFFFAFAFFD0AFFA9A8FFFF
%FFA8AFA9FFFFFFA985A8FFFF85A8FFFFA9A8FFFFAF84FFFFFF84FD07FFA8
%AFA985FFFFFFA9A8FFFFAF84FFFF8584AFA9AFA88584AFA8AFA9A984FFFF
%A9A8FFFFAF84FFFFFF84AFA985A8AF84AF84FFA9FD04FFAFA8FFFFFF84FF
%FFA9A8FFFFA9A8AF84A984AFA9FF84FFFFAF84FD0BFFAFFD0AFFA9FFFFFF
%85FFFFFF85FD04FFAFFD04FF85FD07FFA985FD04FF85FD04FFAFFFFFA9AF
%A9AFA9AF85AFA9AFA9AFA9AFFFFF85FD04FFAFFFFFFFAF8585618BFD0585
%A961AFFFFF85FD04FFAFAFFF85AFAFFFA9AFA9AFA9AFA9AFA9AFFFFF85FD
%0CFF84AFFD09FFAF84FFA9A9FFFF85FD05FF84AFFD04FF85AFA9FFAFFF84
%AFFD04FF85AFFD04FFA8AFFFFFA9FFAFFF60AFA985A9FFAFFFFFFF85AFFD
%04FFA9AFFD04FFA9FFA9FFAFFFA9FFA985A9FFA9AFFD04FFA9A9FFFF84AF
%A9AFA8AFA9AFA8AFA9AFA9FFA9A9FD0DFF85FD0AFFAF85AFFFFF85AFFD06
%FF85FD05FFAFAFA9AFA9FD05FFA9AFFD06FF85FD05FFAFAF85AF85FD05FF
%A9AFFD06FF85AFFD0EFFA9AFFD06FFA9AFFD0EFFAFAFFD0FFF84FD0DFF84
%85FD08FF84AFFD0CFFA9A9FD08FF84AFFD0CFFA985FD08FF84AFFD0CFFA9
%85A9FD07FF84AFFD0CFFA985A8FD10FF85AFFD0AFF85AFFD0AFF85AFFD0A
%FFA9AFFD0AFF85AFFD0AFFA9AFFD0AFFA9AFFD0AFFA9AFFD0AFFA9AFAFFD
%09FFA9AFFD13FFA98584FFAFFFAFFFA9A984FD0DFFA9A984FFAFFFAFFFA9
%A984AFFD0CFFA98584FFAFFFAFFFA9AF84AFFD0CFFA98584FFAFFFAFFFA9
%AF84AFFD0CFFA9A984FFAFFFAFFFA9AF84AFFD16FFAF85AFA9AF85AFAFFD
%11FF85AFA9AF85AFAFFD11FF85AFA9AF85AFAFFD11FFA9AFA9AF85AFAFFD
%11FFA9AFA9AF85AFAFFDFCFFFD1CFFA9AF84AFA9A9A8FD11FFA9AF84AFA9
%A9A8FD11FFA9AF84AFA9A9A8FD11FFAFAF84AFA9A984FD11FFAFAF84AFA9
%A984FD17FFAF85AFAFFFAFFFAFAF85AFAFFD0CFFAF85AFAFFFAFFFFFFF85
%AFAFFD0DFF85AFAFFFAFFFFFFF85AFAFFD0DFF85AFAFFFAFFFFFFF85AFAF
%FD0DFF85AFAFFFAFFFFFFFA9AFA9FD12FFA9A984FD09FFA885A9FD0AFFA9
%84FD09FFA8A984FD0AFFAF84FD09FFA8A984FD0AFFAF84FD09FFA9A984FD
%0AFFAF84FD09FFA9AF84FD11FFAFAFFD0CFFAF85FD08FFAFAFFD0CFFAF85
%FD08FFAFA9FD0CFFAF85FD08FFAFA9FD0CFFAF85FD08FFAF85FD0DFF85FD
%0FFF85A9FD07FFAFFD06FFA9A8FD06FFA9A9FD07FFA9FD06FFA984FD06FF
%A9A8FD06FFAFA9FD06FFAF84FD06FFAF84FD0EFFAF84FD06FFAF84FD0BFF
%A8FFFFAF84FD0DFFAFA9FD07FFA9FD08FFA9AFFD04FFAFA9FD05FFA9AF85
%85A9FD06FFAFA9FD05FF85FD07FFA9AFA9FD06FFAFA9FD05FF85FD10FFAF
%A9FD05FF85FD0BFFAFA9A9FFFFAFA9FD0CFF84FFFFFF84AF84A9848584A9
%84AF84AFFFFFA9A9FD04FF84FD05FF84A9FFAFA9FF84AFFD04FFA9A9FD04
%FF84FD04FFAF84A984FFFF85848584FFFFFFAF85FD04FF84FFFFFF84AF84
%A984AFA9AF84AF84AFFFFFFF85A9FFFFFF84FD07FFA8AFA9FFA9A9A9855A
%FFFF85A9FD0AFFA9FD04FFAFFFFFAFFFFFFFAFFFFFFFA9FFFFFF85FFFFFF
%A9AFFD04FF85FFFFFF8585A9FFAFAFFD04FF85FFFFFFAFAFFD04FF85FFAF
%FFA9AFA9FFFF85AFFFFFFFA9FFFFFFAFAFFFFFFFFD0485AFA9AFA9AFA9AF
%85FFFFFFA9FD04FFAFFD05FFAFA9AFAFAFA9AF858585FFFFFFA9AFFD0AFF
%A9A9FFFFFFA8FD05FF84A9A9FFFFAFFFFFFFAFA8FFFFA9A9FFFFFF84AFFF
%A98485858584FF85AFFFFFFFAFA8FFFFA9A9FD04FFAFFFAF84FFA9A9A8FF
%85FD05FF84FFFFAFA9FFFFFF84FFA9AFA9FFAFAF84FFA9A9FD04FF84FFFF
%AFA8FD04FFAFA9AFA8FFA9AF8485A9FD05FF84FD0AFFA9FD04FFAFFFFFFF
%AF85AF8585A9FFAFFFFFFFAFAFFFFFA9FD04FFAFFFAFA9AFFFFFA9AFA9FF
%A9FD04FFAFFFFFA9FD05FF85AF85FD04FFAFA9AFAFFD04FFAFFFFFA9FFFF
%FFAFAFA9AFA9FFFFAF618560AFA9FD04FFAFFFFFA9FD05FFA9AFA9AFA9FF
%85A9A9FD06FFAFFD09FFA8AFFD04FFA9FFA8858485848584AFA9AFFD04FF
%84FFA8AFFFFFFFAF84AF84AF84FFA885A985A885AFFFFFFFA9FFFFAFAFFF
%FFAF84FF84FD05FFA9AFFFA9A9FFFFFF84FFFFAFA9FFFFFF84AF84A98485
%5AAFFF855AAFFD04FF84FFFFAFA9FFFFFF84AF84AFA9AF5A85A9AF84FD05
%FF84FD0AFFA9FD04FFAFFFFF618585AF85AFAFFFAFFD04FFAFFFFFA9FFFF
%FFAF85A9AFA985858B61AF85AF85FD04FFAFFFFFA9FFFFFFA9AFFFAFFD06
%FFA9FFA9AFFFFFFFAFFFFFAFFD04FFAFAFAFA9AFA985A9FF8585A9FD04FF
%AFFFFFA9FD04FFAFA9AFA9FF5AAFAFAFA9AFFD05FFAFAFFD08FFA9AFFD04
%FFA9FFA9AFA9AFA8AFA9FFFFAFFD04FFA9FFFFAFFD04FF85FF84A9AFFFFF
%FF84AFFFAFFD04FF85FFFFAFAFFFFFFF85A9A8AFFD04FFA9AF84AFFD04FF
%85FFFFAFAFFFFFFF85AF84AFA9AF8485848584AFFD04FF85FFFFAFAFFFFF
%FFA9AFA8AFAFA9A9AFA9AF84FD05FFA9FD0AFF85FD04FFAFAFFFAFFFA9AF
%A9FFAFAFA9FFFFFFA9AFFFFF85FD04FFAFAFAF85FFAFFFA985FFAFA9FFFF
%FFA9AFFFFFA9FD05FF85FFA9AFFFFFA9AFFFAFFD04FFAFAFFFFFA9FFFFFF
%AFAFA9AF85AFA9FFAFFFFF8585FFFFFFAFAFFFFFA9FD04FFAFA9AFA9AFAF
%AFA9AFA9AFFD04FFAFAFFD0AFFA9A8FFFFFFA8FFAFFF84A984A9A9FFA9FD
%04FFA9A8FFFFAFA8FFFFFFA985A9AF84855AA9A8AF84FD04FFA9A8FFFFAF
%84FFFFFFA885FFFFA8AF84AFA9FF84FD04FFA9A8FFFFAF84FFFFFF84AFA9
%AF84AFA9FFA8FF848584FFFFAFA8FFFFFF84FFFFFFA8A9A9A9A8AFA9A9A8
%A9AFFD04FFAF84FD0AFFAFAFFD06FFAFFFA9FF85FD07FF85FD04FFAFFD05
%FFAFAFFFAFFFFFFF85FD05FF85FD04FFAFFD04FFA9AF85AFFFFFA9AF85AF
%FD04FF85FD04FFAFFD04FFAFFFAFFFAFFFAFFFAFFFA9AFAFFF85FD04FFAF
%FD04FFAFAFA9AFA9AFA9AFAFFD05FF85FD0CFF84AFFD05FFA9A9AFAFAFA9
%FD05FF85FD05FF84AFFD05FFA9848584A984FD05FF85AFFD04FFA8AFFD04
%FFA9FFA8AFA9AFFD06FF85AFFD04FFA8AFFD10FFA9AFFD04FFA9A9FD04FF
%A9A9A8AFA9A9A9FD05FFA9A9FD0DFF85FD05FFAFFFA9FD07FFA9AFFD06FF
%85FD07FFA9FD07FFA9AFFD06FF85FD07FF85AFFD06FFA9AFFD06FF85FD0F
%FFAFAFFD06FF85AFFD06FFAFFD08FFAFFD0FFF84FD0DFFA9A9FD08FF84FD
%0DFFA985FD08FF84AFFD0CFFA985A9FD07FF84AFFD0CFFA985A8FD07FF84
%AFFD0CFFAF85A8FD10FF85AFFD0AFFA9AFFD0AFF85AFFD0AFFA9AFFD0AFF
%85AFFD0AFFA9AFFD0AFF85AFFD0AFFA9AFFD0AFFA9AFFD0AFFAFAFAFFD12
%FF85A9A9FD05FFAFAF84AFFD0CFFA985A8FD05FFA9AF84AFFD0CFFA985A8
%FD05FFAFAF84AFFD0CFFA98584FD05FFAFAF84AFFD0CFFA98584FFAFFFFF
%FFAFAF84AFFD16FFAF85AFA9AFA9AFAFFD10FFAF85AFA9AFA9AFA9FD10FF
%AF85AFA9AF85AFA9FD10FFAF85AFA9AF85AFA9FD11FF85AFA9AFA9AFA9FD
%1AFFA9FFAFFD15FFA9FFAFFD15FFAFFFAFFD17FFAFFD17FFAFFD9BFFAFAF
%84AFA9AFA9FD11FFAFAF84AF85A9A8FD11FFAFAF84AF85AFA9FD11FFAFAF
%84AF85A9A8FD11FFAFAF84AF85A9A8FD18FF85AFAFFFAFFFAFAF85AFFD0E
%FF85AFA9FFAFFFAFAF85AFFD0EFF85AFA9FFAFFFFFAF85AFAFFD0DFF85AF
%A9FFAFFFFFAF85AFAFFD0DFF85AFA9FFAFFFFFAF85AFAFFD13FFA984FD09
%FFA885A9FD0AFFA984FD09FFA885A9FD0AFFAF84FD09FFA8A984FD0AFFAF
%84AFFD08FFA8A984FD0AFFAF84AFFD08FFA8A984FD11FFAFAFFD0CFFAFA9
%FD08FFAFA9FD0CFFAF85FD08FFAFA9FD0CFFAF85FD08FFAF85FD0CFFAF85
%FD08FFAF85FD0CFFAF85FD0FFF85A9FD05FFA9FFA9FD06FFA9A8FD06FFA9
%A8FD07FFA9FD06FFA9A8FD06FFA984FD07FFAFFD06FFA984FD06FFAF84FD
%07FFAFFD06FFAF84FD06FFAF84FD0EFFAF84FD0DFFAFA9FD05FF85AFA9AF
%85FD06FFA9FD06FFA9FD06FFAFA9AFA9FD06FFA9AFFD05FF85FD05FFA9FF
%AFFFFFAFFD05FFAFA9FD05FF85FD07FFAFAF85FD06FFAFA9FD05FF85FD0C
%FFAFA9FFFFAFA9FD0CFF84FFFFFFA8FFAF85A8FFFFA9A8FFA9FFAFFFA9A9
%FD04FF84FFFFFFA9A984A984AF848584A985FFFFFFA9A9FD04FF84FD06FF
%AFA8AFA9AF84FD05FFA985FD04FF84FD04FFAF84FD04FFAF84AFFD05FF85
%AFFFFFFF84AFFD0AFFA8A984AFFFFFFF85A9FD0AFFA9FFFFFF85AFA9AF85
%AFA9AF85AFA9AF85AFFFFF85FFFFFFA9AFFD04FF85FFAFFFAFFFAFFFAFAF
%FD04FF85FFFFFFAFAFFD04FFA9FFAFAFA9AF85FFFFAFFD04FF85FFFFFFAF
%AFFFFFFFAFA9AFAFFFA9AFFFFFA9AFFD04FFA9FD04FFAFFD06FFAFFFAFAF
%85AFFFFFA9FFFFFFA9FD0BFFA9A9FFAFA9FD0CFF84FFFFAFA9FFFFA9A9FD
%04FFA985AF84AF85A98485A9FD04FFAFA8FFFFA9A9FD05FFA985A9FFFFFF
%84AFA9FD04FFAF84FFFFAFA9FFFFAF84FFAFA9FFFFA985A8FF85AFFD04FF
%84FFFFAFA8FFFFFFA8AF84A984AFAFFFFFFFA9A9FD04FF84FD0AFFA9FFFF
%FFA9FD0CFFAFFFFFAFAFFFFFA9FD05FFA9FD07FFA9FD05FFAFAFFFFFA9FD
%07FFA9FFA9FFFFAFA9FD06FFAFFFFFA9FFFFFFAFAFFFFF85FD04FF85A9FF
%85FD04FFAFFFFFA9FFFFFFAFAFFD0AFF85AFFFFFFFAFFD09FFA8AFFFFFA9
%8584AFA8FFA9AFA8FFAFAFA88584FFFFFF84FFA8AFFD06FFA8AFA9AFA8AF
%FFA9A8FD05FFA9FFFFAFAFFD05FFA8AFAF615AFFA9AFFD06FF84FFFFAFA9
%FFFFFF84FF84AFFD05FF85FFAFA9FFFFFF84FFFFAFA9FFFFA9A9FFA8FD07
%FFA8AF84FFFFFF84FD0AFFA9FFFFFF85FFA9AFA985A9AF85AFA9FFAFAFFF
%FFFFAFFFFFA9FD05FFAFAFAFFFA9FFAFFFA9FD06FFAFFFFFA9FD07FFA9FF
%A9AFFFAFAFFD06FFAFFFFFAFFD04FFAFA9FF85FD05FFA9FD06FFAFFFFFA9
%FFFFFFAFAFFD0AFF85AFFFFFFFAFAFFD08FFA9AFFFFFA9AFFD04FF85A984
%AFFD04FF85FFFFFF85FFFFAFFD06FFA8AFA9AFA9FFA9A9FD06FF85FFFFAF
%AFFD06FFAFA9A984FF85FD07FF85FFFFAFAFFD04FF85AFAF85FD05FFAFFD
%05FFA9FFFFAFAFFFFFFFA9A984AF85AFA9FFFFFFA9A9FD04FFA9FD0AFF85
%FFFFFF85FD0BFFAFAFFFFFA9AFFFFF85FD06FFAFA9FFA9FFA9FFA9FD05FF
%A9AFFFFF85FD07FFAFAF85AF85FD07FFAFAFFFFFA9FD06FF85FFFF85AF85
%AFAFFD05FFAFAFFFFFA9FD05FFA9AFA985AFAF85AFFFFFA9FD04FFAFFD0A
%FFA9A8FFAFA9FD0CFF84FFFFA9A8FFFFAFA8FD05FFA9A9A8AFA9AFA8AFFD
%05FFA9A8FFFFAF84FD07FFA88584AFFD07FFAFA8FFFFAF84FD05FFA985A9
%FF84FFA8A984FD04FFAF84FFFFFF84FD05FF84FF84FFFFFFA8A984AFFFFF
%FFAF84FD0AFFAFAFFFFF85AFA9AFA9AFA9AFA9AFA9AF85AFFFFF85FD04FF
%AFFD05FFAFA9FFAFFFFFFFA9FD05FF85FD04FFAFFD07FFAF6161A9FD07FF
%85FD04FFAFFD06FFAFAFAFFFFFFFAFAFFD04FF85FD04FFAFFD05FFAFFFFF
%A9FD04FFAFA9FFFFFF85FD0CFF84FFFFFFA9AFA9AFA9AFA9AFA9AFA9AFA9
%FF85AFFD04FF84AFFD04FF85AFA9FFAFFF84AFFD04FF85AFFD04FF84AFFD
%06FF84615AAFFD06FFA9AFFD04FFA8AFFD07FFAF85AFA9A9FD04FFA9A9FD
%04FFA9AFFD04FFA9858485FD08FFA9A9FD0DFF85FD0FFFA9AFFD06FF85FD
%05FF85AF85AFA9AFAFFFFFFFA9AFFD06FF85FD07FF8585FD06FFAFAFFD06
%FF85FD09FFAFAFFD04FFAFAFFD06FF85AFFD04FFAFFFAFFD08FFAFFD0EFF
%AF84FD0DFFA985FD08FF84FD0DFFA985A9FD07FF84FD0DFFA985A8FD07FF
%84AFFD0CFFAF85A8FD07FF84AFFD0DFF85A8FD10FF85FD0BFFA9AFFD0AFF
%85FD0BFFA9AFFD0AFF85AFFD0AFFAFAFFD0AFF85AFFD0AFFAFA9AFFD09FF
%85AFFD0AFFAFAFAFFD12FF85A9A9FD05FFAFAF84AFFD0CFF85A9A9FD05FF
%AFAF84AFFD0CFF8585A9FD05FFAFAF84AFFD0CFFA985A8FD05FFAFAF84AF
%FD0CFFA985A8FD05FFAFAF84AFFD15FFAFAF85AFA9AFA9AFA9FD10FFAF85
%AFA9AF85AFA9FD10FFAF85AFA9AF85AFA9FD10FFAF85AFA9AFA9AFA9FD10
%FFAF85AFA9AFA9AFA9FD1AFFA8FFA9FD15FFA8FFA9FD15FFA9FFA9FD15FF
%A9FFA9FD15FFA9FFA9FDFCFFFDFCFFFD16FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Line Circle Website Development Icons</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-12-05T14:58:16+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-12-05T14:58:16+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-12-05T14:58:16+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgECWAJYAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABACWAAAAAEA&#xA;AQJYAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUDNqTNM9tY&#xA;xfWZ4zSVi3CGM0rR5KN8X+SoJ8aDfLRi2uRofa0yy71EWfsHxd9U1SQfvr70vAW0SLT6ZfWr9wx4&#xA;4DlH5n9VLwTPOVe4frtxttWi3hvFnA/YuIxU+3OL0wvz4HDxQPMV7v2/rXhmORv3j9X6l1tqQeYW&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:15f40f14-6099-5847-94be-1fa5207b27ca</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:15f40f14-6099-5847-94be-1fa5207b27ca</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:910dee1f-efc5-6042-9884-a930812b9b53</stRef:instanceID>
            <stRef:documentID>xmp.did:910dee1f-efc5-6042-9884-a930812b9b53</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A267E749CEE2E411B943E4B4D3FA7223</stEvt:instanceID>
                  <stEvt:when>2015-04-14T20:47:15+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:15f40f14-6099-5847-94be-1fa5207b27ca</stEvt:instanceID>
                  <stEvt:when>2016-12-05T14:58:16+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>600.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=57 G=160 B=230</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>56</xmpG:red>
                           <xmpG:green>160</xmpG:green>
                           <xmpG:blue>230</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -600 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 600 li
600 600 li
600 0 li
cp
clp
600 600 mo
0 600 li
0 0 li
600 0 li
600 600 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
74.1064 477.284 mo
47.3052 477.284 25.5 499.089 25.5 525.892 cv
25.5 552.693 47.3052 574.499 74.1064 574.499 cv
100.909 574.499 122.714 552.693 122.714 525.892 cv
122.714 499.089 100.909 477.284 74.1064 477.284 cv
cp
74.1064 575.499 mo
46.7529 575.499 24.5 553.245 24.5 525.892 cv
24.5 498.538 46.7529 476.284 74.1064 476.284 cv
101.46 476.284 123.714 498.538 123.714 525.892 cv
123.714 553.245 101.46 575.499 74.1064 575.499 cv
cp
.223529 .627451 .901961 rgb
f
187.053 477.284 mo
160.251 477.284 138.446 499.089 138.446 525.892 cv
138.446 552.693 160.251 574.499 187.053 574.499 cv
213.855 574.499 235.66 552.693 235.66 525.892 cv
235.66 499.089 213.855 477.284 187.053 477.284 cv
cp
187.053 575.499 mo
159.7 575.499 137.446 553.245 137.446 525.892 cv
137.446 498.538 159.7 476.284 187.053 476.284 cv
214.407 476.284 236.66 498.538 236.66 525.892 cv
236.66 553.245 214.407 575.499 187.053 575.499 cv
cp
f
300 477.284 mo
273.198 477.284 251.393 499.089 251.393 525.892 cv
251.393 552.693 273.198 574.499 300 574.499 cv
326.802 574.499 348.606 552.693 348.606 525.892 cv
348.606 499.089 326.802 477.284 300 477.284 cv
cp
300 575.499 mo
272.646 575.499 250.393 553.245 250.393 525.892 cv
250.393 498.538 272.646 476.284 300 476.284 cv
327.352 476.284 349.606 498.538 349.606 525.892 cv
349.606 553.245 327.352 575.499 300 575.499 cv
cp
f
412.946 477.284 mo
386.144 477.284 364.339 499.089 364.339 525.892 cv
364.339 552.693 386.144 574.499 412.946 574.499 cv
439.747 574.499 461.553 552.693 461.553 525.892 cv
461.553 499.089 439.747 477.284 412.946 477.284 cv
cp
412.946 575.499 mo
385.593 575.499 363.339 553.245 363.339 525.892 cv
363.339 498.538 385.593 476.284 412.946 476.284 cv
440.299 476.284 462.553 498.538 462.553 525.892 cv
462.553 553.245 440.299 575.499 412.946 575.499 cv
cp
f
525.893 477.284 mo
499.09 477.284 477.285 499.089 477.285 525.892 cv
477.285 552.693 499.09 574.499 525.893 574.499 cv
552.693 574.499 574.5 552.693 574.5 525.892 cv
574.5 499.089 552.693 477.284 525.893 477.284 cv
cp
525.893 575.499 mo
498.539 575.499 476.285 553.245 476.285 525.892 cv
476.285 498.538 498.539 476.284 525.893 476.284 cv
553.245 476.284 575.5 498.538 575.5 525.892 cv
575.5 553.245 553.245 575.499 525.893 575.499 cv
cp
f
74.1064 364.338 mo
47.3052 364.338 25.5 386.143 25.5 412.945 cv
25.5 439.747 47.3052 461.553 74.1064 461.553 cv
100.909 461.553 122.714 439.747 122.714 412.945 cv
122.714 386.143 100.909 364.338 74.1064 364.338 cv
cp
74.1064 462.553 mo
46.7529 462.553 24.5 440.299 24.5 412.945 cv
24.5 385.592 46.7529 363.338 74.1064 363.338 cv
101.46 363.338 123.714 385.592 123.714 412.945 cv
123.714 440.299 101.46 462.553 74.1064 462.553 cv
cp
f
187.053 364.338 mo
160.251 364.338 138.446 386.143 138.446 412.945 cv
138.446 439.747 160.251 461.553 187.053 461.553 cv
213.855 461.553 235.66 439.747 235.66 412.945 cv
235.66 386.143 213.855 364.338 187.053 364.338 cv
cp
187.053 462.553 mo
159.7 462.553 137.446 440.299 137.446 412.945 cv
137.446 385.592 159.7 363.338 187.053 363.338 cv
214.407 363.338 236.66 385.592 236.66 412.945 cv
236.66 440.299 214.407 462.553 187.053 462.553 cv
cp
f
300 364.338 mo
273.198 364.338 251.393 386.143 251.393 412.945 cv
251.393 439.747 273.198 461.553 300 461.553 cv
326.802 461.553 348.606 439.747 348.606 412.945 cv
348.606 386.143 326.802 364.338 300 364.338 cv
cp
300 462.553 mo
272.646 462.553 250.393 440.299 250.393 412.945 cv
250.393 385.592 272.646 363.338 300 363.338 cv
327.352 363.338 349.606 385.592 349.606 412.945 cv
349.606 440.299 327.352 462.553 300 462.553 cv
cp
f
412.946 364.338 mo
386.144 364.338 364.339 386.143 364.339 412.945 cv
364.339 439.747 386.144 461.553 412.946 461.553 cv
439.747 461.553 461.553 439.747 461.553 412.945 cv
461.553 386.143 439.747 364.338 412.946 364.338 cv
cp
412.946 462.553 mo
385.593 462.553 363.339 440.299 363.339 412.945 cv
363.339 385.592 385.593 363.338 412.946 363.338 cv
440.299 363.338 462.553 385.592 462.553 412.945 cv
462.553 440.299 440.299 462.553 412.946 462.553 cv
cp
f
525.893 364.338 mo
499.09 364.338 477.285 386.143 477.285 412.945 cv
477.285 439.747 499.09 461.553 525.893 461.553 cv
552.693 461.553 574.5 439.747 574.5 412.945 cv
574.5 386.143 552.693 364.338 525.893 364.338 cv
cp
525.893 462.553 mo
498.539 462.553 476.285 440.299 476.285 412.945 cv
476.285 385.592 498.539 363.338 525.893 363.338 cv
553.245 363.338 575.5 385.592 575.5 412.945 cv
575.5 440.299 553.245 462.553 525.893 462.553 cv
cp
f
74.1064 251.392 mo
47.3052 251.392 25.5 273.197 25.5 299.999 cv
25.5 326.801 47.3052 348.605 74.1064 348.605 cv
100.909 348.605 122.714 326.801 122.714 299.999 cv
122.714 273.197 100.909 251.392 74.1064 251.392 cv
cp
74.1064 349.605 mo
46.7529 349.605 24.5 327.353 24.5 299.999 cv
24.5 272.646 46.7529 250.392 74.1064 250.392 cv
101.46 250.392 123.714 272.646 123.714 299.999 cv
123.714 327.353 101.46 349.605 74.1064 349.605 cv
cp
f
187.053 251.392 mo
160.251 251.392 138.446 273.197 138.446 299.999 cv
138.446 326.801 160.251 348.605 187.053 348.605 cv
213.855 348.605 235.66 326.801 235.66 299.999 cv
235.66 273.197 213.855 251.392 187.053 251.392 cv
cp
187.053 349.605 mo
159.7 349.605 137.446 327.353 137.446 299.999 cv
137.446 272.646 159.7 250.392 187.053 250.392 cv
214.407 250.392 236.66 272.646 236.66 299.999 cv
236.66 327.353 214.407 349.605 187.053 349.605 cv
cp
f
300 251.392 mo
273.198 251.392 251.393 273.197 251.393 299.999 cv
251.393 326.801 273.198 348.605 300 348.605 cv
326.802 348.605 348.606 326.801 348.606 299.999 cv
348.606 273.197 326.802 251.392 300 251.392 cv
cp
300 349.605 mo
272.646 349.605 250.393 327.353 250.393 299.999 cv
250.393 272.646 272.646 250.392 300 250.392 cv
327.352 250.392 349.606 272.646 349.606 299.999 cv
349.606 327.353 327.352 349.605 300 349.605 cv
cp
f
412.946 251.392 mo
386.144 251.392 364.339 273.197 364.339 299.999 cv
364.339 326.801 386.144 348.605 412.946 348.605 cv
439.747 348.605 461.553 326.801 461.553 299.999 cv
461.553 273.197 439.747 251.392 412.946 251.392 cv
cp
412.946 349.605 mo
385.593 349.605 363.339 327.353 363.339 299.999 cv
363.339 272.646 385.593 250.392 412.946 250.392 cv
440.299 250.392 462.553 272.646 462.553 299.999 cv
462.553 327.353 440.299 349.605 412.946 349.605 cv
cp
f
525.893 251.392 mo
499.09 251.392 477.285 273.197 477.285 299.999 cv
477.285 326.801 499.09 348.605 525.893 348.605 cv
552.693 348.605 574.5 326.801 574.5 299.999 cv
574.5 273.197 552.693 251.392 525.893 251.392 cv
cp
525.893 349.605 mo
498.539 349.605 476.285 327.353 476.285 299.999 cv
476.285 272.646 498.539 250.392 525.893 250.392 cv
553.245 250.392 575.5 272.646 575.5 299.999 cv
575.5 327.353 553.245 349.605 525.893 349.605 cv
cp
f
74.1064 138.445 mo
47.3052 138.445 25.5 160.251 25.5 187.052 cv
25.5 213.855 47.3052 235.659 74.1064 235.659 cv
100.909 235.659 122.714 213.855 122.714 187.052 cv
122.714 160.251 100.909 138.445 74.1064 138.445 cv
cp
74.1064 236.659 mo
46.7529 236.659 24.5 214.406 24.5 187.052 cv
24.5 159.699 46.7529 137.445 74.1064 137.445 cv
101.46 137.445 123.714 159.699 123.714 187.052 cv
123.714 214.406 101.46 236.659 74.1064 236.659 cv
cp
f
187.053 138.445 mo
160.251 138.445 138.446 160.251 138.446 187.052 cv
138.446 213.855 160.251 235.659 187.053 235.659 cv
213.855 235.659 235.66 213.855 235.66 187.052 cv
235.66 160.251 213.855 138.445 187.053 138.445 cv
cp
187.053 236.659 mo
159.7 236.659 137.446 214.406 137.446 187.052 cv
137.446 159.699 159.7 137.445 187.053 137.445 cv
214.407 137.445 236.66 159.699 236.66 187.052 cv
236.66 214.406 214.407 236.659 187.053 236.659 cv
cp
f
300 138.445 mo
273.198 138.445 251.393 160.251 251.393 187.052 cv
251.393 213.855 273.198 235.659 300 235.659 cv
326.802 235.659 348.606 213.855 348.606 187.052 cv
348.606 160.251 326.802 138.445 300 138.445 cv
cp
300 236.659 mo
272.646 236.659 250.393 214.406 250.393 187.052 cv
250.393 159.699 272.646 137.445 300 137.445 cv
327.352 137.445 349.606 159.699 349.606 187.052 cv
349.606 214.406 327.352 236.659 300 236.659 cv
cp
f
412.946 138.445 mo
386.144 138.445 364.339 160.251 364.339 187.052 cv
364.339 213.855 386.144 235.659 412.946 235.659 cv
439.747 235.659 461.553 213.855 461.553 187.052 cv
461.553 160.251 439.747 138.445 412.946 138.445 cv
cp
412.946 236.659 mo
385.593 236.659 363.339 214.406 363.339 187.052 cv
363.339 159.699 385.593 137.445 412.946 137.445 cv
440.299 137.445 462.553 159.699 462.553 187.052 cv
462.553 214.406 440.299 236.659 412.946 236.659 cv
cp
f
525.893 138.445 mo
499.09 138.445 477.285 160.251 477.285 187.052 cv
477.285 213.855 499.09 235.659 525.893 235.659 cv
552.693 235.659 574.5 213.855 574.5 187.052 cv
574.5 160.251 552.693 138.445 525.893 138.445 cv
cp
525.893 236.659 mo
498.539 236.659 476.285 214.406 476.285 187.052 cv
476.285 159.699 498.539 137.445 525.893 137.445 cv
553.245 137.445 575.5 159.699 575.5 187.052 cv
575.5 214.406 553.245 236.659 525.893 236.659 cv
cp
f
74.1064 25.499 mo
47.3052 25.499 25.5 47.3042 25.5 74.1054 cv
25.5 100.908 47.3052 122.713 74.1064 122.713 cv
100.909 122.713 122.714 100.908 122.714 74.1054 cv
122.714 47.3042 100.909 25.499 74.1064 25.499 cv
cp
74.1064 123.713 mo
46.7529 123.713 24.5 101.459 24.5 74.1054 cv
24.5 46.7519 46.7529 24.499 74.1064 24.499 cv
101.46 24.499 123.714 46.7519 123.714 74.1054 cv
123.714 101.459 101.46 123.713 74.1064 123.713 cv
cp
f
187.053 25.499 mo
160.251 25.499 138.446 47.3042 138.446 74.1054 cv
138.446 100.908 160.251 122.713 187.053 122.713 cv
213.855 122.713 235.66 100.908 235.66 74.1054 cv
235.66 47.3042 213.855 25.499 187.053 25.499 cv
cp
187.053 123.713 mo
159.7 123.713 137.446 101.459 137.446 74.1054 cv
137.446 46.7519 159.7 24.499 187.053 24.499 cv
214.407 24.499 236.66 46.7519 236.66 74.1054 cv
236.66 101.459 214.407 123.713 187.053 123.713 cv
cp
f
300 25.499 mo
273.198 25.499 251.393 47.3042 251.393 74.1054 cv
251.393 100.908 273.198 122.713 300 122.713 cv
326.802 122.713 348.606 100.908 348.606 74.1054 cv
348.606 47.3042 326.802 25.499 300 25.499 cv
cp
300 123.713 mo
272.646 123.713 250.393 101.459 250.393 74.1054 cv
250.393 46.7519 272.646 24.499 300 24.499 cv
327.352 24.499 349.606 46.7519 349.606 74.1054 cv
349.606 101.459 327.352 123.713 300 123.713 cv
cp
f
412.946 25.499 mo
386.144 25.499 364.339 47.3042 364.339 74.1054 cv
364.339 100.908 386.144 122.713 412.946 122.713 cv
439.747 122.713 461.553 100.908 461.553 74.1054 cv
461.553 47.3042 439.747 25.499 412.946 25.499 cv
cp
412.946 123.713 mo
385.593 123.713 363.339 101.459 363.339 74.1054 cv
363.339 46.7519 385.593 24.499 412.946 24.499 cv
440.299 24.499 462.553 46.7519 462.553 74.1054 cv
462.553 101.459 440.299 123.713 412.946 123.713 cv
cp
f
525.893 25.499 mo
499.09 25.499 477.285 47.3042 477.285 74.1054 cv
477.285 100.908 499.09 122.713 525.893 122.713 cv
552.693 122.713 574.5 100.908 574.5 74.1054 cv
574.5 47.3042 552.693 25.499 525.893 25.499 cv
cp
525.893 123.713 mo
498.539 123.713 476.285 101.459 476.285 74.1054 cv
476.285 46.7519 498.539 24.499 525.893 24.499 cv
553.245 24.499 575.5 46.7519 575.5 74.1054 cv
575.5 101.459 553.245 123.713 525.893 123.713 cv
cp
f
202.346 80.2124 mo
197.457 73.4331 li
196.65 72.314 196.448 71.0913 196.903 70.0791 cv
197.29 69.2188 198.099 68.647 199.068 68.5483 cv
200.433 68.4116 201.824 69.1982 202.911 70.7065 cv
203.325 71.2813 204.897 73.3823 206.414 75.4077 cv
207.318 76.6157 li
206.517 77.2144 li
205.613 76.0068 li
204.092 73.9751 202.515 71.8672 202.1 71.2915 cv
201.226 70.0791 200.153 69.4443 199.169 69.5435 cv
198.56 69.605 198.053 69.9585 197.815 70.4888 cv
197.51 71.1665 197.676 72.0264 198.268 72.8481 cv
203.157 79.6274 li
202.346 80.2124 li
cp
f
197.774 83.4985 mo
197.746 83.4565 194.845 79.2876 192.966 76.8301 cv
190.726 73.9009 192.125 72.0181 192.607 71.5107 cv
193.654 70.4097 195.322 70.1279 196.403 70.8701 cv
197.684 71.7495 199.087 73.9722 199.145 74.0664 cv
198.299 74.5977 li
198.285 74.5767 196.947 72.4565 195.837 71.6943 cv
195.171 71.2383 194.025 71.4688 193.332 72.1997 cv
192.399 73.1812 192.556 74.6475 193.76 76.2227 cv
195.653 78.6982 198.566 82.8853 198.596 82.9272 cv
197.774 83.4985 li
cp
f
208.426 104.817 mo
208.139 104.382 li
207.374 103.225 205.24 100.073 204.555 99.3984 cv
203.868 98.7222 202.778 98.0117 199.903 97.8677 cv
197.529 97.7476 195.533 95.4683 193.602 93.2642 cv
192.793 92.3398 192.029 91.4673 191.249 90.7563 cv
189.086 88.7813 186.824 87.5952 185.327 86.8101 cv
183.841 86.0308 182.944 85.5601 183.331 84.7783 cv
184.002 83.4194 185.029 82.6025 186.383 82.3491 cv
187.991 82.0483 189.881 82.6206 191.576 83.5649 cv
190.556 82.2217 189.398 80.7241 188.201 79.1768 cv
185.772 76.0366 183.26 72.7896 181.221 69.9614 cv
179.162 67.106 179.559 64.9673 180.525 64.0034 cv
181.598 62.9355 183.422 63.0166 185.064 64.2075 cv
185.177 64.3198 li
194.792 77.6528 li
193.981 78.2378 li
184.414 64.9717 li
183.202 64.1206 181.93 64.0137 181.231 64.7114 cv
180.544 65.3975 180.341 67.0313 182.032 69.3765 cv
184.061 72.1909 186.568 75.4312 188.992 78.5649 cv
191.039 81.2109 192.972 83.71 194.305 85.5581 cv
197.165 89.522 li
193.562 86.2192 li
191.731 84.5415 188.764 82.9263 186.566 83.332 cv
185.589 83.5151 184.829 84.0991 184.306 85.0688 cv
184.545 85.2705 185.202 85.6152 185.791 85.9243 cv
187.334 86.7334 189.665 87.9556 191.923 90.0176 cv
192.744 90.7661 193.563 91.7012 194.355 92.6055 cv
196.148 94.6528 198.002 96.77 199.953 96.8687 cv
202.507 96.9966 204.093 97.54 205.256 98.6855 cv
205.994 99.4121 207.943 102.288 208.685 103.398 cv
218.907 96.0259 li
215.98 91.9414 li
215.409 90.8364 215.096 89.7485 215.013 88.644 cv
214.953 87.8394 li
214.587 82.8892 214.531 82.1284 209.312 74.0186 cv
208.168 72.2402 208.08 72.0444 208.043 71.9609 cv
207.899 71.7803 207.56 71.3296 206.553 69.9341 cv
205.201 68.0591 203.889 67.4849 203.29 67.8857 cv
202.715 68.271 202.561 69.8652 204.016 72.2026 cv
203.167 72.731 li
201.356 69.8232 201.645 67.7852 202.733 67.0552 cv
203.659 66.4355 205.428 66.6626 207.364 69.3491 cv
208.363 70.7334 208.699 71.1802 208.82 71.3408 cv
208.898 71.4448 208.921 71.4761 208.956 71.5518 cv
208.984 71.6152 209.157 71.9297 210.153 73.4775 cv
215.51 81.8013 215.569 82.5957 215.95 87.7656 cv
216.01 88.5684 li
216.083 89.54 216.36 90.5 216.832 91.4229 cv
220.3 96.2534 li
208.426 104.817 li
cp
f
179.128 63.1987 mo
178.141 63.0376 li
178.248 62.3813 178.604 61.8047 179.144 61.4141 cv
179.685 61.0244 180.341 60.8672 180.999 60.9741 cv
180.84 61.9614 li
180.448 61.8999 180.053 61.9922 179.729 62.2251 cv
179.406 62.459 179.192 62.8047 179.128 63.1987 cv
cp
f
176.368 62.9858 mo
175.381 62.8247 li
175.617 61.3779 176.4 60.1099 177.586 59.2544 cv
178.771 58.3984 180.221 58.0552 181.669 58.2886 cv
181.51 59.2759 li
180.323 59.0845 179.141 59.3657 178.171 60.0654 cv
177.201 60.7651 176.561 61.8018 176.368 62.9858 cv
cp
f
173.609 62.771 mo
172.622 62.6118 li
172.983 60.3779 174.193 58.4189 176.029 57.0942 cv
177.864 55.771 180.105 55.2432 182.338 55.603 cv
182.178 56.5903 li
180.206 56.2705 178.232 56.7383 176.614 57.9053 cv
174.995 59.0737 173.927 60.8018 173.609 62.771 cv
cp
f
203.971 101.335 mo
171.795 101.335 li
169.703 101.335 168 99.5483 168 97.3525 cv
168 47.5918 li
168 45.3936 169.703 43.6055 171.795 43.6055 cv
203.971 43.6055 li
206.062 43.6055 207.763 45.3936 207.763 47.5918 cv
207.763 70.0635 li
206.763 70.0635 li
206.763 47.5918 li
206.763 45.9453 205.511 44.6055 203.971 44.6055 cv
171.795 44.6055 li
170.254 44.6055 169 45.9453 169 47.5918 cv
169 97.3525 li
169 98.9971 170.254 100.335 171.795 100.335 cv
203.971 100.335 li
204.542 100.335 205.091 100.153 205.558 99.8076 cv
206.152 100.612 li
205.511 101.085 204.757 101.335 203.971 101.335 cv
cp
f
190.781 47.1084 mo
184.984 47.1084 li
184.984 46.1084 li
190.781 46.1084 li
190.781 47.1084 li
cp
f
187.675 93.8647 mo
180.871 93.8647 174.104 93.8628 170.949 93.8584 cv
170.449 93.8579 li
170.449 48.6133 li
205.316 48.6133 li
205.316 67.5869 li
204.316 67.5869 li
204.316 49.6133 li
171.449 49.6133 li
171.449 92.8589 li
175.95 92.8643 186.103 92.8657 194.356 92.8643 cv
194.356 93.8643 li
192.213 93.8647 189.942 93.8647 187.675 93.8647 cv
cp
f
189.773 97.6143 mo
185.992 97.6143 li
185.992 96.6143 li
189.773 96.6143 li
189.773 97.6143 li
cp
f
496.392 323.216 mo
555.392 323.216 li
555.392 276.784 li
496.392 276.784 li
496.392 323.216 li
cp
556.392 324.216 mo
495.392 324.216 li
495.392 275.784 li
556.392 275.784 li
556.392 324.216 li
cp
f
555.892 284.232 mo
495.892 284.232 li
495.892 283.232 li
555.892 283.232 li
555.892 284.232 li
cp
f
501.939 280.508 mo
498.382 280.508 li
498.382 279.508 li
501.939 279.508 li
501.939 280.508 li
cp
f
507.631 280.508 mo
504.073 280.508 li
504.073 279.508 li
507.631 279.508 li
507.631 280.508 li
cp
f
513.322 280.508 mo
509.766 280.508 li
509.766 279.508 li
513.322 279.508 li
513.322 280.508 li
cp
f
512.255 290.776 mo
500.872 290.776 li
500.872 289.776 li
512.255 289.776 li
512.255 290.776 li
cp
f
527.907 290.776 mo
516.524 290.776 li
516.524 289.776 li
527.907 289.776 li
527.907 290.776 li
cp
f
512.255 307.211 mo
500.872 307.211 li
500.872 306.211 li
512.255 306.211 li
512.255 307.211 li
cp
f
527.907 307.211 mo
516.524 307.211 li
516.524 306.211 li
527.907 306.211 li
527.907 307.211 li
cp
f
546.05 301.733 mo
516.524 301.733 li
516.524 300.733 li
546.05 300.733 li
546.05 301.733 li
cp
f
538.935 312.69 mo
509.409 312.69 li
509.409 311.69 li
538.935 311.69 li
538.935 312.69 li
cp
f
514.982 296.255 mo
508.342 296.255 li
508.342 295.255 li
514.982 295.255 li
514.982 296.255 li
cp
f
542.61 296.255 mo
518.54 296.255 li
518.54 295.255 li
542.61 295.255 li
542.61 296.255 li
cp
f
518.422 318.168 mo
511.781 318.168 li
511.781 317.168 li
518.422 317.168 li
518.422 318.168 li
cp
f
546.05 318.168 mo
521.979 318.168 li
521.979 317.168 li
546.05 317.168 li
546.05 318.168 li
cp
f
173.299 553.892 mo
200.806 553.892 li
205.085 513.226 li
169.019 513.226 li
173.299 553.892 li
cp
201.706 554.892 mo
172.399 554.892 li
167.909 512.226 li
206.195 512.226 li
201.706 554.892 li
cp
f
166.175 512.226 mo
207.929 512.226 li
207.929 504.63 li
166.175 504.63 li
166.175 512.226 li
cp
208.929 513.226 mo
165.175 513.226 li
165.175 503.63 li
208.929 503.63 li
208.929 513.226 li
cp
f
194.407 504.13 mo
193.407 504.13 li
193.407 497.892 li
180.697 497.892 li
180.697 504.13 li
179.697 504.13 li
179.697 496.892 li
194.407 496.892 li
194.407 504.13 li
cp
f
187.552 546.418 mo
186.552 546.418 li
186.552 519.465 li
187.552 519.465 li
187.552 546.418 li
cp
f
196.846 546.418 mo
195.846 546.418 li
195.846 519.465 li
196.846 519.465 li
196.846 546.418 li
cp
f
178.258 546.418 mo
177.258 546.418 li
177.258 519.465 li
178.258 519.465 li
178.258 546.418 li
cp
f
47.6348 99.083 mo
61.3364 99.083 li
61.3364 68.4702 li
47.6348 68.4702 li
47.6348 99.083 li
cp
62.3364 100.083 mo
46.6348 100.083 li
46.6348 67.4702 li
62.3364 67.4702 li
62.3364 100.083 li
cp
f
67.2544 99.083 mo
80.9556 99.083 li
80.9556 54.7285 li
67.2544 54.7285 li
67.2544 99.083 li
cp
81.9556 100.083 mo
66.2544 100.083 li
66.2544 53.7285 li
81.9556 53.7285 li
81.9556 100.083 li
cp
f
86.8755 99.083 mo
100.577 99.083 li
100.577 44.606 li
86.8755 44.606 li
86.8755 99.083 li
cp
101.577 100.083 mo
85.8755 100.083 li
85.8755 43.606 li
101.577 43.606 li
101.577 100.083 li
cp
f
101.077 104.606 mo
47.1348 104.606 li
47.1348 103.606 li
101.077 103.606 li
101.077 104.606 li
cp
f
187.052 270.5 mo
170.785 270.5 157.552 283.733 157.552 300 cv
157.552 316.267 170.785 329.5 187.052 329.5 cv
203.318 329.5 216.552 316.267 216.552 300 cv
216.552 283.733 203.318 270.5 187.052 270.5 cv
cp
187.052 330.5 mo
170.234 330.5 156.552 316.817 156.552 300 cv
156.552 283.182 170.234 269.5 187.052 269.5 cv
203.87 269.5 217.552 283.182 217.552 300 cv
217.552 316.817 203.87 330.5 187.052 330.5 cv
cp
f
207.913 321.566 mo
186.552 300.207 li
186.552 270 li
187.552 270 li
187.552 299.793 li
208.62 320.859 li
207.913 321.566 li
cp
f
187.16 300.488 mo
186.944 299.512 li
216.241 293.034 li
216.456 294.01 li
187.16 300.488 li
cp
f
213.428 314.315 mo
186.821 300.443 li
187.283 299.557 li
213.89 313.428 li
213.428 314.315 li
cp
f
430.977 530.227 mo
428.944 519.182 420.129 510.562 409.042 508.776 cv
409.2 507.79 li
420.704 509.642 429.851 518.585 431.961 530.045 cv
430.977 530.227 li
cp
f
440.953 528.395 mo
438.162 513.198 426.045 501.299 410.801 498.786 cv
410.963 497.8 li
426.622 500.381 439.069 512.604 441.938 528.215 cv
440.953 528.395 li
cp
f
395.741 505.235 mo
395.305 505.434 394.659 505.725 393.94 506.049 cv
392.188 506.839 390.007 507.821 389.393 508.122 cv
389.393 508.122 li
385.876 509.838 384.212 513.496 385.251 517.224 cv
387.047 523.669 390.388 529.673 395.764 536.12 cv
398.49 539.395 401.707 542.338 405.601 545.119 cv
410.739 548.797 415.657 551.271 420.636 552.684 cv
422.189 553.125 423.705 553.094 425.269 552.595 cv
428.621 551.524 429.938 548.736 431.199 545.475 cv
432.574 542.118 li
418.86 535.724 li
418.333 536.86 417.352 538.981 417.352 538.981 cv
416.137 541.533 li
415.739 541.433 li
406.849 539.187 396.892 525.677 396.295 522.23 cv
396.23 521.854 li
402.184 519.075 li
395.741 505.235 li
cp
422.8 553.989 mo
421.984 553.989 421.171 553.875 420.362 553.647 cv
415.271 552.201 410.253 549.678 405.019 545.933 cv
401.056 543.102 397.776 540.101 394.996 536.761 cv
389.601 530.291 386.098 523.988 384.288 517.492 cv
383.114 513.285 384.989 509.158 388.953 507.224 cv
389.582 506.916 391.77 505.93 393.529 505.138 cv
394.574 504.667 395.464 504.266 395.772 504.121 cv
396.227 503.909 li
403.512 519.56 li
397.375 522.422 li
398.468 525.75 407.298 537.95 415.59 540.356 cv
416.447 538.556 li
416.447 538.556 li
416.447 538.556 417.761 535.714 418.165 534.848 cv
418.376 534.394 li
433.861 541.614 li
432.129 545.845 li
430.826 549.213 429.342 552.344 425.573 553.548 cv
424.652 553.842 423.725 553.989 422.8 553.989 cv
cp
f
51.7197 203.095 mo
51.7197 194.139 li
46.5591 191.058 43.606 186.419 43.606 181.373 cv
43.606 172.473 52.9893 165.232 64.5229 165.232 cv
73.1978 165.232 80.8447 169.255 84.0044 175.481 cv
83.1128 175.934 li
80.168 170.131 72.6973 166.232 64.5229 166.232 cv
53.5405 166.232 44.606 173.024 44.606 181.373 cv
44.606 186.133 47.4727 190.524 52.4702 193.42 cv
52.7197 193.565 li
52.7197 200.681 li
57.7827 195.619 li
58.0601 195.691 li
61.666 196.634 65.6133 196.761 69.2773 196.078 cv
69.4609 197.061 li
65.7461 197.753 61.7534 197.644 58.0859 196.73 cv
51.7197 203.095 li
cp
f
91.7319 202.641 mo
96.2563 207.165 li
96.2563 200.806 li
96.5059 200.661 li
101.018 198.047 103.606 194.085 103.606 189.79 cv
103.606 182.253 95.5342 176.122 85.6123 176.122 cv
75.6909 176.122 67.6191 182.253 67.6191 189.79 cv
67.6191 197.325 75.6909 203.456 85.6123 203.456 cv
87.6025 203.456 89.5684 203.206 91.4546 202.713 cv
91.7319 202.641 li
cp
97.2563 209.579 mo
91.4287 203.752 li
89.5454 204.219 87.5903 204.456 85.6123 204.456 cv
75.1396 204.456 66.6191 197.877 66.6191 189.79 cv
66.6191 181.702 75.1396 175.122 85.6123 175.122 cv
96.0854 175.122 104.606 181.702 104.606 189.79 cv
104.606 194.37 101.932 198.58 97.2563 201.379 cv
97.2563 209.579 li
cp
f
94.2661 187.325 mo
92.9077 187.325 91.8022 188.431 91.8022 189.79 cv
91.8022 191.148 92.9077 192.253 94.2661 192.253 cv
95.6245 192.253 96.73 191.148 96.73 189.79 cv
96.73 188.431 95.6245 187.325 94.2661 187.325 cv
cp
94.2661 193.253 mo
92.356 193.253 90.8022 191.699 90.8022 189.79 cv
90.8022 187.879 92.356 186.325 94.2661 186.325 cv
96.1763 186.325 97.73 187.879 97.73 189.79 cv
97.73 191.699 96.1763 193.253 94.2661 193.253 cv
cp
f
85.6123 187.325 mo
84.2539 187.325 83.1489 188.431 83.1489 189.79 cv
83.1489 191.148 84.2539 192.253 85.6123 192.253 cv
86.9707 192.253 88.0762 191.148 88.0762 189.79 cv
88.0762 188.431 86.9707 187.325 85.6123 187.325 cv
cp
85.6123 193.253 mo
83.7026 193.253 82.1489 191.699 82.1489 189.79 cv
82.1489 187.879 83.7026 186.325 85.6123 186.325 cv
87.5225 186.325 89.0762 187.879 89.0762 189.79 cv
89.0762 191.699 87.5225 193.253 85.6123 193.253 cv
cp
f
76.959 187.325 mo
75.6006 187.325 74.4951 188.431 74.4951 189.79 cv
74.4951 191.148 75.6006 192.253 76.959 192.253 cv
78.3174 192.253 79.4229 191.148 79.4229 189.79 cv
79.4229 188.431 78.3174 187.325 76.959 187.325 cv
cp
76.959 193.253 mo
75.0488 193.253 73.4951 191.699 73.4951 189.79 cv
73.4951 187.879 75.0488 186.325 76.959 186.325 cv
78.8691 186.325 80.4229 187.879 80.4229 189.79 cv
80.4229 191.699 78.8691 193.253 76.959 193.253 cv
cp
f
300 398.146 mo
291.839 398.146 285.2 404.785 285.2 412.945 cv
285.2 421.106 291.839 427.745 300 427.745 cv
308.16 427.745 314.8 421.106 314.8 412.945 cv
314.8 404.785 308.16 398.146 300 398.146 cv
cp
300 428.745 mo
291.288 428.745 284.2 421.657 284.2 412.945 cv
284.2 404.233 291.288 397.146 300 397.146 cv
308.712 397.146 315.8 404.233 315.8 412.945 cv
315.8 421.657 308.712 428.745 300 428.745 cv
cp
f
296.486 440.945 mo
303.514 440.945 li
305.854 433.852 li
310.643 431.867 li
317.315 435.229 li
322.283 430.26 li
318.922 423.588 li
320.906 418.8 li
328 416.459 li
328 409.432 li
320.906 407.091 li
318.922 402.303 li
322.283 395.63 li
317.314 390.662 li
310.643 394.023 li
305.854 392.039 li
303.514 384.945 li
296.486 384.945 li
294.145 392.039 li
289.357 394.023 li
282.685 390.662 li
277.717 395.631 li
281.078 402.303 li
279.094 407.091 li
272 409.432 li
272 416.459 li
279.094 418.8 li
281.078 423.588 li
277.717 430.261 li
282.685 435.229 li
289.357 431.867 li
294.145 433.852 li
296.486 440.945 li
cp
304.236 441.945 mo
295.764 441.945 li
293.339 434.6 li
289.398 432.967 li
282.49 436.447 li
276.498 430.456 li
279.978 423.547 li
278.346 419.606 li
271 417.182 li
271 408.709 li
278.346 406.284 li
279.978 402.344 li
276.498 395.436 li
282.489 389.443 li
289.398 392.924 li
293.339 391.291 li
295.764 383.945 li
304.236 383.945 li
306.661 391.291 li
310.602 392.924 li
317.51 389.443 li
323.502 395.435 li
320.021 402.344 li
321.654 406.284 li
329 408.709 li
329 417.182 li
321.654 419.606 li
320.021 423.547 li
323.502 430.455 li
317.511 436.447 li
310.602 432.967 li
306.661 434.6 li
304.236 441.945 li
cp
f
270.501 99.3354 mo
329.499 99.3354 li
329.499 49.4824 li
270.501 49.4824 li
270.501 99.3354 li
cp
330.499 100.335 mo
269.501 100.335 li
269.501 48.4824 li
330.499 48.4824 li
330.499 100.335 li
cp
f
330 62.9458 mo
270 62.9458 li
270 61.9458 li
330 61.9458 li
330 62.9458 li
cp
f
281.061 53.3774 mo
280.061 53.3774 li
280.061 44.3774 li
281.061 44.3774 li
281.061 53.3774 li
cp
f
294.021 53.3765 mo
293.021 53.3765 li
293.021 44.3765 li
294.021 44.3765 li
294.021 53.3765 li
cp
f
306.978 53.3774 mo
305.978 53.3774 li
305.978 44.3774 li
306.978 44.3774 li
306.978 53.3774 li
cp
f
319.939 53.3774 mo
318.939 53.3774 li
318.939 44.3774 li
319.939 44.3774 li
319.939 53.3774 li
cp
f
280.593 93.1401 mo
274.745 93.1401 li
274.745 92.1401 li
280.593 92.1401 li
280.593 93.1401 li
cp
f
291.759 93.1401 mo
285.909 93.1401 li
285.909 92.1401 li
291.759 92.1401 li
291.759 93.1401 li
cp
f
302.924 93.1401 mo
297.074 93.1401 li
297.074 92.1401 li
302.924 92.1401 li
302.924 93.1401 li
cp
f
314.09 93.1401 mo
308.24 93.1401 li
308.24 92.1401 li
314.09 92.1401 li
314.09 93.1401 li
cp
f
291.759 70.0879 mo
285.909 70.0879 li
285.909 69.0879 li
291.759 69.0879 li
291.759 70.0879 li
cp
f
302.924 70.0879 mo
297.074 70.0879 li
297.074 69.0879 li
302.924 69.0879 li
302.924 70.0879 li
cp
f
314.09 70.0879 mo
308.24 70.0879 li
308.24 69.0879 li
314.09 69.0879 li
314.09 70.0879 li
cp
f
325.255 70.0879 mo
319.406 70.0879 li
319.406 69.0879 li
325.255 69.0879 li
325.255 70.0879 li
cp
f
280.593 77.771 mo
274.745 77.771 li
274.745 76.771 li
280.593 76.771 li
280.593 77.771 li
cp
f
291.759 77.771 mo
285.909 77.771 li
285.909 76.771 li
291.759 76.771 li
291.759 77.771 li
cp
f
302.924 77.771 mo
297.074 77.771 li
297.074 76.771 li
302.924 76.771 li
302.924 77.771 li
cp
f
314.09 77.771 mo
308.24 77.771 li
308.24 76.771 li
314.09 76.771 li
314.09 77.771 li
cp
f
325.255 77.771 mo
319.406 77.771 li
319.406 76.771 li
325.255 76.771 li
325.255 77.771 li
cp
f
280.593 85.4565 mo
274.745 85.4565 li
274.745 84.4565 li
280.593 84.4565 li
280.593 85.4565 li
cp
f
291.759 85.4565 mo
285.909 85.4565 li
285.909 84.4565 li
291.759 84.4565 li
291.759 85.4565 li
cp
f
302.924 85.4565 mo
297.074 85.4565 li
297.074 84.4565 li
302.924 84.4565 li
302.924 85.4565 li
cp
f
325.255 85.4565 mo
319.406 85.4565 li
319.406 84.4565 li
325.255 84.4565 li
325.255 85.4565 li
cp
f
308.74 87.3809 mo
313.59 87.3809 li
313.59 82.5322 li
308.74 82.5322 li
308.74 87.3809 li
cp
314.59 88.3809 mo
307.74 88.3809 li
307.74 81.5322 li
314.59 81.5322 li
314.59 88.3809 li
cp
f
508.32 177.46 mo
509.193 178.488 512.204 181.642 516.277 181.642 cv
520.352 181.642 523.362 178.488 524.234 177.46 cv
523.255 176.443 519.878 173.233 516.277 173.233 cv
512.678 173.233 509.3 176.443 508.32 177.46 cv
cp
516.277 182.642 mo
510.922 182.642 507.403 177.934 507.256 177.733 cv
507.02 177.412 li
507.281 177.11 li
507.454 176.911 511.563 172.233 516.277 172.233 cv
520.993 172.233 525.101 176.911 525.273 177.11 cv
525.535 177.412 li
525.299 177.733 li
525.151 177.934 521.634 182.642 516.277 182.642 cv
cp
f
516.277 173.233 mo
513.96 173.233 512.074 175.119 512.074 177.438 cv
512.074 179.756 513.96 181.642 516.277 181.642 cv
518.596 181.642 520.481 179.756 520.481 177.438 cv
520.481 175.119 518.596 173.233 516.277 173.233 cv
cp
516.277 182.642 mo
513.408 182.642 511.074 180.307 511.074 177.438 cv
511.074 174.568 513.408 172.233 516.277 172.233 cv
519.146 172.233 521.481 174.568 521.481 177.438 cv
521.481 180.307 519.146 182.642 516.277 182.642 cv
cp
f
516.277 176.419 mo
515.716 176.419 515.259 176.876 515.259 177.438 cv
515.259 177.999 515.716 178.456 516.277 178.456 cv
516.839 178.456 517.296 177.999 517.296 177.438 cv
517.296 176.876 516.839 176.419 516.277 176.419 cv
cp
516.277 179.456 mo
515.164 179.456 514.259 178.55 514.259 177.438 cv
514.259 176.325 515.164 175.419 516.277 175.419 cv
517.391 175.419 518.296 176.325 518.296 177.438 cv
518.296 178.55 517.391 179.456 516.277 179.456 cv
cp
f
516.278 162.922 mo
512.559 162.922 508.84 164.338 506.009 167.169 cv
503.267 169.912 501.756 173.559 501.756 177.438 cv
501.757 181.317 503.267 184.963 506.01 187.705 cv
508.752 190.448 512.398 191.959 516.277 191.96 cv
520.157 191.96 523.803 190.449 526.545 187.706 cv
529.288 184.962 530.799 181.316 530.799 177.437 cv
530.8 173.558 529.289 169.911 526.546 167.168 cv
523.715 164.338 519.996 162.922 516.278 162.922 cv
cp
516.278 192.96 mo
516.278 192.96 516.278 192.96 516.277 192.96 cv
512.132 192.959 508.233 191.344 505.303 188.412 cv
502.371 185.481 500.757 181.584 500.756 177.438 cv
500.756 173.292 502.37 169.394 505.302 166.462 cv
511.352 160.411 521.2 160.409 527.253 166.461 cv
527.253 166.461 li
530.185 169.393 531.8 173.291 531.799 177.437 cv
531.799 181.583 530.184 185.481 527.252 188.413 cv
524.321 191.344 520.424 192.96 516.278 192.96 cv
cp
f
516.278 166.323 mo
513.431 166.323 510.583 167.407 508.415 169.575 cv
506.315 171.675 505.159 174.467 505.159 177.438 cv
505.159 180.408 506.315 183.2 508.415 185.299 cv
510.515 187.399 513.308 188.557 516.277 188.557 cv
519.248 188.557 522.04 187.4 524.14 185.299 cv
528.475 180.963 528.476 173.909 524.141 169.574 cv
521.973 167.407 519.125 166.323 516.278 166.323 cv
cp
516.278 189.557 mo
516.278 189.557 516.278 189.557 516.277 189.557 cv
513.04 189.556 509.997 188.295 507.708 186.006 cv
505.419 183.718 504.159 180.675 504.159 177.438 cv
504.159 174.2 505.419 171.157 507.708 168.868 cv
512.433 164.143 520.121 164.143 524.848 168.867 cv
524.848 168.867 li
529.572 173.592 529.572 181.281 524.847 186.006 cv
522.559 188.296 519.516 189.557 516.278 189.557 cv
cp
f
532.632 194.5 mo
526.545 188.413 li
527.252 187.706 li
533.339 193.793 li
532.632 194.5 li
cp
f
531.247 196.591 mo
545.636 210.981 li
549.82 206.796 li
535.433 192.406 li
531.247 196.591 li
cp
545.636 212.395 mo
529.833 196.591 li
535.433 190.992 li
551.234 206.796 li
545.636 212.395 li
cp
f
502.839 70.877 mo
494.665 70.877 488.015 77.5269 488.015 85.7007 cv
488.015 93.8745 494.665 100.524 502.839 100.524 cv
546.212 100.524 li
555.894 100.524 563.769 92.6479 563.769 82.9668 cv
563.769 73.2856 555.894 65.4092 546.212 65.4092 cv
545.008 65.4092 543.797 65.5347 542.612 65.7817 cv
542.048 65.8994 li
542.011 65.3247 li
541.371 55.4346 533.111 47.6875 523.206 47.6875 cv
512.803 47.6875 504.339 56.1514 504.339 66.5547 cv
504.339 67.832 504.467 69.1079 504.721 70.3472 cv
504.854 71.0059 li
504.185 70.9453 li
503.741 70.9053 503.293 70.877 502.839 70.877 cv
cp
546.212 101.524 mo
502.839 101.524 li
494.113 101.524 487.015 94.4258 487.015 85.7007 cv
487.015 76.9756 494.113 69.877 502.839 69.877 cv
503.101 69.877 503.361 69.8857 503.62 69.9004 cv
503.434 68.8003 503.339 67.6777 503.339 66.5547 cv
503.339 55.6001 512.251 46.6875 523.206 46.6875 cv
533.448 46.6875 542.019 54.5522 542.964 64.6958 cv
544.038 64.5054 545.128 64.4092 546.212 64.4092 cv
556.444 64.4092 564.769 72.7339 564.769 82.9668 cv
564.769 93.1997 556.444 101.524 546.212 101.524 cv
cp
f
416.791 72.1011 mo
416.973 97.3408 431.158 101.388 431.303 101.426 cv
431.357 101.448 li
432.887 100.924 445.495 95.8672 445.445 72.0371 cv
438.579 71.8882 432.62 67.4282 431.173 66.2588 cv
429.709 67.4229 423.661 71.8901 416.791 72.1011 cv
cp
431.303 102.506 mo
430.981 102.37 li
430.897 102.354 415.789 98.1094 415.789 71.6089 cv
415.789 71.1089 li
416.289 71.1089 li
423.856 71.1089 430.782 65.2891 430.852 65.23 cv
431.179 64.9517 li
431.503 65.2329 li
431.57 65.2915 438.293 71.04 445.8 71.0405 cv
445.847 71.0405 445.892 71.0405 445.938 71.04 cv
446.438 71.0352 li
446.442 71.5352 li
446.689 98.0342 431.622 102.42 431.47 102.461 cv
431.303 102.506 li
cp
f
431.278 90.9619 mo
423.132 82.6064 li
423.849 81.9082 li
431.073 89.3193 li
439.014 75.6064 li
439.879 76.1074 li
431.278 90.9619 li
cp
f
410.292 95.4072 mo
403.549 95.4072 397.237 92.7466 392.522 87.915 cv
392.475 87.8652 392.436 87.8159 392.401 87.7676 cv
387.965 83.1812 385.485 77.0977 385.458 70.6826 cv
385.455 70.5708 li
385.455 64.2759 387.828 58.2661 392.139 53.6475 cv
392.14 53.6387 392.186 53.5703 392.266 53.5088 cv
392.362 53.3926 392.523 53.2344 392.685 53.0762 cv
392.781 52.9751 li
393.028 52.7305 393.278 52.4927 393.533 52.2593 cv
393.634 52.0674 li
393.744 52.0654 li
398.287 47.9858 404.148 45.7388 410.27 45.7339 cv
416.435 45.7388 422.296 47.9844 426.834 52.0625 cv
426.887 52.0625 li
427.016 52.2251 li
427.284 52.4717 427.547 52.7197 427.806 52.9785 cv
427.889 53.063 li
428.099 53.2725 428.242 53.415 428.381 53.5654 cv
428.457 53.6543 li
432.146 57.6128 434.407 62.541 434.985 67.8945 cv
433.991 68.002 li
433.436 62.8647 431.267 58.1353 427.715 54.3247 cv
427.65 54.2456 li
427.517 54.103 427.384 53.9722 427.252 53.8418 cv
427.15 53.7373 li
426.896 53.4834 426.676 53.2729 426.458 53.0708 cv
426.408 53.0708 li
426.288 52.9165 li
421.916 48.9341 416.243 46.7388 410.31 46.7339 cv
404.363 46.7388 398.709 48.9189 394.339 52.876 cv
394.239 53.0674 li
394.131 53.0684 li
393.912 53.2695 393.697 53.4746 393.484 53.6865 cv
393.405 53.7695 li
393.236 53.9365 393.087 54.082 392.941 54.2412 cv
392.869 54.3301 li
388.733 58.7622 386.455 64.5303 386.455 70.5708 cv
386.458 70.6758 li
386.483 76.8345 388.864 82.6729 393.159 87.1182 cv
393.242 87.2207 li
397.764 91.8535 403.82 94.4072 410.292 94.4072 cv
413.926 94.4072 417.401 93.6196 420.623 92.0669 cv
421.057 92.9673 li
417.699 94.5864 414.077 95.4072 410.292 95.4072 cv
cp
f
409.792 94.9072 mo
409.77 46.2339 li
410.77 46.2339 li
410.792 94.9072 li
409.792 94.9072 li
cp
f
410.352 95.4033 mo
410.231 94.4111 li
412.896 94.084 415.72 91.2705 417.977 86.6914 cv
418.873 87.1338 li
416.465 92.0205 413.359 95.0352 410.352 95.4033 cv
cp
f
422.798 70.4722 mo
421.798 70.4497 li
421.941 64.1172 420.603 52.6074 410.025 46.6699 cv
410.516 45.7979 li
421.549 51.9912 422.946 63.9155 422.798 70.4722 cv
cp
f
410.186 95.4033 mo
405.345 94.8101 400.443 87.3394 398.53 77.6396 cv
396.351 66.5889 398.227 52.4204 410.025 45.7979 cv
410.516 46.6699 li
399.182 53.0313 397.399 66.7388 399.512 77.4463 cv
401.313 86.584 405.955 93.877 410.308 94.4111 cv
410.186 95.4033 li
cp
f
411.143 59.9229 mo
404.025 59.9229 396.88 58.0269 391.748 54.9707 cv
392.26 54.1113 li
401.651 59.7051 417.96 61.3179 427.935 54.1699 cv
428.518 54.9824 li
423.688 58.4443 417.426 59.9229 411.143 59.9229 cv
cp
f
392.268 87.0264 mo
391.756 86.167 li
397.504 82.7456 407.629 80.0298 417.303 81.6689 cv
417.135 82.6553 li
407.714 81.0562 397.857 83.6992 392.268 87.0264 cv
cp
f
385.945 71.0825 mo
385.945 70.0825 li
422.298 70.0649 li
422.298 71.0649 li
385.945 71.0825 li
cp
f
442.945 323.011 mo
387.739 323.011 li
387.739 272.195 li
388.739 272.195 li
388.739 322.011 li
442.945 322.011 li
442.945 323.011 li
cp
f
393.151 322.011 mo
399.21 322.011 li
399.21 304.038 li
393.151 304.038 li
393.151 322.011 li
cp
400.21 323.011 mo
392.151 323.011 li
392.151 303.038 li
400.21 303.038 li
400.21 323.011 li
cp
f
404.033 322.011 mo
410.092 322.011 li
410.092 295.656 li
404.033 295.656 li
404.033 322.011 li
cp
411.092 323.011 mo
403.033 323.011 li
403.033 294.656 li
411.092 294.656 li
411.092 323.011 li
cp
f
414.916 322.011 mo
420.975 322.011 li
420.975 298.451 li
414.916 298.451 li
414.916 322.011 li
cp
421.975 323.011 mo
413.916 323.011 li
413.916 297.451 li
421.975 297.451 li
421.975 323.011 li
cp
f
425.798 322.011 mo
431.856 322.011 li
431.856 284.921 li
425.798 284.921 li
425.798 322.011 li
cp
432.856 323.011 mo
424.798 323.011 li
424.798 283.921 li
432.856 283.921 li
432.856 323.011 li
cp
f
393.129 279.782 mo
388.239 273.046 li
383.35 279.782 li
382.541 279.194 li
388.239 271.344 li
393.938 279.194 li
393.129 279.782 li
cp
f
435.946 328.209 mo
435.358 327.4 li
442.094 322.511 li
435.358 317.62 li
435.946 316.812 li
443.797 322.511 li
435.946 328.209 li
cp
f
437.173 431.722 mo
385.445 431.722 li
385.445 390.62 li
437.173 390.62 li
437.173 422.286 li
436.173 422.286 li
436.173 391.62 li
386.445 391.62 li
386.445 430.722 li
436.173 430.722 li
436.173 428.674 li
437.173 428.674 li
437.173 431.722 li
cp
f
436.673 397.917 mo
385.945 397.917 li
385.945 396.917 li
436.673 396.917 li
436.673 397.917 li
cp
f
391.059 394.769 mo
388.051 394.769 li
388.051 393.769 li
391.059 393.769 li
391.059 394.769 li
cp
f
395.87 394.769 mo
392.862 394.769 li
392.862 393.769 li
395.87 393.769 li
395.87 394.769 li
cp
f
400.682 394.769 mo
397.675 394.769 li
397.675 393.769 li
400.682 393.769 li
400.682 394.769 li
cp
f
403.161 404.295 mo
390.156 404.295 li
390.156 403.295 li
403.161 403.295 li
403.161 404.295 li
cp
f
417.364 420.433 mo
390.156 420.433 li
390.156 419.433 li
417.364 419.433 li
417.364 420.433 li
cp
f
414.182 415.103 mo
390.156 415.103 li
390.156 414.103 li
414.182 414.103 li
414.182 415.103 li
cp
f
414.52 409.773 mo
390.156 409.773 li
390.156 408.773 li
414.52 408.773 li
414.52 409.773 li
cp
f
411.309 425.763 mo
390.156 425.763 li
390.156 424.763 li
411.309 424.763 li
411.309 425.763 li
cp
f
423.71 403.286 mo
421.34 403.286 418.97 404.189 417.166 405.992 cv
415.419 407.739 414.457 410.063 414.457 412.534 cv
414.457 415.006 415.42 417.329 417.167 419.076 cv
418.914 420.824 421.237 421.786 423.709 421.786 cv
423.709 421.786 li
426.181 421.786 428.504 420.824 430.251 419.076 cv
433.858 415.469 433.859 409.599 430.252 405.991 cv
428.448 404.188 426.079 403.286 423.71 403.286 cv
cp
423.71 422.786 mo
423.709 422.786 423.709 422.786 423.709 422.786 cv
420.971 422.786 418.395 421.72 416.46 419.783 cv
414.523 417.848 413.457 415.273 413.457 412.534 cv
413.457 409.796 414.522 407.221 416.459 405.285 cv
420.456 401.288 426.96 401.288 430.959 405.284 cv
430.959 405.284 li
434.956 409.281 434.956 415.785 430.958 419.783 cv
429.022 421.72 426.448 422.786 423.71 422.786 cv
cp
f
423.709 406.037 mo
422.045 406.037 420.38 406.67 419.112 407.938 cv
417.885 409.165 417.209 410.798 417.209 412.534 cv
417.209 414.271 417.886 415.902 419.113 417.13 cv
420.341 418.357 421.973 419.034 423.709 419.034 cv
425.445 419.034 427.077 418.358 428.305 417.13 cv
429.532 415.902 430.209 414.27 430.209 412.533 cv
430.209 410.798 429.533 409.165 428.306 407.938 cv
427.039 406.671 425.374 406.037 423.709 406.037 cv
cp
423.709 420.034 mo
421.706 420.034 419.822 419.254 418.406 417.837 cv
416.99 416.421 416.21 414.538 416.209 412.534 cv
416.209 410.53 416.989 408.647 418.405 407.231 cv
421.329 404.306 426.089 404.308 429.013 407.231 cv
430.43 408.647 431.209 410.53 431.209 412.534 cv
431.209 414.537 430.429 416.421 429.012 417.837 cv
427.596 419.254 425.713 420.034 423.709 420.034 cv
cp
f
434.202 423.735 mo
430.251 419.783 li
430.958 419.076 li
434.909 423.028 li
434.202 423.735 li
cp
f
433.676 424.969 mo
442.77 434.063 li
445.238 431.594 li
436.145 422.5 li
433.676 424.969 li
cp
442.77 435.477 mo
432.262 424.969 li
436.145 421.086 li
446.652 431.594 li
442.77 435.477 li
cp
f
157.552 210.268 mo
216.552 210.268 li
216.552 163.836 li
157.552 163.836 li
157.552 210.268 li
cp
217.552 211.268 mo
156.552 211.268 li
156.552 162.836 li
217.552 162.836 li
217.552 211.268 li
cp
f
217.052 171.284 mo
157.052 171.284 li
157.052 170.284 li
217.052 170.284 li
217.052 171.284 li
cp
f
163.1 167.56 mo
159.542 167.56 li
159.542 166.56 li
163.1 166.56 li
163.1 167.56 li
cp
f
168.791 167.56 mo
165.233 167.56 li
165.233 166.56 li
168.791 166.56 li
168.791 167.56 li
cp
f
174.483 167.56 mo
170.926 167.56 li
170.926 166.56 li
174.483 166.56 li
174.483 167.56 li
cp
f
177.415 178.829 mo
162.033 178.829 li
162.033 177.829 li
177.415 177.829 li
177.415 178.829 li
cp
f
207.21 197.916 mo
162.033 197.916 li
162.033 196.916 li
207.21 196.916 li
207.21 197.916 li
cp
f
207.21 191.611 mo
162.033 191.611 li
162.033 190.611 li
207.21 190.611 li
207.21 191.611 li
cp
f
207.21 185.307 mo
162.033 185.307 li
162.033 184.307 li
207.21 184.307 li
207.21 185.307 li
cp
f
187.052 204.22 mo
162.033 204.22 li
162.033 203.22 li
187.052 203.22 li
187.052 204.22 li
cp
f
383.445 210.268 mo
442.445 210.268 li
442.445 163.836 li
383.445 163.836 li
383.445 210.268 li
cp
443.445 211.268 mo
382.445 211.268 li
382.445 162.836 li
443.445 162.836 li
443.445 211.268 li
cp
f
442.945 171.284 mo
382.945 171.284 li
382.945 170.284 li
442.945 170.284 li
442.945 171.284 li
cp
f
388.993 167.56 mo
385.435 167.56 li
385.435 166.56 li
388.993 166.56 li
388.993 167.56 li
cp
f
394.685 167.56 mo
391.127 167.56 li
391.127 166.56 li
394.685 166.56 li
394.685 167.56 li
cp
f
400.376 167.56 mo
396.819 167.56 li
396.819 166.56 li
400.376 166.56 li
400.376 167.56 li
cp
f
399.169 193.145 mo
410.127 193.145 li
410.127 188.293 li
399.169 188.293 li
399.169 193.145 li
cp
411.127 194.145 mo
398.169 194.145 li
398.169 187.293 li
411.127 187.293 li
411.127 194.145 li
cp
f
415.763 193.145 mo
426.721 193.145 li
426.721 188.293 li
415.763 188.293 li
415.763 193.145 li
cp
427.721 194.145 mo
414.763 194.145 li
414.763 187.293 li
427.721 187.293 li
427.721 194.145 li
cp
f
407.466 181.961 mo
418.424 181.961 li
418.424 177.109 li
407.466 177.109 li
407.466 181.961 li
cp
419.424 182.961 mo
406.466 182.961 li
406.466 176.109 li
419.424 176.109 li
419.424 182.961 li
cp
f
395.931 204.442 mo
401.026 204.442 li
401.026 199.477 li
395.931 199.477 li
395.931 204.442 li
cp
402.026 205.442 mo
394.931 205.442 li
394.931 198.477 li
402.026 198.477 li
402.026 205.442 li
cp
f
405.575 204.442 mo
410.671 204.442 li
410.671 199.477 li
405.575 199.477 li
405.575 204.442 li
cp
411.671 205.442 mo
404.575 205.442 li
404.575 198.477 li
411.671 198.477 li
411.671 205.442 li
cp
f
415.219 204.442 mo
420.315 204.442 li
420.315 199.477 li
415.219 199.477 li
415.219 204.442 li
cp
421.315 205.442 mo
414.219 205.442 li
414.219 198.477 li
421.315 198.477 li
421.315 205.442 li
cp
f
424.863 204.442 mo
429.96 204.442 li
429.96 199.477 li
424.863 199.477 li
424.863 204.442 li
cp
430.96 205.442 mo
423.863 205.442 li
423.863 198.477 li
430.96 198.477 li
430.96 205.442 li
cp
f
413.445 185.127 mo
412.445 185.127 li
412.445 182.331 li
413.445 182.331 li
413.445 185.127 li
cp
f
421.742 187.793 mo
420.742 187.793 li
420.742 185.627 li
405.148 185.627 li
405.148 187.793 li
404.148 187.793 li
404.148 184.627 li
421.742 184.627 li
421.742 187.793 li
cp
f
405.148 196.311 mo
404.148 196.311 li
404.148 193.645 li
405.148 193.645 li
405.148 196.311 li
cp
f
408.623 198.977 mo
407.623 198.977 li
407.623 196.311 li
408.623 196.311 li
408.623 198.977 li
cp
f
421.742 196.311 mo
420.742 196.311 li
420.742 193.645 li
421.742 193.645 li
421.742 196.311 li
cp
f
418.268 198.977 mo
417.268 198.977 li
417.268 196.311 li
418.268 196.311 li
418.268 198.977 li
cp
f
427.911 198.977 mo
426.911 198.977 li
426.912 196.811 li
398.978 196.811 li
398.978 198.977 li
397.978 198.977 li
397.978 195.811 li
427.912 195.811 li
427.911 198.977 li
cp
f
270.5 205.446 mo
329.5 205.446 li
329.5 168.658 li
270.5 168.658 li
270.5 205.446 li
cp
330.5 206.446 mo
269.5 206.446 li
269.5 167.658 li
330.5 167.658 li
330.5 206.446 li
cp
f
300 194.323 mo
269.676 168.539 li
270.324 167.777 li
300 193.01 li
329.676 167.777 li
330.324 168.539 li
300 194.323 li
cp
f
270.309 206.34 mo
269.691 205.553 li
292.819 187.429 li
293.436 188.216 li
270.309 206.34 li
cp
f
329.691 206.34 mo
306.564 188.216 li
307.181 187.429 li
330.309 205.553 li
329.691 206.34 li
cp
f
522.954 416.59 mo
522.247 415.883 li
548.86 389.269 li
549.567 389.976 li
522.954 416.59 li
cp
f
541.393 397.443 mo
547.983 397.66 li
555.223 390.421 li
548.633 390.204 li
548.416 383.614 li
541.177 390.854 li
541.393 397.443 li
cp
548.384 398.674 mo
540.424 398.412 li
540.163 390.453 li
549.34 381.276 li
549.602 389.235 li
557.56 389.497 li
548.384 398.674 li
cp
f
522.601 413.236 mo
520.946 413.236 519.601 414.582 519.601 416.236 cv
519.601 417.891 520.946 419.236 522.601 419.236 cv
524.255 419.236 525.601 417.891 525.601 416.236 cv
525.601 414.582 524.255 413.236 522.601 413.236 cv
cp
522.601 420.236 mo
520.394 420.236 518.601 418.442 518.601 416.236 cv
518.601 414.03 520.394 412.236 522.601 412.236 cv
524.807 412.236 526.601 414.03 526.601 416.236 cv
526.601 418.442 524.807 420.236 522.601 420.236 cv
cp
f
522.601 406.666 mo
517.324 406.666 513.031 410.959 513.031 416.236 cv
513.031 421.513 517.324 425.806 522.601 425.806 cv
527.878 425.806 532.171 421.513 532.171 416.236 cv
532.171 410.959 527.878 406.666 522.601 406.666 cv
cp
522.601 426.806 mo
516.772 426.806 512.031 422.065 512.031 416.236 cv
512.031 410.408 516.772 405.666 522.601 405.666 cv
528.429 405.666 533.171 410.408 533.171 416.236 cv
533.171 422.065 528.429 426.806 522.601 426.806 cv
cp
f
522.601 400.097 mo
513.702 400.097 506.462 407.337 506.462 416.236 cv
506.462 425.135 513.702 432.375 522.601 432.375 cv
531.5 432.375 538.74 425.135 538.74 416.236 cv
538.74 407.337 531.5 400.097 522.601 400.097 cv
cp
522.601 433.375 mo
513.15 433.375 505.462 425.687 505.462 416.236 cv
505.462 406.785 513.15 399.097 522.601 399.097 cv
532.052 399.097 539.74 406.785 539.74 416.236 cv
539.74 425.687 532.052 433.375 522.601 433.375 cv
cp
f
522.601 393.527 mo
510.079 393.527 499.892 403.715 499.892 416.236 cv
499.892 428.758 510.079 438.945 522.601 438.945 cv
535.122 438.945 545.31 428.758 545.31 416.236 cv
545.31 403.715 535.122 393.527 522.601 393.527 cv
cp
522.601 439.945 mo
509.527 439.945 498.892 429.31 498.892 416.236 cv
498.892 403.163 509.527 392.527 522.601 392.527 cv
535.674 392.527 546.31 403.163 546.31 416.236 cv
546.31 429.31 535.674 439.945 522.601 439.945 cv
cp
f
305.532 547.633 mo
304.532 547.633 li
304.532 546.353 li
304.507 546.262 303.777 541.832 310.298 530.822 cv
311.117 529.815 311.776 528.749 312.302 527.595 cv
312.352 527.505 li
312.436 527.373 312.456 527.315 312.475 527.241 cv
313.25 525.357 313.632 523.441 313.632 521.472 cv
313.632 513.597 307.516 507.19 299.998 507.19 cv
292.481 507.19 286.365 513.597 286.365 521.472 cv
286.365 523.443 286.746 525.359 287.498 527.168 cv
287.54 527.312 287.561 527.374 287.606 527.442 cv
287.695 527.595 li
288.222 528.751 288.88 529.815 289.654 530.761 cv
296.221 541.832 295.491 546.262 295.456 546.444 cv
295.465 547.632 li
294.465 547.632 li
294.465 546.353 li
294.479 546.223 295.113 541.925 288.837 531.332 cv
288.052 530.383 287.347 529.243 286.785 528.009 cv
286.642 527.795 286.586 527.618 286.552 527.485 cv
285.772 525.621 285.365 523.576 285.365 521.472 cv
285.365 513.045 291.93 506.19 299.998 506.19 cv
308.067 506.19 314.632 513.045 314.632 521.472 cv
314.632 523.573 314.225 525.619 313.422 527.551 cv
313.413 527.61 313.359 527.789 313.229 527.988 cv
312.651 529.242 311.945 530.381 311.115 531.395 cv
304.885 541.925 305.518 546.223 305.524 546.265 cv
305.532 547.633 li
cp
f
298.669 547.524 mo
296.642 524.642 li
294.8 518.888 li
298.564 522.022 li
299.998 519.297 li
301.432 522.022 li
305.194 518.887 li
303.352 524.643 li
301.326 547.524 li
300.33 547.437 li
302.383 524.391 li
303.194 521.854 li
301.123 523.58 li
299.998 521.443 li
298.874 523.58 li
296.799 521.853 li
297.633 524.498 li
299.665 547.437 li
298.669 547.524 li
cp
f
297.108 551.075 mo
296.205 551.075 295.441 551.555 295.441 552.122 cv
295.441 552.69 296.205 553.169 297.108 553.169 cv
302.889 553.169 li
303.793 553.169 304.557 552.69 304.557 552.122 cv
304.557 551.555 303.793 551.075 302.889 551.075 cv
297.108 551.075 li
cp
302.889 554.169 mo
297.108 554.169 li
295.613 554.169 294.441 553.27 294.441 552.122 cv
294.441 550.975 295.613 550.075 297.108 550.075 cv
302.889 550.075 li
304.385 550.075 305.557 550.975 305.557 552.122 cv
305.557 553.27 304.385 554.169 302.889 554.169 cv
cp
f
297.834 554.169 mo
297.929 554.593 298.491 555.392 299.106 555.392 cv
300.892 555.392 li
301.507 555.392 302.068 554.593 302.163 554.169 cv
297.834 554.169 li
cp
300.892 556.392 mo
299.106 556.392 li
297.763 556.392 296.82 554.877 296.82 554.058 cv
296.82 553.169 li
302.677 553.169 li
302.677 553.629 li
303.177 553.629 li
303.175 554.129 li
303.123 554.962 302.196 556.392 300.892 556.392 cv
cp
f
295.889 547.981 mo
294.985 547.981 294.222 548.46 294.222 549.027 cv
294.222 549.596 294.985 550.075 295.889 550.075 cv
304.108 550.075 li
305.012 550.075 305.775 549.596 305.775 549.027 cv
305.775 548.46 305.012 547.981 304.108 547.981 cv
295.889 547.981 li
cp
304.108 551.075 mo
295.889 551.075 li
294.394 551.075 293.222 550.176 293.222 549.027 cv
293.222 547.88 294.394 546.981 295.889 546.981 cv
304.108 546.981 li
305.603 546.981 306.775 547.88 306.775 549.027 cv
306.775 550.176 305.603 551.075 304.108 551.075 cv
cp
f
299.498 502.812 mo
299.498 495.892 li
300.498 495.892 li
300.498 502.812 li
299.498 502.812 li
cp
f
309.483 505.44 mo
308.612 504.948 li
312.02 498.925 li
312.891 499.417 li
309.483 505.44 li
cp
f
316.445 512.968 mo
315.975 512.085 li
322.079 508.822 li
322.55 509.705 li
316.445 512.968 li
cp
f
290.516 505.442 mo
287.051 499.317 li
287.921 498.825 li
291.386 504.95 li
290.516 505.442 li
cp
f
283.313 512.84 mo
277.45 509.706 li
277.922 508.823 li
283.784 511.957 li
283.313 512.84 li
cp
f
59.7529 418.515 mo
64.3784 418.515 li
64.3784 411.474 li
59.7529 411.474 li
59.7529 418.515 li
cp
65.3784 419.515 mo
58.7529 419.515 li
58.7529 410.474 li
65.3784 410.474 li
65.3784 419.515 li
cp
f
67.7798 418.515 mo
72.4053 418.515 li
72.4053 405.629 li
67.7798 405.629 li
67.7798 418.515 li
cp
73.4053 419.515 mo
66.7798 419.515 li
66.7798 404.629 li
73.4053 404.629 li
73.4053 419.515 li
cp
f
75.8066 418.515 mo
80.4321 418.515 li
80.4321 399.783 li
75.8066 399.783 li
75.8066 418.515 li
cp
81.4321 419.515 mo
74.8066 419.515 li
74.8066 398.783 li
81.4321 398.783 li
81.4321 419.515 li
cp
f
83.8335 418.515 mo
88.459 418.515 li
88.459 403.434 li
83.8335 403.434 li
83.8335 418.515 li
cp
89.459 419.515 mo
82.8335 419.515 li
82.8335 402.434 li
89.459 402.434 li
89.459 419.515 li
cp
f
48.5806 425.456 mo
99.6313 425.456 li
99.6313 392.841 li
48.5806 392.841 li
48.5806 425.456 li
cp
100.631 426.456 mo
47.5806 426.456 li
47.5806 391.841 li
100.631 391.841 li
100.631 426.456 li
cp
f
74.4263 442.948 mo
73.4263 442.942 li
73.5181 425.953 li
74.5181 425.959 li
74.4263 442.948 li
cp
f
74.7231 392.345 mo
73.7231 392.337 li
73.7876 382.94 li
74.7876 382.948 li
74.7231 392.345 li
cp
f
63.188 443.124 mo
62.2544 442.767 li
68.7603 425.777 li
69.6938 426.135 li
63.188 443.124 li
cp
f
85.0259 443.124 mo
78.52 426.135 li
79.4536 425.777 li
85.9595 442.767 li
85.0259 443.124 li
cp
f
44.606 547.494 mo
103.606 547.494 li
103.606 508.036 li
44.606 508.036 li
44.606 547.494 li
cp
104.606 548.494 mo
43.606 548.494 li
43.606 507.036 li
104.606 507.036 li
104.606 548.494 li
cp
f
84.354 507.536 mo
83.354 507.536 li
83.354 498.289 li
64.8618 498.289 li
64.8618 507.536 li
63.8618 507.536 li
63.8618 497.289 li
84.354 497.289 li
84.354 507.536 li
cp
f
68.2178 528.585 mo
44.0049 523.585 li
44.207 522.606 li
68.4199 527.606 li
68.2178 528.585 li
cp
f
79.9941 528.585 mo
79.792 527.606 li
104.005 522.606 li
104.207 523.585 li
79.9941 528.585 li
cp
f
68.8188 531.096 mo
79.3931 531.096 li
79.3931 525.096 li
68.8188 525.096 li
68.8188 531.096 li
cp
80.3931 532.096 mo
67.8188 532.096 li
67.8188 524.096 li
80.3931 524.096 li
80.3931 532.096 li
cp
f
217.052 413.445 mo
193.831 413.445 li
193.831 412.445 li
217.052 412.445 li
217.052 413.445 li
cp
f
180.272 413.445 mo
157.052 413.445 li
157.052 412.445 li
180.272 412.445 li
180.272 413.445 li
cp
f
187.552 442.945 mo
186.552 442.945 li
186.552 426.843 li
187.552 426.843 li
187.552 442.945 li
cp
f
187.552 399.047 mo
186.552 399.047 li
186.552 382.945 li
187.552 382.945 li
187.552 399.047 li
cp
f
180.349 415.789 mo
179.966 414.89 179.772 413.933 179.772 412.945 cv
179.772 412.082 179.922 411.237 180.217 410.434 cv
181.156 410.779 li
180.901 411.471 180.772 412.2 180.772 412.945 cv
180.772 413.797 180.939 414.622 181.269 415.398 cv
180.349 415.789 li
cp
f
193.759 415.778 mo
192.838 415.39 li
193.165 414.615 193.331 413.793 193.331 412.945 cv
193.331 412.241 193.216 411.552 192.989 410.895 cv
193.935 410.568 li
194.198 411.33 194.331 412.13 194.331 412.945 cv
194.331 413.928 194.139 414.881 193.759 415.778 cv
cp
f
200.389 423.413 mo
199.602 422.796 li
201.829 419.962 203.006 416.557 203.006 412.945 cv
203.006 404.148 195.849 396.991 187.052 396.991 cv
178.255 396.991 171.098 404.148 171.098 412.945 cv
171.098 416.556 172.275 419.962 174.5 422.795 cv
173.714 423.412 li
171.349 420.401 170.098 416.782 170.098 412.945 cv
170.098 403.597 177.704 395.991 187.052 395.991 cv
196.4 395.991 204.006 403.597 204.006 412.945 cv
204.006 416.782 202.755 420.402 200.389 423.413 cv
cp
f
187.052 429.898 mo
183.823 429.898 180.682 428.987 177.97 427.264 cv
178.506 426.42 li
181.058 428.041 184.013 428.898 187.052 428.898 cv
190.089 428.898 193.043 428.042 195.594 426.422 cv
196.13 427.266 li
193.418 428.988 190.279 429.898 187.052 429.898 cv
cp
f
187.052 387.317 mo
172.921 387.317 161.424 398.815 161.424 412.945 cv
161.424 427.076 172.921 438.573 187.052 438.573 cv
201.183 438.573 212.68 427.076 212.68 412.945 cv
212.68 398.815 201.183 387.317 187.052 387.317 cv
cp
187.052 439.573 mo
172.369 439.573 160.424 427.628 160.424 412.945 cv
160.424 398.263 172.369 386.317 187.052 386.317 cv
201.735 386.317 213.68 398.263 213.68 412.945 cv
213.68 427.628 201.735 439.573 187.052 439.573 cv
cp
f
173.348 426.344 mo
200.756 426.344 li
197.773 417.37 192.292 415.207 189.246 414.722 cv
187.967 414.516 187.12 414.61 187.112 414.61 cv
187.054 414.617 li
186.995 414.61 li
186.986 414.609 186.19 414.521 184.981 414.701 cv
184.531 414.768 184.066 414.866 183.6 414.995 cv
180.316 415.902 175.916 418.615 173.348 426.344 cv
cp
202.118 427.344 mo
171.986 427.344 li
172.185 426.696 li
174.852 418.038 179.719 415.03 183.333 414.031 cv
183.84 413.892 184.345 413.784 184.835 413.712 cv
186.188 413.511 187.077 413.612 187.113 413.618 cv
187.112 413.623 li
187.913 413.498 189.385 413.731 189.404 413.733 cv
192.751 414.268 198.83 416.661 201.919 426.696 cv
202.118 427.344 li
cp
f
187.052 399.547 mo
183.174 399.547 180.019 402.702 180.019 406.581 cv
180.019 410.459 183.174 413.614 187.052 413.614 cv
190.93 413.614 194.085 410.459 194.085 406.581 cv
194.085 402.702 190.93 399.547 187.052 399.547 cv
cp
187.052 414.614 mo
182.623 414.614 179.019 411.011 179.019 406.581 cv
179.019 402.151 182.623 398.547 187.052 398.547 cv
191.481 398.547 195.085 402.151 195.085 406.581 cv
195.085 411.011 191.481 414.614 187.052 414.614 cv
cp
f
293.621 329.301 mo
292.645 329.084 li
294.26 321.797 li
295.236 322.014 li
293.621 329.301 li
cp
f
330 315.423 mo
270 315.423 li
270 314.423 li
330 314.423 li
330 315.423 li
cp
f
300.004 286.423 mo
294.766 286.423 290.504 290.685 290.504 295.923 cv
290.504 301.161 294.766 305.423 300.004 305.423 cv
305.242 305.423 309.504 301.161 309.504 295.923 cv
309.504 290.685 305.242 286.423 300.004 286.423 cv
cp
300.004 306.423 mo
294.214 306.423 289.504 301.713 289.504 295.923 cv
289.504 290.133 294.214 285.423 300.004 285.423 cv
305.794 285.423 310.504 290.133 310.504 295.923 cv
310.504 301.713 305.794 306.423 300.004 306.423 cv
cp
f
306.722 303.348 mo
299.504 296.13 li
299.504 285.923 li
300.504 285.923 li
300.504 295.716 li
307.429 302.641 li
306.722 303.348 li
cp
f
300.112 296.411 mo
299.896 295.435 li
309.661 293.275 li
309.878 294.252 li
300.112 296.411 li
cp
f
308.642 300.99 mo
299.773 296.366 li
300.235 295.48 li
309.104 300.103 li
308.642 300.99 li
cp
f
274.25 310.675 mo
325.758 310.675 li
325.758 281.671 li
325.758 281.395 325.533 281.171 325.258 281.171 cv
274.75 281.171 li
274.474 281.171 274.25 281.395 274.25 281.671 cv
274.25 310.675 li
cp
326.758 311.675 mo
273.25 311.675 li
273.25 281.671 li
273.25 280.844 273.923 280.171 274.75 280.171 cv
325.258 280.171 li
326.085 280.171 326.758 280.844 326.758 281.671 cv
326.758 311.675 li
cp
f
272 277.308 mo
271.173 277.308 270.5 277.981 270.5 278.808 cv
270.5 319.906 li
270.5 320.733 271.173 321.406 272 321.406 cv
328 321.405 li
328.827 321.405 329.5 320.732 329.5 319.905 cv
329.5 278.808 li
329.5 277.981 328.827 277.308 328 277.308 cv
272 277.308 li
cp
272 322.406 mo
270.622 322.406 269.5 321.285 269.5 319.906 cv
269.5 278.808 li
269.5 277.429 270.622 276.308 272 276.308 cv
328 276.308 li
329.379 276.308 330.5 277.429 330.5 278.808 cv
330.5 319.905 li
330.5 321.284 329.379 322.405 328 322.405 cv
272 322.406 li
cp
f
303 319.03 mo
297 319.03 li
297 318.03 li
303 318.03 li
303 319.03 li
cp
f
306.379 329.301 mo
304.764 322.014 li
305.74 321.797 li
307.355 329.084 li
306.379 329.301 li
cp
f
311.15 329.692 mo
288.85 329.692 li
288.85 328.692 li
311.15 328.692 li
311.15 329.692 li
cp
f
548.436 500.174 mo
544.931 502.961 530.51 513.077 505.995 513.077 cv
500.7 513.077 496.392 517.386 496.392 522.682 cv
496.392 527.977 500.7 532.285 505.995 532.285 cv
530.51 532.285 544.931 542.401 548.436 545.189 cv
548.436 500.174 li
cp
549.436 547.401 mo
548.597 546.624 li
548.452 546.49 533.865 533.285 505.995 533.285 cv
500.148 533.285 495.392 528.528 495.392 522.682 cv
495.392 516.834 500.148 512.077 505.995 512.077 cv
533.865 512.077 548.452 498.872 548.597 498.738 cv
549.436 497.962 li
549.436 547.401 li
cp
f
548.516 530.339 mo
548.516 529.339 li
552.307 529.339 555.392 526.353 555.392 522.682 cv
555.392 519.011 552.307 516.024 548.516 516.024 cv
548.516 515.024 li
552.858 515.024 556.392 518.459 556.392 522.682 cv
556.392 526.904 552.858 530.339 548.516 530.339 cv
cp
f
510.815 532.937 mo
509.815 532.937 li
509.815 512.472 li
510.815 512.472 li
510.815 532.937 li
cp
f
523.831 553.178 mo
511.676 553.178 li
504.093 532.961 li
505.028 532.609 li
512.369 552.178 li
522.392 552.178 li
515.443 533.528 li
516.381 533.179 li
523.831 553.178 li
cp
f
84.0811 270.5 mo
78.9927 270.5 74.8525 274.64 74.8525 279.729 cv
74.8525 284.817 78.9927 288.958 84.0811 288.958 cv
89.1694 288.958 93.3096 284.817 93.3096 279.729 cv
93.3096 274.64 89.1694 270.5 84.0811 270.5 cv
cp
84.0811 289.958 mo
78.4409 289.958 73.8525 285.369 73.8525 279.729 cv
73.8525 274.088 78.4409 269.5 84.0811 269.5 cv
89.7212 269.5 94.3096 274.088 94.3096 279.729 cv
94.3096 285.369 89.7212 289.958 84.0811 289.958 cv
cp
f
55.5176 295.788 mo
50.4292 295.788 46.2891 299.928 46.2891 305.017 cv
46.2891 310.106 50.4292 314.245 55.5176 314.245 cv
60.606 314.245 64.7461 310.106 64.7461 305.017 cv
64.7461 299.928 60.606 295.788 55.5176 295.788 cv
cp
55.5176 315.245 mo
49.8774 315.245 45.2891 310.656 45.2891 305.017 cv
45.2891 299.377 49.8774 294.788 55.5176 294.788 cv
61.1577 294.788 65.7461 299.377 65.7461 305.017 cv
65.7461 310.656 61.1577 315.245 55.5176 315.245 cv
cp
f
92.6943 311.043 mo
87.606 311.043 83.4658 315.183 83.4658 320.272 cv
83.4658 325.36 87.606 329.5 92.6943 329.5 cv
97.7827 329.5 101.923 325.36 101.923 320.272 cv
101.923 315.183 97.7827 311.043 92.6943 311.043 cv
cp
92.6943 330.5 mo
87.0542 330.5 82.4658 325.911 82.4658 320.272 cv
82.4658 314.632 87.0542 310.043 92.6943 310.043 cv
98.3345 310.043 102.923 314.632 102.923 320.272 cv
102.923 325.911 98.3345 330.5 92.6943 330.5 cv
cp
f
63.126 298.949 mo
62.4629 298.2 li
76.4731 285.796 li
77.1362 286.545 li
63.126 298.949 li
cp
f
83.5054 317.041 mo
64.3247 309.172 li
64.7046 308.246 li
83.8853 316.115 li
83.5054 317.041 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: ( ) ()
%%Title: (Line Circle Website Development Icons.eps)
%%CreationDate: 12/5/2016 2:58 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B7&XZdQdZB51d4"!?<d1K+UBlj+%EP3+@M]'HfXf#Rf;@R2>nLrcCsA&WGl=c40P&]=(S;3`P=CqK99ck%<<aG&)E5OZ*3q
%F+mj"0dO9I:rjCJj$0$&a833p+/]AJ6P`Z%ILJg<32Fh<eR:u6%Z7,\eb]6'd5K5JSh'D"mCLTn#.UE01:[sC;tRMq(hQ8Y\AVb\
%'h7$krCn@FJi`BW.Z_=Z3hWFI%0g2KTK+j5l[5/i"dB5/iCGLNJIc3L*fUKaK+nqD;/gfa%q9N[r]h#^Y4P">'(WjSr.#OWTD.SR
%CZt_JW=F$Fqh"7X"VHfmV"I]7"8'@k'#9!'E7:*&lKYT:^r(7K.e%H9F5c77Ha'<,C5JT.!W<h?rkhf(JejIJ!Wr:lOc=jBT>Rgf
%.uO3Q(:16+0I?c^7UtA"fW$'QFT>(IBTQ'SAZaEsWrie[2ZbfTEs;%Trdk[`[3<D+0G4hK6rtKP#%ETaOt.luK-L49==$u_AeWmj
%](XaIlW@)$RVCH+C^s)6:S;W>9Ami?^)j^?o;8Q!JFl6/-=M=m)`=`,\7O3U[Yg#q@i#$O.*ARCcj%:ANV3p`A'^F5]j(t-BBg!:
%R]'V:EnSpQA`FO81_:7LJmq"P1)5bac`sEA$:gc??lsCX7gO1i,RqXl?lPna1c^H/LbDK9Tm-545]EGC>3;A7obt1)(hb9d/1$\A
%IO+JoN>6Cr(hd21GTm!N3Tk!G.!T((H71_-SOuu6U#a&soTOem8d!!"B%;G>'H0Ssi]oGP]@&nJ=s)N'dlJ2"^u(jlInLFPS]QuA
%8-JpO7,Zll"Q#,+n6JIKeT!HDKOge_Y=&tcM'=2Y77AAZ8eRq^,Y/$5/YVHm"N_nqP/0r`2^HRW+B^#nX(F-V:*p'W'F!>n'N%9K
%'a53u$Ef$eNJEH_K_r]3@9%>4&cpPA+%QV3K"iHHjGRu8mm3i/Db'tuK"hod6l`]lj9tsA=-+m+)`ED(Kq!fj_;C&mp]2-t^0n-H
%VK`6*%'g(e6Q/CEAOK1)n6"+@Q<7,U2m/%K`sgnbj3cibdGTk]#RUJ8aWQZ62f&gO&p'*%=c.hR+;s7&BGud5=,&iShs^t.M!Y3A
%[K[8#i,;-jH%`r;19nAtiSkHb5)Cka_%THcWl%3BZA2smGXOHWHcuI.4<>F/)7N>iL.THN8-9_T2@:<ieM67^2WPJLL1Jrf+cf_X
%\2*skBcr&$3jE]\PHah$+5#"u3>8/2G)$9_9a2O?R3Y20=Sd8i=SB7;/3Gb6U):`h*^1horT!$["8G(ZB+5nX<,C5ipK0\j#mL:F
%VT`X:Xok\ffurLq&Jgi@f[@k]@$ZVK1M\0jT4se9RV;kaM22gFB-JM:,ss"Bj+_PR5mX06n?:q'"m]MTN,Pu9pg5k8YM!:\%oeV/
%E"Vu*s2F$nRf15*&d`rV8C63,ej!<W\(G'c0:g,7lnA>CWb8ZJM#G<mE]JNlro/DNqTna(:l"O!eh=`a=84H00c\G+@nKdQ;RLr]
%ECH#+h`/-/-!<i.AL.r+J&0qP.>:WX'#7_Ug!L-?aq\.kofM7NkTpGRO8pL5`=W:K!M;0L'Ud";)rmc.%&1ET%=\5@&-ea?E:BN*
%7b+9lP;HGMW_^>p9;RKAYT/%F$F4PG!F\je'ZPm@,Q[nAnMT[h.^Fl9N+f"T;$`YS@VH#9:5:.T@VcZb4CI*(Ql*[i`8u/7,^IUl
%6@Vg'Ji#fJ$7-7iUliH/&^b$=KLMP9Wejs1Z]l%I-e)tV10TSm9#cDX7e4"S/nV(`U#VruB^cdgKR'sV08;]P<Zn$m3"n"t3buf-
%^+k?=Mrk+A+SqS4(da0iX,A/H:b;UncuC^p0P\^66*c'<0hb<$Q4i4)'J(@V8r;?`eI(VE]Yja1"IZjVi-G"7'OmPB>U#SU#tl][
%Yr=QNc5,&>CK/Ag7=bq57V,4aGs.@Ga^<i81=D(IL1ohCrh.9p*POT!PGosBZSdTp_t(US+M:q-_7CpIo>!sE6\_JVX3t#hBn1Ij
%M:Vs^!1dL5mtiIO*k<bpAP5mqG"s"_P([:==K@$i(SBgb7[6L_ZE0($d;g3]>WjF?fe>kl<ctE4Gsnj[$7K,_EDVBA"M2b>(bo']
%KS<%+U0&2!?sO>k@4.%P;/m1Z7BJ&X<CKJQ6M"IkTa=9Q(2&>e5-2I2Q8_JKNDRUa\jX,j@c%9b>`<r1Gtds/F9ub9T`6j:Um';a
%%EknDU,]d[@LB#G2He$JM:j#C'`,_Eb9SC^1,Rn!fr!D<J:'i6bRu.!T0anVM_\DXbZMCfnCetPER6tId0dg:3@.Q::0<!cKUkA'
%`dm(XT"s!+GkXY?N>4H*o0>bqO"4ssi`Hd5"c]>Q)Yk3hNEu#FQ>HHAS;:YO9;@#Jokm2RK`ji6cm1,9$ZU>5A'`41B>ld^dO?:0
%\A):uK38GbH!!$Ak;[\0?PDJ:jZ(9589dX]k8^#?S.k!tBm!AY)lFtAfU>hT]?nRJa?2%ss.":sLenb!^&^]=<@:6q1@t9i8UA7u
%7k6S;*?7j+e!,N3>'uU.1QDu?r*R&Fg=a>-aOaQtP[l#)LjpYBJH(Pj"b?cAlXccWZ,-)nTg<5\I%/\0ZeP\L-N#9>miq.SlC(!A
%lVig%/^dET$:aC$oTMVJW=8`i?tDasP.as@ZQMR&AuL*e195U]5RX25>ftAJRu*uoCn-ZP4@:=:Ja,S?;HB$96n=nGRJ[lqOQ+!Q
%W`]"kanLnINSbKa]Q&PhaQ.-lqZINWatP?^%YI)Y9+P(lPL)%R5%CFRQDT@C2F;EU-n&\bqZ>ueTp)H;#(\/XS:$*Ia"T7.'uE=H
%M0aOVL.Ua<8nDJ=;1%hX)3-F^10aZ(pj@NOpmkG0iV@B3a:e%<2HW)H%.\9d[U9](2<,tkcc.NXe+mOlZD.ne_iuG#Z'6*),X`T.
%.?9kTnp*<;-0!m&.ueHuD8i6-;b+c[BEEcV3lL%s!aPO$9`WOR"Wh$5!3T_f6kT')Q-#+hZ#W)DRB2+/"B>rWU%qg55_#;bmj&+b
%#WkVt4=Q3*r8NXBnA:<-;9#2d:MP%U_bsrQW,W_oA0sF,0#HNX8TIkKX%h$lOl?C?/QodYA6)KGCGfZIEb,TbS/!-b7k,bi+WOoA
%*>.g."c7?Rl==5<S-a91705C]0rI!b>Ho"i*6/XG6:GtLOU@>7>Kn"%*/p%m<j=Jd!3m;en45+Nae9S5V$Nf+6&LPY<1q5tB*"!3
%4:%L2>:iXoBipe%7UgKcH];5)o*Ehf?%g"o<`nf':ckq\M9(t(SOXV+98W&i*1_S:1-t>OhQ^Y^F6[O&TP5QR:mtL?+@g52,dYC\
%LpsY,!,DmmAbV^0@sfY)I-1TaoiGSIBb\g$?-'B6!F]>7OY,f_BS=o/D16;A:d9ROimVCk?sDW-D!Re"8cFr[O"-Bs;):9U<>$D"
%8#^_UVN<7LeqOpo.L's_"SXZ*U2Y[P\gW96O'3-V.bB9Jr3?hl0eG[c`3W;:KT\eBS,`VW0ofo220PARLF=c0<X#ZL7I;m]PdC:F
%nil>7^Q*\pR`.8W1V*^_.(0If"B;mah#:fe+LC/`M)-Ig8Qf1QeT?D2O)6(\('eR4KV\Yb2o&-naY&@rVPq`i4H@\U7VbXc'g'"F
%]ecr3OE8'n,c-\Jk6,U808%eFi?c;U1goi-'ZW<[,oWEo<h/f=T5/fl8Vnab7-5VjV3;1iGg<5n&5tQmBtqp\NE7E?iRFl,$HaW]
%C5G]Yqi2rFR=lUb@8[uPQ2*;:*IJKEB^ot?i)&I#AW!TNZ$1I5N/H89aqVP9cPba.7ZjDSP1o>_ThB:CTpo1r@O9dC/5DS2i^Q3^
%q2>`<.ih'G&rj+/5c@";L">Pa%;$C&XbE)Z:igphh#Y"Jn'oZT,='c$29CFU(SjND>UMg9HPt),8SH2nTuC/&*V$YJ%9F1<BM-,h
%i&i!UZ+q+[\Eng0Z__Lsj4GAT@1IW89TU[+YT;<u)_N'fQB6fn.DSZ^I2I;p97<EAjW^2WK.d&[!u8oY5X$JkY8cMc'8E!k`j@j1
%Q#&OUj1,nkU9^mrNe6.ni.<Tk`cR6)JB:`q[>P1RHQ&?DoL&4qcH!8FLF>l]@\!#!D-&nU)`\!CO()7044Sr(XS6EjX_b&0Zb7dE
%4748#"ocFgR183GH\QY(6t1`d`Nl6eLKu?d/Z7^9)21l&7]ULWQcF)FI%iA[&oKbR>f&u%3e`:K">Ljs36P$m7j+hfch"Tjjqr##
%%$nbN]LV6TERnL0DLe(ILh:ImM<$<oSK^^2':#MT6QsW59iN9U?eePpfWpQD;8>I'PKJ^`D#i?hO2NXD:*'Z5[^NROlH9i7hRm+'
%.F!li9W1]GNK,c+;kt/gXFW(e@0S&Y_0"<O>Fp"K16,gFP-RZb,`d12&n,?P"Qa@"bZfUMKo](hke[]L'_sU`SoiBfSlM=Uf<K$=
%0uupd8qAGG<9!`l"[rc^"EUMX/!DqB>W#r\nKEBP5q)>SaOfrs)TSmpmFM,M42c_r+)B]l1I6E%9c>"_-+q]8apO]ip6A4(?=g"L
%5A]*K[[gO/IDS`'.3gg=b:Z7ofgq<mm*UqU!?KLm%Z*cO0M5$O\ic_,dAAK<Ad(MX#`ut^)Y)MN/8KM<FV#i"3bjT=49,S8i=_3*
%i$]P3RVXTI>lMNa'89HH.'/P"RHR*VoW?'%987GPc%dol`f+8sTtl3G4,\7hIRT#df\,I+>6M5,X<fn;kYgn3!t`p:%#*mo7\1HO
%,&TP0T(Ils7(*][!V)s]6ug[qZ9g_D3(R)O_:ucnG\-!;]4>9''ADO4*1l5Q/O[s;10-N>C_R^je\B&GA8N=&+W^bj]T3kMAI9r_
%(g=1E8&a8W42O&aJhs0GZ/r</goN9ip8iVr<i5i(%6IA>V3QnbdMl]nZ-u@VQ'9T7$83T7$?g%G!KW./8LKar:KcG0)2Fj;4AR@f
%,`Z)k#*f`:9_FG;.$bM;3*DZ"ST3/1ebM!pFpq)A%<I^k7tu8t"toI*=b,L%`8AO<^8'GmBuN]"XE;5jSIG]ja\F6G\j/&2&r74f
%pogKT,_a5V6:\J(D9$!T@_b_iZUFol32j;0Z].123srtUg-Re@>Uf]**0aoUCl@7/0U%niErkooKo%4M_3&[rHH0>9Zc%e*jO&EY
%2QMpf+ZfhhG!9`HgEIiPVX9<anb:g&XMR7CVKk4WYt]>.n4jI.-).j,:H6t-E7kK/91#HQfJ-5>MtMJG_Wd]Z8^Rhf/**oM`K.89
%$pBKD&i#eQQ<iMDJ[::SO,?UKIZp-OGOVY79]I[@i_O];929Fn(M?[1)J4:C])rZN]LPf*CcQ.:RNutBit$0nR7fW:>TTH?[^QmE
%p;j!86qV&N((Y=+UC(Qb"&qdG]bS1W`TqWI!brS4G0;\]R(F3a.MO!-ABIu:a"?<"7#<bEYjI=Sbs@1E7\3j]W'PB_JiarD@@0Hr
%_8qq.A2=h)3l.i%Pgo-sD8!9Of[dh).R>Dg6@$UmfC##nQU,ZNb_Tk?;%<rda;*iaRB91uSGBaL`@&d4fTCEemn7X1an`%:GF:7M
%E>4+j,Z6)-/cF?F0G!XJR;H"MDZaMPS`2W'GL!CP3=`&8]#8HHi?L$\_%$lX^I8"(/Fc8gS5eXr\.I>g"6p2\L!oKcA3@?k?_TMk
%63THnV?o9V.V*,74qcEINi`H%A,+Aibn<:1@9IUtl&#p_a/H%L/t-"D*]k:b09NK``97>5A\nt$f,QBW8o+mKA<O6H!]k0E(3snB
%rcfDQ`YKCokYN,9[a"OL2'$\,O;ucXk>a@Q;cU%m_P:ae7%?L9-*dLkT6-8GMbB<1HaY_BU5b8;)CkGd,7Yc9)l]%jnQ4Y9HTk25
%88/JiZSZ>n);BY58]lIefG29SiWCQLAJFdBL[<%L:pV%C7\/Y:4#Tl-$1'X>(b\Y_m273&V5Y'im7,02.>Oop'+dIQ$?;4'W%n>*
%o!7?0@.IC9W'gB5*5cAO&6<ah)Cr/ArP?cV:E[Vf#s6"h/]JKFr1<ZPr([&/.M!"fdi^ODp8!&dq?k*Pej:kt7OCIh.>XG\^KZc%
%ftd;pq'`6icKa!noJcj6M\U\JR[u$1`iq=T^a&?;h51HQ;+@4f9\fl%HTLY.fK.$2QhWV(mp2WC=m!cCH[^krQIg-GM^+,n6W,6s
%FL(d.%<0JslGOB0.a1(&DYp$[;P5D9Bp<&qO,)mB78fo&(^IPGcqQbdPleFcB,/V.b4r'$(c3gAkh64/;tu&O3a`n=k'uafSY]a'
%"=^-DWZ<%\D(h'*Ip5OdG.pQ=+PM/)[nmeP8(3coa-9/\bT@n1c4\RC1(5hWFrYA`KhG&*8$GM[^hAc%L^f.d%tF(]$Yf=SG"7?n
%liohB8<OX8$WEb)?l=B_]B8OF#qIH^c0iXH+Ve`&A1KuUaiQMG;f'9RTmA'd=g>UKfk\HN-BApOe4e(h+fUj-fJXr+VUF\G]_%:.
%`:G^L*f.H4Yl4<p@[g"a>n[YOYBRqLIba!IAqk*rK?A:%C?u3egEBF=^G;MkH<?Npo7UI?`32r,ma9SsjaFG/BUB^-K*gt*'-k\;
%[!,hNCnF7/1o*2&lV`>haQ)b>gC<2,A9RZs2b`LTWLWA)L>c=5GIG`<\0U/]5k%"H4Xl'oRA;5.2,tLT)cNusJWZoKilso#*n]WJ
%A7kGn?B#2e$j:P`L-M9M06EsH=h82Vk<,=f&s9Y?i!Cjc65#ag0f#FR%<+%XX][CJWJouBm"^Kbgq!r=QAB7HMrR3)L^d2m"Ysr]
%cAH:;)6s$8O;]A"fG5F:3Bm.Me`7g@dh4<OZZ!G0bEqda:iXR'6%?o&007i$N+YeReF)^>(GqF]a32RekJ8R9n_?]J\ua%@Znb+,
%-SRK1fQphT]]"Ec;<(cI3"Z3dEs)hi7t)21:ItipU0JT9Jf9qaoD"Q&"VdER`.8/eUP0Zj<@4#',hgp+X@3W.n>6:drluVH6n>mk
%Ab!2j2EYd2_26j0Rfj'n#+uXX_PmNW$ArE<]_39m29"#[NI_$[Z-NQnNSLhQgIeiMk%:c#K<JCa5%]``HlFD[_'4@,@aR$d7`2g\
%0$q:p2Al/e_!dLU"`G1]W1\@n4!+FscNV%LGUp4Xi+Ch&L:op_DZ'#HY?Wk5Rd3Z9C+an_L$neB?<!ejK>.i$"YL0?9k>tf%B=a#
%2l"bu9,gj"UWlu=s.nUXXZA.0rMN\;>uj/)"`+@VqUJS(eLKJo>Z2Og%4Z5F,lE;+k`Yjd;Eq54_;JGu\2;h9;em=8Y$k#eUr?eI
%mA_KJ)U[!*i/S/Ob*n!:g>LgbS!r%!!O8:ulq3[;^tj%\Pr`TidVZ*jldOGT,o\l*#+%>a0r)23HG`^/9tfgaS&9^(<AodoD109L
%g(SrHh1@L)Z8'_MmU[4+1Z#0$0\W4:%WIsBmZ#ede.]@&9YD"RjD$`CoM^_G9:F:9.e$&CHGu"$Q@<p*7U,>*B^:%;&bn8tg=Ak\
%q?,!iCbJf9i$QReIZ)@j.fL_CrU+!bg?O!n#21L8omt-FVU=YE2hS_79splB#nb;mCGPSfiYioJ!eHaO9aK^IV;"*<+TqMJk["&<
%[0Nl&cd+5&RYF"=odY?qZYKK,E@^;ErnV:4_9DrkJ>lV)!t@5q*C)$BVE.=JD<gMWWHAeAfX4o`%[u7-^BQnFgYer1#_b0bY2'_(
%[+heurMd5\(0+;^)pQ25\usc'A7,OnE+bltq+In#RLZj4kiTjC'3>*U^rG8ic,'tr/GtkW$Zb3#DYKUbRkU<H^#jh]82Mu3%$[?(
%?]-V-V`OBSk`tiOR'TZY3+HOII,\OI<e__/XD5)<K58^G$Z18D%#&?cd2dB_Wrr#jc&%U/ijj?#?mmq&Xbtia'N=lK!c:!g1F)P`
%@]jL2#!0j*Ai&(0FR\$:S1)ZP4YPsUoU=$lWV)$`-Rf9DFQdP<NEQ$kbd3k9<hAD0\1rIbq7.mWVUr/A1jYUi!j(BH.?&ARX\A1Y
%o8U27%B8L/8BD^;<@s85$_21sLnVB*(PKX$#aIE;0#)*7-s;s$JDI;-G9p<eD?8En6+KEn@9K7.F9Ue*2kXF3;uog0?Pn+h]7;mH
%[_%3#cGAM_$HoQUg^;6,YhTT/Xg$Tia)]SrL#j;ZZQrX*&H2lIc5@:RO6=sFT3AkV<,9K\s7QZQ1?';o?kCEXGJhUu6Cn+KQIYua
%d8u\s8t(%rH1=mK&#Vjr--htNlEK0teS][oGDi"N4#".4'=V;;UL/5^K+kFpS"j232E_i4HPuL&?Q4AI)jY`O?R"?mEgF1C.L],E
%<K4Fqmet\+Na$=>k""1Jg7Ukn0:R$%,bdL[lY9EM<E3Z?fuR5Ii?,<*O/u[uVp1]\kRZg.ll6i^@!^I+c&C';&(I`qY/[NdNPCQr
%#'5:gN3;kI%'h?U$9/*l:rn3D(**hl+\-?"3$&9sh@U\k*O,'TmQ!bad(=odB.I4K^Mar8CT<t/H,EN,4l:-Mi"m1j(4Ko3EG"^T
%S`;9I0#s]3!!cr+2/Vl6<sBpRi+0//EPb(RIQTU;__aPo4:$kI#:CS%2+NG&Rei]1d0<A>@@&H!r^%l5po*s,pWMa,p,#$qbHHNX
%58*si`R\C!l!9T2*TrmEd%DYN1>?e4dCuMBId8C_VgMOCHmZ-DI&Bn,0aG?BqQctCqc`JX9tBbZ0oU;0e?khX2X4>hD1%-%2M@`U
%B@]ebV@T4gKFlF%jYa`R3n\%M.\-=JNg_ud@;5FGS`o*@4pUo<nkI$g2;t#.*<`>FKHVj)[d\2$4#jG$oEa$Bo!3:Bs$u;34.IVq
%%b'1KI`q<+ml<M,n[g.C&tadSL(D9cZE-KelOFEo0&b:X%^P$Ce,>4!FFV79H<H]Pj+*P/#s:l[Jq@]LFSOPKo^RSp5F:<HW##E'
%`O?,D'aJ?Y4Pn3]1CLtJEU@-=/^m\2?*.D\g?8o"S8>-`<LFYQZ@gE0?fu@?b+,5$<q#e:C/omns)P:9Q87NC<7%.fXgY&k3[#=8
%cSbDnY^N%d0`'uY,:/!Nm1C-u7QFRL>Fl])0>BtrSj"b/*sOq/b"4.mIrhED7@tSq*[Y18pO,#'eQJJHmsphprgKCh_o##f^"mjT
%@])@RKm&HY"'3odFk@R\YlW')`"UIT/Q5#.WrpX^2'%.,S.iUbl+FN@lWm5-E6Ptp[]ASGPLIAgl+EC(i7*%#Oj5Tk'=3s9Vk4ch
%Z"Zcf^RaZNbt4:;?>QS-^XO>8=92iFTUH>m)Q'#DS8uD?7;FkTT.IRa)4:S[CH0/>`^4<hFjoP6M5uGKY/irsl5`ALF6@b,i#B=r
%/Wa)*6s0eG<rGc@;4K>H/B\j1P:2?r53p:q(4E>IH1TQ!*^s4[CZ'6)7B(a6ZRAS9=dIF@jC_=0Um=Yo(<)D5/cJn;D\5+4hru\L
%'4t9X;-%=,r\("jl7C)0@@\8@:ql*q'Ls3aiFCA]3fE!NR:XL=Qi/Im,@)ksm.d_r;6&O</;b*QQ=\YIS%CN#Gc&KC/q:]QbYskO
%rUN'@-bNKK=MC,#/<;!(lR:mUJoC>]6FlTO7IPnTqj1B?Q8*hK=n,_0l"BE;/GjTt^ANn-R9B?n?h%pkb-*f:_9/s`r7];s/VRQT
%R@n)UY'mKq9nQ&DH*ro=qqq*^X(:U%-#5$7[dn25dpA$k&UKqarq<(C`.83nl'C[6D#g`9dB??@phC^-&A`*"Xeq6*AmuobbeX<D
%bk/<<1OL20]Ws9M*/aUM>.`EfJ%Ya':BSmrU"+>p3=q@QFc<;<qcL:n\*2Y:<nFt4^Ne4NXK/7uK<1hl9Q7B1@VtdERO*859tpqj
%9J`0;V0Xf>XDkWG0;T8N]_c74<gqQCC&XNc\V+KQj:Yq[GK9r:P2J.kRfkZT^ZVk`q&ti,H/m)BV+0A.48o-hJF7g1k;rI6nYJ7a
%mu3h;`FJge659IcHS,^+LqLVCZfqD!C34bk+$eH$iA<dl&,k0D*C5F!\!147_.$beg3sI6$qN4a[*o$dduFI^G_jQU"ZYFK)P8o/
%KZ2Mp';+$JUWZY3IF.=o""+[k$)=9UP^hY%j0&WOV2CDMl/di\,"O?H7`6tFG%hEgXe,/hmJefrrpRW"9"rjTn"RDLec,#Ps*'K-
%DVoO8pKN)"a_Lhl&ZtbV=8Tc44F;`C^u8,<@4&P=o3K]HTES[U=mc$fp3]qg^;$0B3&Rh$_cNPdW99K%3(RoYH@=Gt1.E'JqlZ-N
%1KJ!lh#5URD<%hQ/@P4@ErZII<VT`p#98b)Qs8/"^m,GT3l"WgXjTtYi4a-W,HWg8^/7^IbgCWa6>X%r[TXhYXcTYcaIFsG+M%7O
%b@IY,mp.N/r?#VCabHd/h'C&S[3UQ6HG`;QW>f\kO>O@KdP05>e:$`7qUmu;\`7'T;eq"9L[.YSmG-K&_?!Ht:VAP(9`)+]RhI06
%F'b`cl3O\f_3d+3ZRK#c1sW2\\Wg\:SC'9%HOs59%h$)Gd-k[KJ5XVKp>j#ZG%2OpS]1CX/6S!7=m0R2NAgNT&&?q,@ZXSm/\J/#
%?<.Fe^M\M$KpU?,bA-!I[IEb%[I@WWZf$NRCD@&U^T82W()VV*(1)H$iFRI8lMI+C=dTAgOp-)rH3NQ&^1cO'4A,KDM_(nTUNq0_
%e]T:IfCOCCKG,CBrFHX;?IZ4C0:QpTLXjQpk/<YY'6]9U*Im*NH-@^=*u%_'l?`=W3%hF&>P-j`H5"b:"NT&^QkhY@rZ^-$p]0P@
%TI`fR>eP^QHbG!p(\G:bqpOcs9Cjo;\aWX7W\rh?eX+e`YIp[pHTdY_i8%S;Vt(WN-!:#afc>H;A8RdeYoO_XH[_jRKEhb>[YfkV
%H[76UpG2%,^,CMJ_:330?1P;Gq+JZdruq[BDm]C)_8)dZk.?(Fp'RLA4+nqK6CY;5[&H&I3CF2:(%HsU'6aB'CQ=FK=`j7E-6U5H
%0]OE#S7=VDN!Uj<i>hGT[Z7V=g%&ku@gS9J\6?pT,##?8lPPIsY`@[qLXeH*_BRfIS+E\'N7Bu/U1n5INj2d.=H[e8LsQ@+UU*rN
%I.eTM=l!&X"1<PckY@.Lj*EKb6^s\U9@\Of1sa%Q$DooO>QX$cl0*+sSp4R8Kn9fks&)_kRUU$(6`jR8!XqQ^kJ^ZW-k5f7FkV/?
%D1qu<Q1_R1^"K@I2PhCpf.G6OQCKY8HG_NJLoV=$X^3ikHI:+>m#-UgK]D0Dcd:r76dp\\S6n&dFRYPj"2bEp0bunCXd_f#8[(Wo
%%MOo\Zfpp0Y7:>6$U<aH=W+Z!='Em<_:@:9S,i%=5/-.b-7m8:mB8\6[9=uLD&kt,HQDm%`6OMcpi=6oJfj`-_SY:Sp0o3AD;*J;
%Wssc$[\5CBQ'O#VG(P>K/5*Ja+'Peb0BGegS6k+AeBSEEXg$UYB?^e.XjGi1c)o@J$I+R:?q58JP/e<+q[R<-)]fN2n7%(t`,cEu
%>/@`aS6Nh?'qALE\J:Y3k&;sH^#5D*G*W9V"b^dokaXB4plOph0PV%qFV=1EGj[ZO\aT6g"V+qdl@fZ<J)nK*"8#7W2/l4g?A[50
%0j!h/=Mjf)b`TI)j1PA^(M(a&0tIhB<W%R&H^2$CD'`JtaQTU'IILamd5#Bbn>#A]Q.ht%Qea\"?LO_Y7h5>tQ>*-[_ct8do^,[<
%s19*)/Gp]idg<A'%d*!*qWN'fRIB7lQM^RM*.LIWWN&!O"DlTZ1,K5@=^S>"0tQRQb+2q4d2MW9m]WL_L\KQSf:</\nr5baUD;q1
%T7c_jrLm@qX-ut^[$.Znlp"ssn^l2A9jD`<7D%IT744g^pF'`mE92%aR%p3V.#9j%-gFL@1N]uG81E`@%s$*>GULi+8tWCMMPb%3
%G*dE%k<P+B34"4p;J(!Nb[?\RbgG&AdWb779m5Fp9G#3n!DSMSR2^VcJj(&hmdHapeUE?@<b7O1XcfF9QkZZCU47S6-#3uDF].l!
%QLMZD!TdZ\)cfPWC9dZN<K2VrhO:l#c78u0c-*bin1a8&0fC's$_:/(VU=%@&/JI\:-<H1NfI0uog,pZ3Vif0V2CA[(N^HX3e"P*
%aDH?%<;!4%EYTQ1fV'mCE-)^p(-OW<dDM[`7jiUb"ik0S-qb*oSHkBZCg?tl\;VrZX"PDse>2:%pl=I`a)<!;;Hh!tI#$&BqH!-)
%q-@p>2pA#?FST672"Tfl9:W=?q2:(j.VR,DHOZ:XLC:8Hp"uQ@Zt))(kbF@+70o5gAhADWb(JFH092h[Z'R_:o:1:ff,!+8I';o#
%]>!:bpHK6KcT/B)n&Pc^LR2NS*9?#cs-AW$\&pNDFtWfUSqim"lsJb=9ROIYFoRH7/\rLM0BA`5mh4PZ!`W"l>J:Pk\IT;MRVint
%e-%.+7(\]Z1p8;4:D5A8/6_n'qR\cSqmpAh\iIh(O%%Oe5cm#nmS^,]L0Y9IAIubg:7!&>e8t=1b-5*`?:m0ISW#*:GD0;Zh9>F?
%1RkkA$/aX.V<<.a"@4%&89!6]]D]=)Dc0\&S,[Y)+2@`H_8<C%r*&*j'R;N9dX3k8e^DJ`m@Y\BEkB"O3<-+oY)ZW`Sg0Q9B`u3G
%,tOMG5mY0c\i'=q8>n'DMr$(FD@s7-hD#_Kb0sN]n+(]%ps2A>h+Q[Q`V'l@^-pjh!X9q%N/HaiS&9^(Ffoo<L1\"Lbo.GZXIChi
%2l!h9H3;2PMmR:;m9T4.=D^gC^$B_CXT8GLm)/W.XA'QSjC$[IIFcf>E7?1e6Ke[R(WPWlrr(eKpmu:39(7PmI4u[;]>e2`F9Uj'
%pBd4>$G>(#Yac)/-"tGeoM2Tl;500<')j)QSD\nk.P/+7^Oi0o(W-4\#/tg<N'B]CZ$6\)Le"7C9EH;h83@lE,sk^iM5V[>Mb:.!
%))ahl:>Pr#=!uqT#:THWLrXZ+H?on.C4Cc'f5QIpSnh_ak`@d2@c!V$-m4Q#feP(XD/CuR0QY2?j<boUKa#DR,UO`!6RWoY$49BK
%6&\tlofcZ6qYbu%QApI^+;=K6Tfh^$rqK9o3_=MO47m8Alh3Q,To-:HeS:""(RLki"J?#j_j57oiG^%XL:'9:d?oG%P!m.J]fq7k
%?24Rg%(XdkiCM&LV?ND/]Ci?:3-,(a$[s/4cfkIt#ZfEn1fGAoc`^LI)3DVXZH''LPPgc2$FifPZh1"k1"rk2s,VB%,Gik8YQgXU
%Wl#=^?<MCN`3T3I9+'UqK9s%-!#0C?_h?dnj"MUQOnesVR=D3&B`W;HmE:/qo?HUcp>>jKc$j\F[KD?ENL?gPF>SFCjjK'eU3GQt
%O3Kko$>=u]9A8;*ai&b?Gk.DZ@('imB.(KFY&.-Bg<@$*Tofo7J(#hF\KJW1.6$.SkurkcAWCAW'CF(Nq7l>3pAT1%(*N!R(cgZ`
%3p[B9c2tMjheJm4I2+*10STX!j4mQ40BPuCp//-qlg]A+WSF]W[/fp6"J39`euR]KNJdcump9dEq[8FTI7Z14"SXdqbJB[CDbNW1
%@,IA7J'MZt2=jd.mX7Cr#lms/6Qokb>;OU)UI"f[&@MR'BuB_'T8G?'M8bl`+'b7\A+ieT)U*H&KukL"F2Y->kZaDj,DcE*D'?pH
%d0==pA68fJ@&/97R.ZoU7,l;M3,2D,$V/)@CCG5LEiJ2o@]3n`L#/Zp$G.dhWt:['E^:7AU`l)]2qmO^"-a_@b[4;X\c<Td_h"js
%)T1DkXlScH4jA*Ap!0edNhNa=$:tG@CVH^8nBl7&OBr%M5ID+%NjD+48LtX6:$5YuR2!3W,]/nee`BJ6:6m]tcGhQ%PTPN#7M6;*
%9NKIpCA1N3?a@e0;bk`iqO75Xjsk.r%pZZ65#<bU>9EcNlG<H^h:AqOFBH#B"Z!DONR8J&OBN0A/d3YCTQPfT;(i"f\*u]<Kl!;q
%rMJmam12$Ps+qHY]%2CG%65B3<Oa"YHGGPQ<"Yj()WQH3;nJ$_g<a(nUIU;`/A=M[rdie%p%4nG7@FBP0Lr7TU\7oeASPEs:-9^5
%2L9,?2QDmgcPWn^.Ml@\E*uKpWVqo*nnk.r[]d*qYhboo.&=+`R*>(MZemAS^$.K)-qNn&g&)K"D^@)@r/@aTe#!Fj,\iUOp9?XY
%WW::WAg,o![jO[*8pb/LeMacT)`:DgL3O2O9gk5=S.mgo^/o-Ds/G+2[s17Aao+B\r8;[+B^[i_hQqo@F_]jMX0qW'jr/bQ1kAWe
%8Cd,nG6*n(M+r5KBFpt7S.BP["_H>('8sO-UB31SG9)^<5;8'49cTmt"0n^Km,_u\_KkQ1e,IkNA%hs\?=3Y0#ALtXY)<h<9rGMc
%CP<['JC^UO&_MKm#_@AGUGg*q7rbYRoPX'%g]#$j*KQd:)XV?M9BU%_9<6SYS_TaAilEfFBiqS)J'S[E[B91RkCj9pIfh(S!'9AN
%.V*#X2,#iL"+LB9!q$t#<Y`;*@*B/QFaCtN)h2U7%rR[)^L4B])Gp>L[(9gY2`*-H8;q9@Cf1\JUCP!N%\neXORoQ9a_bAn4-m"S
%70?p$<PtnP[0[>[[<l<jm.YeYLL%\!?<T6mAi%X-FKX0d@>FIL0><QFPUi&3`?/u@6<=PmV$s7Jb@?3>K.5J#Qp%1\Shn_k17"bA
%gFQp+G]KRQWH=XUi\<X65p@:"G&OY)V5IK:@d!&cg)IaG[73=q+PBFI="%P1`ZuGJ<[MS[.p_^D5f@"9_1;W][WWMgg\ifU_2:G?
%W,QWL8P==)?DGsV<aZ1jlLc:>H6c@X9&ELj<e$'7QnTM,o>A9H!X/q`1nsJP)2KR6(-q$1erU_.0i%#65A1:;\1OL\boH<kUZ<12
%LHWAEmF=6?H"_DmO.o^Ffd^=nB9\TZg?Y.Bh,f146rq&J)G.2A7$+4$=p3@Q$<&,u"JmbbD$t3Em0HPQ*K['$gE7)J7QE/K%`aIk
%9l:NK7Z;-8m*c=n%612QX7F/n2*p)0:,+b2^H3V=\!c?V#cCVG(*7A;YT@5Fe_DS/Qn9F9"?sRCJrZS&p%:du&pt^r6o1ZKXg*9,
%-DE?^H<YGWW:mL&qJr;qC:c[L=`0_F%a47;O]7;m;#:6EQ`p17UbnpITMmmY&=^)#@Ho!2<UJ(T,%Ve5Z)1t/*(_#<aj:p^)6Op&
%g^&@GJJJjNi"SLVaj?fG['c<TJ'QuZ?gY8%5JD)>R&Ja+Iqd)VBE1jm^L/jO9;&Mtg2eAHMsr5$:u'J1ReY;g6aAm<SFiWY,;SW&
%\V]h[/[5#$5%%;;(lh<"`k^oX>\h7oI1_<K&QMP81bg)IklL7QGO*7"3g2X-2mZiscmu-Ls%7k9KOSPpYu)$V^1IuK_8\bf`/V\9
%2&hAS@X]Sdk#&fR#hI]c]H8KcR<>;%V<`bUrF(E*aiG`Eo`;Z_,X.'\U;OqB/#Dum?*0g;'o]>q+H?WYCk%0K5sc-/\hdN*$a;dO
%-6n`Q*$FT,eXC)b?V(W'B`eWs]3p"[*Y[9I+cB.erI=QnG3I1Oog[$HZ2@pa9d+@IJc_,AXmjE6$r,/%,K,L!1IsgIqmok=b,!aR
%eeC`O=8g;%+H$/"l:2Pri>9TGT]co5aP>,Y!Rlld"8n.c0dBsYCM)HiGX5m5@CQ)uARQbjF&M=m4>K=*G.Ych>07]89ZU)un0s\_
%A#KKk>Uu0:CH3TLT"Tj+V+V)Pd<HeH(Cl.ncb=*)Y60qR5%U7[(dJ5?Rbn"c1f6nj9rcqCnR^:k.#gNV@`9VKCOg'JAO>kF(2RWW
%o'&.cfb+=RH"0lu$t6>#QpkQf2f/1F"$M;l>q@P_DR[A[4<fI)F`8RqemQ7hpHWWOD)psME8R99l4]pj!;QaNBRWf*`qDfXqVPJg
%W0qe13bf"7C4@@1h%[0->9s)#GgRgUW\p0J]@:`Cg<gf2OBbm1[Ed]f(2+c>6@2PhgGlXUn7pH+GD<.Yl0XfrN<F\8ZYQdf>F428
%bJi&-K6U?^Pj9I9B`Lq0(Um>PS(>]7O@u!.+VDnL8PqiNVJNj"mbCVgStt9!%u5q&m-`u?PZ6.,o,q>=T<FkUOr&#FGo(LJU;tlb
%^!"njdZsFeT8CaH@8l^Wc[%g*rcGc#mod,HHY^mnp7A@:AeVGUguV?*%s6hAVp)2n!'Y4dn?OUc?Q*eN@Ijj(>"dr*.4pTNjCpr4
%=R,VAdg&'QD5#/.HaReo09bTT*D%N;i8l73/jED2i+3X/b)*/i%t*lL_8c627.I#^55>]HAJoTRh[7Lfi*mX'X^1*K>8In@C$,Ou
%cXl`tGo'e]TuOCSlTcP>#RKXsP0qKLG^0BE"1e0D:G;X=JmVD,*H"nOFG[Pj^t?S-LCkr&qTH]NnPSX1F-UcZ:"di&j^@09BKMC6
%%2@ppB7Ek%V74?-hVOT(ARk0X>MhKubao:hY=ND!Se9=3dXY\2G;mFm6KC8!h0@W]^#'1K5C\!*)eM\V:\9BD%Qlk.F7);>\(Ne6
%':j[=n./DR<8gR-;W2fb&JoJ32bY?boee.5ru3G@eNs!;@!1f-'pQ1L6G0`3<HS$@mM)hWJE+^adT<9?7-+.f.-/hfO4WrFmDtL:
%mB/t,LqLRDkGpgofK.*!N;N!iqH82A\+XPuWQtf4buk`rp(H'uCmbr&c-uNR4%<_Ylmmc_;*:u;B(U`94b)nt9LsRQ<TF)6R;sH?
%2MTbS5Bg<ZVf)On^l2JqlCR@aV4CREUGlrW\X%L'q(S2dqFC)2@pM[(p+AO4];Ke$1u<KjDFVWeSh0Mp06<E*c;6]Q=K_gTIe_@m
%l09^%W"la+F6RkJ*D*_MS!A5G[pP3;B!icV>LEnL-u2m3T^O[(/e-W2Il\CKk@MI<pf!T_MOXqTf<Y(bF!R5=5<g,fXJO=:aI%Ig
%f6p!$]ahoYH`_JhiHAl&U;2#uN8&c&14UTTZP;QVIT^ah0((s[gO%@,13Ta)5[quEmgHd3=1h!HoM`C1[/Hu<YE=@E!mo$E*qu,d
%A^A'(PJ(pRK`)Y[AfT$(cbX0$c@W13:u:S&C-T7W\WYq.5"u7;ri<H6Hft+qefB"\ICOopJBtp`ck"p*:@ZIYo])B%Z9Ho[7trss
%46G3\EJlpEYO8piB"AYTo8$UKU;u]8)u$Bp=[g[/\IUfHEVJGNaeemup7UA>FToNA]sjPTB:d]3gc:G+iDti..JN@En(D!Vm&dlq
%"%1aiVJa,Y095roGL7WNgfG4nGF&[";>3fKrl0@Jr)e$t)`p(Sj4cj5G4U*2'6h2t[@c:Djk,U*EdM)4fC!u)mX"9ibhWEDQFl5b
%*P4C[&"db"17398<pr6.K:VN%R_,4&f@G<5o/0<ih6Z6\hVYF11In.H5_&BR/Te-Bf-8(W#B[9fqq*u593c:Yf91L:kI&2ZFakuS
%5('MERb+Anjn1IA<d6(#f?TtK0@qglkL$^'p/Q>(AoLs\HO,1WT&o\"g0;\t[T;XCY3X1rGYPpR%<U0J05J71U&_eCCu'p5CF+%3
%h%MqdY5@k6h0P_>*j5s6LW"M_'Ci7R3bj.ms#jLl:L/H4Y%KC_0%Z.W+_CW=Y'$sTI(kK@QTkr]lOW<qXn<L0\$iFT<HDG]PWJ+P
%iR8=ac$K+Fdp2?gjMo3nj\^G9CF@T`nA"+T)kl?Wa%":$e(KhSh``t/:ODMh9NKg"30)(2NH>,*Cu]i>J$<o/grjUun(ng=e@kOQ
%NV`HbF//Eb+)^]Tq;A,33BR;tCjPM&c8PX=XliF;6LAZJ"51H"J)NEC9S_o0c$],_\TrXMi7fg%K;m+N[DDh(CV08M=o6Rbc&]@.
%ib#B#m<IDD2<rk0eZM##:T*B4`n-BF]qY#W8a3MsFQ:K$\#5hhqc;<Ip?WcD*j>,LNuHHASq\#-noV3^6-h7C]A)oKmfH\oD>/K0
%HM\?18mWg9\'h0DFK9@`WbiKC&!+0eFDl*`FkAh6Wf%DeXj1).D/7Kj*C4VRFa2j<#4'^N=-UWdn%hM'i6<^mHg`uaOkt,fjRGDu
%X&X**Uj(s<VaI2&O?QtAD5FY?D`?]0qVl.#LVBP8IaFG]bk?J(@&rG%5KV^Vh@94Y:HpDJDLA)D6u73+qruuJHCi]s`L#rSp<dle
%[='%Jd'g,?L:[=kBWp/5VgR?=kq>ie"68djn+/DCr8E>!k"d&%<W(PE:u-W+PAU3ccL4KB]%5d2J".m<rk[<2*-AOII9TM9KU'En
%c@3QRg<'"&IHRoi?f--R.7SK\mucC#Vp`-aXED^g5[a31+,K@hjFDXJGo&GWf8[R_lo>]'J%duT["?oS^p*>G$Mr4Ik<[KoBa7S]
%*pb4uHL&6PhOa+Q"P(tjj'_b[gYQ3tM<s[8Y-0@fM;!8l2`!RFh7_S_7!9Yj:0r-q3Q?5,Mm&D-f.6<F+uehicr!J:677EFHK_f"
%]aIiC,-ar\F=_5D]P!lV6+HFO$3qka;^eT<F5b,pLP:VI0net7nM\&UWQX8i_3R<5B]Rn+e'.,FpjP;l&(e0d4T'K5^(p0L9APC@
%ot<jNZ1j_Y0qLRc]LX!@aN%F.&RE#\%"W;j]7Z&,HE\Lc6r+m%CXN%HNBpNjf]Yj&Oc=h6hqB-iUq?D*/>(%#`borQIBdO[&W2#)
%CraN^mIZO.&DiI:-,!LqbL`RLZ-r?S`D>a7'An8!MK-a>;db:%^Rj<&D\'afGg/(Rj8Bl)2WpENM>cJp?K*f*N[>eXP8=Q(2"`#o
%?`(\<=?A*,C!UWl]#lo)V0?bYbl#EYcJH#/E4*0QXLWoZ3m-nSB[,D*?9ZG^DNYs:D'KqCjHX76]@B]CZS,t5g>0kOEhJ0Tp-[^0
%fR>=AU$ieee\]%hGkUNSefWc[!_3chK>[)Fn)-NL<Y+&)2bjm0-aCbO:B&a*4NLQ0%PLSd$\rY]kKj>AH[="Z'F85Q7u%oCbL'ni
%XE^Nj44tjbVb3rEbPZ6MN^pNU-1@]m<U7#<ZMX<k,tHH4?-^tA)Y.1oXtG3?WQk(dId841>n&m[dpC*h^S^Vgl(2&NK5NH\MsX&)
%%\FbR8qXrOVI%C%AiK.5[;>d3U7XTZ$jO$kG>1*PHTs1FG!1V,/tLYgj_g[GE_bN[4=FEX++5HGgQ[p1X`^C</dM?fHd?ntNs-0"
%q1A&:G*@F/XIeT>rBBg4,b8P-ZUM3CI,E-g*d>'INP\HdoWTJ8Hln'3VeW*u+m$r^h_9FtEi?,;:J0a2b=V;+4$<1B54q\^*a`h]
%!M#:&o@+"XhLt]DG469%%gekn[cHh^k3^X<\PI2%Sfd7^b^'"R&"e?IPO8g.][=BR`SAq]?#9K!U9jli]aUJ_aij$d."(it2Vbk@
%bdFm:iMO1m/0$e`Mf47"_3Ono5.jK9`nJt>jP9sp>h/eIn(PBX$sarD52t2'M;=rmcGe%"Bijo]Pk)H<Q."upY?,nN4o<EZo$Mos
%\ECOV2[8rtc$&c'r?hJb\p*aJ8mU8?j^d[8p3Ik:Si72+DsO"Ma.4khMLoa6j@9+1mP1uWG%]A:F8+\abK'RXhj_8s[*G]_rqDEI
%6h]W=o'l2a:-?*f^&GOn4?Ij?n*CpQSXf088Z;BmT2$Vjf;I><jm^rI:j#!82YG,Rk=Y44`VgGAJ8S\V(OMF6S#aujMc"B4?_aX2
%rd*gXXM=&jm@1TCbt[W.i"b6iebc6Dh%qXOh_SQ3p&=eEW2^ejb-QDY]"M#a;oOn\//59;am3E@Ea-.-<m9sRFZ".n\-:\f97>cu
%C7H'hR^giAW*NCjB!$.OjO9hNTpSkCGYDo?9_,b93W?,20CS=aoi=3jBgfh#6K>B4H#'e`L:\>6l6`">h9KlDh(h\fqWpl?=#YJ%
%HM?D--DhkoZ!-oN4o7;_]ggtR-$e4PennHJ\,%10[Cr3E9!f[pK%=):mi6LKqk['N26<<i\%L-i2n((qGH8?L"(N]"*#L'DOZT=@
%3Sa(W6^R,P@d39nBDC:1TUX9GqdJj_Y+VqcmRU/1;o+f)o5-R\n,#$/df2C>9+VbuD&+.]G-p&bI4DVY6aXmBR'-JO0Z1j%B*da[
%=lkX7Ac6)'"nDY-9*;S+;pDLH'M5WB;t$6o%0d'E7CAg(CjS<$L0OY'T>a9hk'-%()TB,8i!2A5%YurOm2*k+Q^^@NEEmRS/DbDG
%lYA-'e6IX'k-C"I\GFnZ^'^P%qQ$T<?19B_:p8Sq62g[W4^nT9L=AE"M;L>q\tNc[K<C\-C)Hm:j*J.gIi(OSY77KM?'eU@i>j``
%gh9(*].UdTla]"(gMqe)B`hYVP&"I@L8p\88*`7:X0(B-5N'Y,[F]3[po'^`&)Va9#$gA(d?+F[)"-)B%nLXF7W$Z.JFpQkfPSIV
%P6@f94L%Z.En/Zd1Njpt;A?N'\C2q:](VHmNT409J%6=dB^+J/#GXOsL=<R_af2VMC]]H.[BE(37?Xn#5^g$PoP:?\VpAXaNLM_g
%*4Di*g;CtoF`#-g6JUO0m-lEFG@5\fke`2]Yb<0:1?R)[S/Yb/g,+eLQ3Gik+9!9bdeqgPn/sJU[q7]A0kGQVeCWMj1H&-J>%`IM
%e[mWE)TJL@;CQ^g5h'1`2UQp:?h#R%35kB`B5/c9B"bG2#8]kJ0=l[P_ToAkeCbi#>0uokJQ?Xu4-ctK\",nplh"\THhPFpj8gkF
%M4r-8oa&TMnH?V:OFLTt9*6^S/&6ih7X&e\]q,l<J1`2&_5(@V55Kg'7itHn28^d]bQ"#\A>LLPE&)j]jtQ$O4N.h*RM,jL]M>UH
%Ira+!I0S[a"Auti#9imr"5(03qZZ./=&#Ha%aNQGRQ:5?^t5/iZH[mDWEnauN6ZMb>bBSg$icKJpk7^p]OIQ=e>q3o06[Pi5;"Yc
%<5E*RNOeYKp,cDC^Tc<Ric`+cI-@"`/0(.Br],=o/,H(BTWS0.e&#ObDb1E[_&*P:?^^)Q#gA'U0,YdM!+5,%N_8!`,B1rgf0>[)
%kugO-*Bg@nQ$P]i$PG#/V+ig'dpl;Aip4K,ZQ@NrW"q4GVa6%=cB/<$+!6]oa!/ST-U"+`ZFATk<,L2/fhsH%Iqn-H.I"W3jH89t
%s5mGgOO(E5K4*4HdU\mg)CT]30)3"9rk*cJ@4f\c4@X$-^sO6P9]O'i\1[;'gZ'1A\8BEY-_'a5lDPCi?$_b2b8p-:dA?$J^OLI3
%PuR3r:*Q:Q5WWK=43bH.f6sC'GJ%,t>n-Kd`1,eW\A"<@aWI*EO7pkj\'@q7YSpS`iUb!b&<3iJ6N-7@[]pM"80qVqgSt.B?9ct)
%%I\md;TU`(8Z5Agl,N8D=_^1$Pqr3P@5Su4DDfH13ibDo%c^]'F"dN[+(RTBda?+NNncA7qEW#PVZ0It+"Gt-`a/G9]laRkajrg,
%Q&2V[`2.eXp?LmF/n]dFdsL3@p0LYo/`e:df+3'&fq$B]im$*?TGo.0jW2:OD#NHJ%Q?B9pZh#*+Oc96$9!aRHa6Z1lnc&!Zuq-C
%!e]oR?5p'PpuM7(S##Io+Ru][QNHJY4G\?l2?_i,+'sFS=,gL21X5,fEaR[^Gl6faSThS*HD>#XiV)6taa,aGXf<uJ8b_E5B2.0h
%&DC.EVS;T7Vn\hQdd>;SXaoYc*m/+AcR38=QV*i+iNBbZ]R<Anh<J%]IrM"7NH^s)FPBRXSj8dHAl&945]ZBH/UeKBeb8XZXpUCE
%S0)tX4'K3906T#[%qhB29OWGL0"3(Ei!*u*n0G.Y`\YW8J,ctNZkomH^S#`\]:4>I6ZIGnWoZgb'<euD</9_(:CL>0H<WH=#qtW-
%fj/aXUU^8`-L=3T2dT?3L]hf5WiQr0ke_hJls$+UmrG=n5-pH"a/t%;_?F>`pEBRq@;[H_4_bs=%G`&k-Yje?Y=P.)`1XfeFGt;D
%W7!&8#VU!"K(n1A;JB!-(3?C[Db/Z&6Tln_MB>j/SGhqilas'e3E=nh8;ib&/#g%(Ij8<4d`$%9Ujo7*?hPCWml^GCI_u58'Pic?
%2o1!5No%sG9(q<5/YdfO]?,A3Z_:ppgB*JqiHm\9>r,T<M:-&"<5(KL5#no&g*r<tOYr^3ciaQdi0F?+<rKrf*Jt.\Pq3HsjRUE#
%36p<8E&gK$A_`bmdSpOsTZ[c!Z-GM`2B1WLrM+1"Gtpei*ULQ0.p67)gH5DA+h`p$b:[%+\O7=fI#aZo+d*N"L)8C^=^HP=&Wki8
%qg6G/`EPP9b+\e)A(\9\\rT?jQ\[W6Q8HSHl1m)/n[b"WT*5sAY@&D6(s(BpE]%O/.58@p*l-RB0@OUsqXJ+hk$!d0L@7V):crXQ
%g)=>Ak5m^[Bp)YqQ?J\th8n^LRNFMY6ReKgHY?+l0-]NAndk7OQoqou.%H?iO.4IgW;)8;Ulp^#LAco'GPFd-`Z!d9>$#at=?J/>
%/oQm@#n"_^4/gctmX&k6r@t6ndd?J)+d\\m)k`2>D;%6.[prZr'i,tO,[]/m>G0](#=Lt`%d+:=6bV,LI"U5no&uU]"P#a.S,!j,
%bH$$ABI:lnXn2Is2]K-O<EdbI?AY;Jq^4)9pC.mITGO7(fin:;.:o[>&"!_pC&s@&X)bd#T+%Q$[IrdhjE8.qrTD\BcpP8WUHXgU
%]K3cgbMhb0&G"Yc<:lt.1@M>]$Juko%M"`4G&SRjL)YHA;U0OgRs-O=dt52"n*X)+*h4ZlJEdi&RL&?pjZCS6FQ\.5?e;ce@:-jA
%$KiVt>WCIEV8MciJ;cYu45Po1c5q0>_f)*J'Nb"B*D*"ETGsK0[Z,'WF)E^bCVE<79NXmT(/ZBY3p?Z(KNm1q<l.HhGob1Imq35h
%7@_PpDV+q4(#KSf#.TGN2Rq_p)FF*gbi7U>0u;82<o>*.2jdOn,TN-@,*u+DD@Q,i]7JL&Ur3I#dVG]L[#_$cgI"<>l5t#rThc9#
%J^0BS9l7tA1f=;+Vi?oeaOAcV'*8q`E5-g0[;rr,1Z?4LGIt:1lM$X10qo!*c.uA@Nu&9@Qb>QU%P:Q2,_G:5-#*lDN4PT7Lah+=
%;%)@aIj.TjeSLSn2P=rbRE'F(#]@DLEI9KfR34/)"*QIl?AMl<$mH:DCIgQbY/ijfE=a!cToC`9.p3n@2XJ??Ah/$)YX?tlC(L%G
%mNQP9b3Z.Iie'rLH74_D;oY8oYSs#:S>i5P/JGo&^F\eU7Y@Ls$ktD9/<+D:<C._CRfA'r@^Qc%OjMIFL:o+#n'_&c;udfP]H5-,
%o]YE#B2Fp\+P\\:%c@#<LH!Tg=k[^?\G.d<.pSsqJbM0+*NgbtM@0+86RR.&DFHhTm65sk*88IL$K<F`1"V<Rk&WIiCtm5n!konL
%^f`*4c;Zju(hf[[<6l,s6<WJ"c3eBl/BT%+r#E'WdVkS%h=Y>72=p<?aX+*N),'M\j-_)]5rX-,6<;-?mIn?H9kZ\4]B.<#r"hii
%Gl@I]3H@(7DQC'fp[kbX4ZRJ"N.<i;ms<hN[O&D+g%YRX.=X*ra"i`uV30<:F4W<$BlBYj>tdcW_F]p!M;&U$m^IfIA7_q^LKUO<
%1<nrUFRT.q#c5(gQu7f]36an-"14Bd*t5hT[On:B-a>i(.j*22\m7&iETRbBYo0RO9n@6r_VQ&'Gi.Q<FdQZ]o=_P(FKa80]jj40
%ZtTqnE(rW2oBQtVfC9m(3e%n(rA)*>3Ac8-Z-!1PnX-A1p:%AsC$pY]i^&amb:]gTkNlndg]CO9X!$^=Kobe/`;2(-5td](3<F"B
%&0&R_H#@>lBUSbBB$6VJpY'1:hqHRF:40JLLNRJr<8Y;D7Y_=Z9X<#(l5@:=MZCkroh=s+irc&=IiiTQ$uT/mNO:*R2YYp>G5)"2
%#i*&GM0LZ@Xt0Xl'8j8RQ"&tD[*f%O/.eC6^QP:cj?#aTR8@23'J'n75&AB.^%=&EAsa&74#_SF94*992c$W_PWTE%)q=!nOtLZg
%5ZOp7LCD4RE]K^`Sj'6,.F</M(^3pD#FA[Jj\ihdU$UqPb])je/RcT0Za'CLi#RQ[oPrP_a#>Dq9sfQ80a]F%i3@b*3^(p!2*FHV
%s0oTEh%7aDe"EDt+RL>T]Y83c/%P*;4hN4d'!1Uk]R"aa^+-";@GaH8K%%Wf7HkR*Sos)],=9d]33[%+$JG,9Y`Yu:>gD-[jOEpY
%hk.No5:.$d5KH(W^)Mt(1p9:6T7fs[T,BVY#kQRhE#q-=O%X<tX+s-sPH@6\'"5/%]9*/MooskOo;t$C`[iB%^clN\*s])!k4\]=
%C!;QI"QI>_R6Gt5P19Q8aaCZO2P/Q[@nUoj-fKT"Ug8Ef#G/)t8>Et)>f1-bS:=bEZ^;Kk]qo(7[i9r#2Sk$pnn3,IM<s4:!^KWf
%Z3fsQ<qafrWB/g?6_Zo`5J+P9*uJ3[N@EO$dD%%Sg_Yk:TfCstfNi?\MZKON_ju0\p-7`s`SLTDqVX.Km(Y9nDr;2pH.j_j&,ffn
%q06e>qK(1;hZ6uQ;aI8&?7:sfH*W<?pB$VVgPIL(f=u9.W@>BZ0*4g)<R.3.YBH*%j%:Q(GIMpSenhXOD>9'KO%Wl"J._Oh.5N(U
%5mGcOK-Wkcm'jDN%"B((.VGE>kOVS0s,a6n:J]/#3j>OT:s)/=!(noeSrJp([dJDE\s-^b]q,Y=_<Y8)4j1a^4/afP:$H8kARVY+
%/FZe7k((!J_0+sXk'2<<]4^IH"fguH(35NIJSKUm9V^"6aH;%c#c&!j_DlU!>u]PH650-_.[GR3T0OTsgUllZR"jD5KqfJi9Sie)
%F)1#RD"!RT%s'Yh[KLe+r)Fb4T)Do*pTZZn5X:bEm!%>/&rZ>B?LBY89_Z'(d5$X(N\?ZF\LHM\*AGM++F/OG'OOf9UAHC-:IN>^
%6+.Jqd*lat4j[kpTQ;$q]rIp'HsN@X82/mCgIoK/j;lsY&Wam-I-)Vo/$QD9)I$^X"`-P0"!0LL"RJ&GOKI-<_@o<U8aQc<]km\R
%FUO`lF>e<+H"QFFqP+*44rDk%(h':.Q[)*&"O*@iUK2.0Ya5O]/=FRB<\'4^HD6cMY-3E@Ubu'?60KpS2p\7VgXgb?8<RX5mk_gT
%Vsci0H":XDPLPb:AN;AK2aD?)J&nO3l1=F_JB=lW61(;B4-t^WB=qFDT=pM6!)(1c:b9%._K_gipKBsha+;b-l+IS^8`L[jCSV'a
%<AT"ALS#S@iu2h1^n,0(F_`BQ._Q$FkMX"4S*/W2kU+'4gQ$5&3&ln6L'g`PI>a=B`M7::Mbs<<cr2tZpNI\PGGOBmH7sVk;K!Qt
%4@d;a7MEN,l>lFZn/;)0d]bj@E]ES=PcIgqKlm3eetQ>BaJF&p=2'n;M9L87#t-93>BJY<+*ZW_h*I&92B$/UaMKki@i0$Yp((><
%0FNmRil9^?VY'DX?Gf&*%Y9[q<c2s\:VfcZI@'$<Rq"n$2@eU)=<Ug5HWkTOLkPi?fg!crV>#BWRoPP,L-4J8H6o:rjHkUa3D,1a
%Ua4WUaCTe(%H'+iJ.CV5L@enlh,!8>;K_NTc[jNXR5!=&jESdfP-)nfOC$Go%`[V<hNDBh0*Snr;8(2fkRZtm]/fW.V<D-48fO@Q
%>[#IDaPGnD:M!n4p74l[]Cf[c3Fr9=FaLdI:q\s%h$^uim:T4%aq;U.>R<Nt,^81PpkG'+=Sn:@+QYlY-ICQt;dagR%44M.O=_17
%2^$O^B=7]i2>M!6pD30LXM`gbLir[.=i)](<Y;?E;c+jk34L'Hq:*jf:ju=JI47@lVI>Zi&Tf6(nsEWscVQ`1QP0C.bEbE(l"&`4
%%IU+,T(VP!5X;urfpNCZ!amL&f3fSFKVK6Hh"bgHX/s+'cY=Q\+]::iT$n@4:ESA4]\1At>UH<3FMPUs!*uB,e7+(XFcCTb;=F>)
%nQL*!aX-/GXjs`-W=oh=),DCHKE;Pc-tasQLNsfrC-W>(>R0al4le.-83`9b5LMhOg!ALgnY=;_!2-_Wlii9-eT2Q`TB5Y"7PK2K
%?XMh5+AFM_cqY[9Ra#t]e?ZKBZt"0l?JsR^T/P+<^S_:^!q)(.@_prZLKG"UoigB,_QXe/^E;nofqFqBG'Qhh5%g>SeJ^iqBL5eJ
%p3e>oIG7LCT20M&=mnNLHArdjhC2F4nsdeq(%>pA46]!c\S!k,,fh/'6+[Xd.<rA\#pq1iF?=s5%u#3kX.\lj$[BL6:VL_emNtnc
%:S5Zh05<LOW*Kk<-XO!.GHS.CDd`\^<TRV_e_ja(g$u?<2L#NVW@b4\g?i`Qn?.0IXVF"uK2eKM_jYu/h9"h%'BNj<0''W\,NdBb
%UNsDp^^.=RihiZ$_EQ5%I(?poX]e2V(KefYV]lpU]tO%:ckskcmg_bU;in/geVr5)DX4pbpjOKdjW<`A**rS3,UJP\PS>DY)Q;^G
%oqsq*,V;28Ku5<_KbdUu>Cim(Q-WkWmn:-QqZ4mdNAT<Z[:*%9Z%F.,G(Ef7I*-?0[[.0Ek-DPDmUAg>Y?R0u`-6jrLj8^ZCN7Of
%8CHb)rNk;)9A0iTLHB;q(!16@BDAQ\C>1,hb.VthrqJH8c9Ju7i48oW[5:[J,(6I6SGE7E6!gOl_l_=]CjkWj"!mE)k/VT**@Tcr
%\hDnSCWP0O?b%V1!>*#WhT;A!l_/=pSflm=en+2a2UCB0di';XT#X;Z>;omdBW6Ucp5rqQnC@+ki%U^PMs'4"0\C`;:EOukAccop
%?n5;!Y.Z/7O!A3bZ?)1.hKEf2C`Ur)auO-L@."7@7a-iMoFBfoZ3=jEOdOon:X%#%B7G+l)NY%EFJf.EG9<tTn"$Ddk=c#e'm(G9
%TT;&:\RnkG$![P-(W9%fpo`A(NEils;hHUV7oic*bl^uGL)9;#pMK4P0C`$42)'^1iXLQtRKnN3J1;MDVQ^*\L*Bqa$%5T1hCXtG
%lq?@bN,qLi.Hn]9quGP`oR4OHksMGnfL;tE@E4ggDNAm$p?I]V:#1mLG:"0q0mkd,>0,pqVlcJ=]D@p)D$7F`eN)d;C^\;eDEGqU
%<Ut+bE`7eHT?H8Uhf4_<#r@S]b3a@DK?#%DYBCmMEQES.nAt@7DSg=FKa/Xui4`2,SNb*OAh7%kILL_H-'o0<\BoH^\mho9XRaD]
%]SP8fpfqH;F;PRJD:3WJh%[/t4VsuE"4W_.cl4+BTeA*O"+>gZ7uY0+q>RQ^r\K5fOF(>^ag:#GB85;I7DBA4",Z9m)7kEl6W-#V
%0+m_V!CpKeA#''B&(.V.s5qoPa.kpD,Xu'j=?I@X_')=f?lV(7Q%Ypj=!/9:J=]#)en$fV9LrU>"frZ07&<:*(6J_9XWEI[_/LS6
%G0qpU$)f/'KO@d?b(O^Z(l,:c@SO*O^-Acb%#Qlr7m+Xd#0B_]AN=@tnMoqOnf&*/6Js(=%*(%l;D=>s'%Wn=AR#iU#=U'[ER>P2
%nYj-NG_qfAWfSW_&.VVSX>[R4)m<["'PfP,/NVa.[P6%^2h1bg"rfDs`c0>eossMZ3)ds4PQ07Y8P$dPTi`Safolu2K(2Zn(($+J
%0H(ZN]`)"FcTEdj(.$\aG!gW;bpt>5K@,btk=WW(0dqpX/np=\fsJppWR]J[/07:5jD9bs%l5s`WaIe5`4/\gP+_.Rh9mLZ*,$e/
%(>>9i:u$:HRgTUd?m6A],X@c^/#sDfaMr[fb)+=Bg(kY+31FtF3r#cZZaXlnYSS$ae:GS*_2&d;G]g;9gT2`ubWoiGe;R4:]W"?:
%@/>M!GabQF'_.,-/[6M69<OM<NAZKHcS<ICR5G=`@,Z>U-qNl]c&E$o+6q"%M2]n]C)XH>Cd$>t/DH&8`F'l8Ye/9cA]&85/$e]7
%TRsG'`7gpf[kfs%Z\f+KTS2JKZ)pOuI#u2OWZ3`+N'n9kY<Q(+1JUT27F8KAh67rG",fXbpn`Y':^dS[W8k=r98`Ln\Pb1Jef<g\
%PYKHGq!g%:M^666&<2LY`l'9:O6DiEg#YIlWMRu(YVG\.Z0X%\!H(+?(FY+g:p*=tAjnWO"Y(m8>c]M<q?^u`c04BT\V,p?Qmdnq
%!N/js`,e^IR?c.-kY9VQDfiMRR#Nd@ZXnI62;]W-,3*.7i&d^hEONjtK1jLGg,Nr3&"HC/Oe$o(9!*b)LCK(^O(E*o2F>kOr0oQ0
%Y&.E6D$_G&Jdu2jG@-ilbqtsNQ+;[R8kl^kV;YK0(=b^766,IY<#Y1eGRB*,$[cB)1N)NndG4-9MC#RLD+3GB4@0E-`.@h'$u5R#
%9O\?#W.Uou:bPL(U*Ud)Tk+XHd&&de_Y(s7P!Mrm6O#^!gE^/nr?DhHBHbA9e6uN?KkDBl+;^AP\-0E0q]MsQ)`j[h*:C&bi_"$G
%LT,s.6*]#)YfF:Y!.;YQ(^DQ^.0i&88m)`Z!a<a*KJpkEM>#+s*.o!5P^sA!*!]_n<O5Ra&K'`*ClIsI&ZbDEa1qj1AIsOZRDB]/
%1h\<m*/8j>F`E%CB#oN3;T_9;X#7&u-Ar]U)OVPO29*Qo\+>;)]ErULK=X't8#V/FO_r[5;J%_l3GM]q9A]L^dU4mGO3j1P/AlVP
%Q'/Cl3/DN]kAh9Nn2A>V#3Y=Uaq]&D_F4*3.BsKiL579]6Xf,si=8Jtd#$9a=(5Z'6)A+ON3u-qDs)*@:^h8[*;H2L@M"6nPSN`T
%do'd'ZoNGroul)0"!<J`652%[;g?4QbE\4kEmTWH0nJ5=Lk`B&#!nXM-r=>5Ag#,@%9cA_L>a@d=o=q[$$&jq&i.6hJiG9ca[2Xe
%Z[-,`d326BFod,Q/\,A9KIW(W(91tI`63[s1;fg1;=e8qnoi*)#pYDLCfr!64'[iBLl@5o8S%H,fUN4fCl'3%,tr@o].j1=gg_!!
%/L:V=+;;"0ISe8d31*#=/L4g`74rF$LtZlGed*;n"=@bjSOEZ)1rf&.KGI`.!sQ@Dfd;86TAgA"K5"m8W+d?\KYnn=N55kT'F.3K
%='PbD$H4`1W8ejlJfZb-o$E")@Uqb,X+`qmG4>_BJIK#L36;WF.^?f">0=YfdMQ%R(_0K<=G($6dG^+,[/c;@2^f.\OAZQ[:fXeF
%MgJXC9S0^k%#9#JgD>JI[$6+Ig)L>_/FB_EC?uA<d(tca3>#ro<lUd5/S4^.BpW6=+p2"6Xb8tUC.m?4R*foXJ<Y*4JMbC^&K/Nc
%SB),3/[<-QF#dTX_&FAL#cJ,@\:JC\'p6%$$CHOoQKV&m)fKL#$nrS,)/'*lgq^UC"_:"@8g-.\]T'c8hSL*@i#J.M)5>DM(hK-O
%:m58eKc#h-$t``a#bX!_.Zg-)&Rd^d"_2\l>,"Bho<nX<Ji>;7s//Iu."SC]'j7'U!bN(P-#,E@9A[NflH]_b5i=s^"W+[AY(-q=
%_^&d^'=aP<,'[=%Bg:&a`<K#B$s*uXciRr*%#tnJi!71/N_B0s+Thp**j[%7"+eV:)A[+F%XnJG$NM5a8K#_FWT"aAT^$)W(AkIh
%R0d_e)ADG"[lTiF1W"C\QL,8(JNG)XA2G:q+Ch"YgdK4k9@.@8ch'Yg!7NDb&VP:15coZi%q7p(J=*T]R6Dq(^]8),>SG\`[[`I;
%5fZ!<\YXrd1e6Q!!\Le;!(iXK,u#.'?D*,pD1Q;GZm/bki<<E)YQ/Nt/)pEcJ-?f)"Wq:%j1J(f%5\m]5m&^W^jmbEeg8X%SiS-^
%@^(LG>MLX.&fYkaV&Us-NNjZhla2lbM`"!050i$e^^&`;\>5a]EmT=dPnr%@^e1Sod,p]Md=-A1A!oP5Ab^ea_A2U`Amg6d"U7OH
%)rpik";8B/Z1OZS16B<Db_g5bTSS5(%`9UB^:7#p6f]p$.HQWm\]K`qd\*FYIaI3o)rpkA(K0`la8l>,l53d!3i5@>R86JTe^3HW
%D4rS-qdX;id88%P>N1OM/i`nu`l>h/_L\9$;/j?U*J4Kb_]usJF*b\kp*g?BB#:bZ0b%nLbhtHc5\V']+>'iB48ZCLN/]\b3O!S8
%!&0$a3"?p)FYO.fPtHsNm'BT)-F>dJ9WVUXl52iqKG6pq@@J$PrGnQa%$6)oKT-<9:';QLr@s\TZq%q8dkNAY8V83#C,HF7&DQ27
%`Jfnr$C$Vq$6%*%O^/m4PRNX28(j9FmfG`b>E[#,"'$Ls'i`Sfa<h!i8kk(!7h(FMb?H0C%u_&E%,)K-k'A9aKoCpW0kBnifUN46
%C^D2;%SUpX?nhPb,+B,l>+l_L0Fb9;IT4Mk3?UTo/Z_7lZEER]Lt].3ed<Gr"?)SZNmR]qLEj1Q65qoC`ttNu`?M)n"#IA5)oD6`
%"q*<HV]+bJ.'"+6iB#m>aoC8RfCW12,M2;dkWe-?!-qH+bAYg88S&bNn-jYP):E9H-oE7P/r_S1aj@eHS.e1DmX)FKWhmh(%;;E[
%;ibo9_&sU@j$R%SF3OQ;7m=*5/'L.s^K%ql1WIB*0@-37NG7qO,Ki1b\8N=,3cHY"SKm8]DWo%+nscq'q:CLf9XdCMLE87ao!ibW
%7,@+DL2R*amHlD]F^^nEc4LF_QeY_/it[l0P>Ttg+4,Gc0SS@2Ph"kchS/M<@1b$X?/jD,)qGQQjM^UM?7_)gkE;Z#XtO"qSE2t4
%G<VDT2KTSInq``,mp7?dP5\8e;p3T<Qa?G<d^2dR2OY"5:#b7<2-".Y6rp\3e151lCTPDD>dD?gESk_*#jmI1H-G-:3I6(.R.2U%
%%H>p1#PK>VY'=3lL,Jo+]J5\iHE\.+=nM#=g[:\u2K[r'q)V[!r%#^KlA+Yd1CTfu3BM[!c*m=_p_MdjhYp5J(\S0q*/cMYak?)#
%M6MAjerDa&pE=`;d-eCW`U*.!Dr5e\R'A(:^#@Mrq.oa@Eaj;7#F7:7F2ZQGhj:HMc;J"6h"L[";\sNg_"(s?hY@tCZ_Tfb_jh%s
%NMp]dYMn29]FF*,4Q"n7C$N`&3Lh<*VM7+k>iQ?P2ot>]pPEVQCG4HD@J9>FV/O""b]o?M[d`SLpGI%#3H;XSr1s_sHnb64pLPk@
%1W@rVc!$aHm-bVFfpd<eFl=n'n*AH3K.[)^\\T&2I;dP`j#jUGmldO54Q:/!nun[s&-tiZ_''#RW1",\HHdlp5$]SY[QC_18/#75
%$BR'PW"r]NfFj<d?pSXb.)VaM:'8'_A8pgq0>P&'B#QJY/#qr&E#XT#e=Hu24S8>MZlpe*WdqBaLj^CLhd^Ds,].(YPhqH4!^G=t
%VRGS0$[p6YrJK#gI[3DeN1\T5&F"P_BNW3)lu_$@LT"9fi)!MbQ!sOaAI2JMT_"jf"iUrZ.IibF+Yk1-<=JZFBF$bdmZi=_NqB.!
%XrS;/'o=/=LZQ9\%9mZ,4VZ6Z:3/%E+prI',"3UhXba$FBOs8,ajU)#@$H4.C9Ke]6/!4JdtXZO,I&'%VuBBhJ*5`2U-9h;CC`gZ
%*^M(t<_7"-%-3&GRkX818@'1]@kn!nT4Oh]Xl7LS79@MX;h9Wh<NqQN;1VuZkHT6P8p$toA[-V\0P(t^d\0503.D]O#sp<H@HdiL
%X9XG\6I;s*O^;hF8];[0-9j#TKgFlgL^6SfHo[AhVRNdALM2,Z[8r<^PG+1(e49e-A"S[^LiV5.P0WTk;1YQ`oVQ]:n&;lFeoXOH
%QIp\NKIiG2qHlb?k=#D?ag:9/fV0)4&W7jDEn\B\MPML)C4+4W&#^f@eK,sS,NfZH#\7rl[VKHQTOY>g,l(iEL,W6;0UJc_'ddW2
%L$Nso!A^TU1/p#mQ1+V?I\sQm6e8!1k<;`k//DS-%>e-jJu0T+4cnbn-j,`_)APiKDMWDZJi[*#>an@%C*fWK;;)Z&p#;0kTZ*]7
%7r(7"3C7Q3$=.I&`G9C-B#h&^b>`Q9&eg3Yq%"@``:8pFV"@=Z,?@Ib+iDk8aC?tIS`=rC-&d=D4&HHg,a]gQWSV_FCD!dD8$UVL
%0eda4QD:C[9mBFN9Y_!mIgW(I14#\gM;XNSeqZQ:QpNLMCOh<`'^iafcGKL`08a'WdDfOh8,>_Dh`GEs4=Pt27fc.1[LYrZACHA<
%%r=#bI.+li`_acdBf2&uWF`$J*ATr])o`02G753EMN6emTW;A]"I>As"/T?Udd=!&6u%tq`Hp`YC]b&ga3oJ$Q6sJsb6?7SrC=Zs
%b-aV;=m*%uB)*1]69\X64"J6X2ci>I+M5iF3J!+lG>ZLR<j>G@pc/Df+Mt-T8nf]"95=j,r*q+A"P'nJKKcp:2,%!PAPM0]+T/+>
%R#Hi[AC]PEW%/H^PqNaYPcaRq`1b6aE`;+!:aT@"k.t1qkb+m!_"o2[<>+:N&p5bb5BNAf9t,O#7Lcq,b<QQ;6)iYc$VZDu@1jSo
%lp&OWW\<LmS;Uo7V*DfIr6b#?%N@HJ1"<g&k[r5e&9BF&/Baat7Cm($;,tG1G=9D\ALEtq_ieM<2d4JR(:KO1X&ZPgV)6`#FI_3\
%MufnVKKtUFK+?B*:dd@qfWbOZoOjGBQjA>;9YA5>QehihU00N+gOQZl5@g#-S0A8?[Ig=B?=:l5?X^`Xnjj!G6Um$G$67L][<Q4u
%@TXO`$SNub`5SJlg_Q]\OHo7*B"m1SMXcgYUk[9G_=a,l9-Y=A0t8&45k[U**J@F85[1M&M4sTOQC"b#,mR^gp%u&,oP/!(E&uXp
%!JSM=KWE>oEhOq/1a"X5%5lANTbBifEER'scR>DJU26E'hh0;A7j4'_-;T`s,Xg$kq0rEc%-ds*_4rCkY`j7_^\3@tS;O+h5)bj;
%A8en&%Qp3_8[`/`.(_o1A-rIqnZdKkVm7CE2<LX#cK'k;-*<P>Z6EF'5hYbK["$%]<6LqC@0E;/VBB-$Baud(1R0X?/!E-E<'MiA
%=BXKB`#s+Z@tOa_8^$"s\Z^Pum7_=3Rr38C6D?fZf,AdB!t71.*O<a[.hmVe<A[/#CScNWWd3B2PNQAJAhJ22'D?0F.+K:&#\L('
%Zsj04ULKd&blfg_2FV@L,U,/;Rai=KgBe"MWh"8l=f=BcA8"te'716W:IoMblEap^joN@LQd24_BZ=,.h@h>,jXu>EeSt.kL0Gcj
%A")F5MWoYP%1Wm7Q)sncgLY^dF'f]mIc*HoUitQ:AUGGZ;)%Z2s&uNSkTJT^%C'.J;b@(;Z=OQ19n62t/d[ULJ.<<FjWN[q8OZe#
%&!2ql,TE)@*$22\D]<bLNUt!]O+!2,[Mt]RQEp'p[('od+i=N#%Z4QOVP"n_.lZ0MWs;\l!S)dTMf.3q#ne?cSL2-oD%Vl<[;KiK
%cLk"d&'09$$Ug#V]$gp5CI2Jt=p[+kF,#Y[n2LX,*kZ\!12q8q0=FDd;3.*qNI9[B,9Yibd+(E,+hGsk,k:\u-TWuK&rg7c0d7>Q
%#I+L0@@`?GNJpp1S.:9P_\ii!#BWh](BT76ek;]j>3+ThQF;[D@t-dZO01r2A/?JVYgRZ6J9=a?Ze'<4_"_^mf"mk#6ETKA^ep%a
%a@0mSf]Y\<"A'?bH-dcWYbYc![9"VY.Hn@"I1n\iX)eI*<:)?"dWk1^i2k:*m'(%]'P8p!X$I7X!(W)"GT.!p;+=O\A^M^-U5!uV
%"aJ\9UZ(j.RIH/BJ2G0[>\::Bj;_n%V::l&LpN$B&Rf;s"cu8kKJWp#2Q/l;%3O<'3%Yi31becO\!+35ZDXb^,CL:Yd.'.8Cf;=f
%YpXO'l9O-]inNM_+j1[F1,2u"N]P:r`NbSsI,qOuLoKBVQM7Zh#41(L9pq[kE"4U8FpNMI\`q;Zm0(:6a+CV\kG6,Sm`%XYq[QEK
%Y1o!%0PnJ*14Ot>GDPq/C_m7pLBaNrLqNgM-6-.[B`_m3_;X]YcEen!^NhQm36R5:d-qa>*!hZX+d'K+2A[=&;SSbfS6e6WM+Jf@
%#TQ)gcAI!5CW%q4TD&fJ@:8^E3*ld%FmR7tl"V[AUDl(qek<5CnFk=K6;*\LLS*Q.]H12/or+9S?,CP-km+Oeahfh*L0K[/C.h:j
%Fopt6GOnIH2ubd+n%_ocI;RsaNgt%;<p=e2\3R450M;]0J0gX?163gP)]6/Pim'<sE$a/We6rON</_"07QUciVO(]0<i\\0[,;B)
%&+8"2cj]&lY!>!#Fr6RSh2@:P"`)Lq1[S*BfOfEQXSWg+occc.UtAC;XLtRiU(V6B%YqqHpG.2=`?0$#rpQN]ZH+qE+PjsblDn5/
%kl&L(D^VbME&GB5GOo1Ga8PV_"n%HK<a/tb_<R-L>fKO`_Mh^m1OAY+'U<CB&ANJtf;PUO?K0$)f<i7q9"@H1*YlS3dGGY@;,?0<
%=7CEZ!AA[XAaa1"'2*%5WSX>X1R]*E.9rX;_D>7a3Jbh?(e:3S)oZ<_q6lnV]j)n14/'/u2:PL57NI2\m:JfRS=4C,nn]%GP;Kk!
%\P>0W`5&*dNID.;!H5Dk4$BnrlVT8,Sum]m"u_0No_WI\/`Q57Y*T]>%g%="QtS'%a4S7K;7k30$0;M2kb`<Y3XX1PaG<b0c:o[p
%JfN2_,PF6()taVU$J4M9fm;Z9V5*:E_.iBSH97mEUQ32K\g`$Bi18M(_fTA2ToK.Di>VYI>Bb_oa(A2Mp`hQrq?VCcHcMkSG:XdS
%FVM"+:#U@BQTB$E&W[sj)Kh:TIV-j91XXqp%3'F(Y0fu&WV\Xr7XF.DJXb\/;m#A>qF5C9Zu"5h\4/E2k7(P5h:Zeo<e15!*E*>e
%STh3>dI4C5KJg'igN*^HN\Uh+ASH_)1Y=UqRpUcJq%Lebc#Ld$'RLB%/LQPu\3'/J?\71qkQ_TcmrS3>>?]L&eWSJ3ddD\8d.Ha\
%o!Sm@4`2+HRDi@mrE=`Td2i'Kf:BToi>Tb@g*-'gE/im&`CB5)!mV4H@.6n]]JtPLSA7Xph`Z7uQiF<Sr2Hd!LQ"cT2hoJt1UBn?
%=i+.QSL@a<Nl$rpXc%X5?fbL:HlTVLb$ec-G8.2W8)a8V>28j_=rZ[25juFeB>ts<o4Wjpe^S"f/(B+ToP=(e!KVPFTK)0h$EIgk
%W2K.OgVculiZl>o<Wr\oPS8:'JO-@C\51sVmB=o3i/-(",2nKI"O@aa0M^Qn"T%!Dp=JLun:]DpddG*]O,,1QFom*\GPc1J]0(Mo
%(5.J:1uk$b5,2D!b'dbYLV`E^D[n_Xp'PkXf;2h1)YCu0VeWH.)g$-4gs_8JC3bO#VB</!_#KEY,u0-DS2%Yn(+/o'SHj&8m1jdf
%_V0sg(*OY:q"$(m"j-0sWNMOgfLLi2moQ?nE0=XrjeJ)]P/G03N2b)0X6gXF+[^LtP/`e2I\jg:P1UTn)bG62]mtQ2L@6G'_t_cR
%BhW`TBtScXY`l;'j%F@!rl%YKn$$26,VJ[U-?Y7CC(J2g08pPQAT"FQ?;j-Z`^*WG&fqAf`&2o*a^0Ni/0ZG%QoRb6,=@bM3ILTK
%(dkp5[3>9=#L:&#@Z,dB4s.YDoj[kFKP%d\V@\-1eFU%PFNB$]Tig:"]SND/08,2+Qln)e5WGb!d;k<b6G;jB-FOb9i:FQ8NULq[
%&8OE_Q_,6_95XK@aFUJXh7Z)GfLh6CMsVFIV5'%3\Q8n++Mr3Er)FiRs&AS\H5arQgm8:i8sB49PP)ZnohWW4`XMU%38iGU(Rb_!
%b7X^dVH_FMh.O$I&H@^Q(XZ3rT9mZ#a'`Y[EmD"lo$_3pQDUQ>,RG<,s%Q+d:%XJ6^Lce[QP2qcn:%Gq3'a2-N%2NK&/!QuTo5f0
%B[Kf]*H8\F0DU\M0(V'Qoqao#,J^738`;*TW7kq?%X<Ze::+W])m?s%EtA"_*MjP0F,?5<FQLR^'QVU;BBfUdb10e17!LDc:5G4N
%L5Ml5SGO0I.6L1onY1Ph9.d@ZE.^L?'grl2`mkF[W%>W91[h$\"Idq5MJsBsE]?<8pJH\do4@&/W@m$q>LD<G;!?,FdDpag_;ZIn
%l&5o/6$H'YCr\O-OVkQOI23hM$:qTDX8U\?.UK.&mZD88+I!isids&K+sJ*OfVgZniSYpN((Di64!@E4aX&NI#?-A>F%%Xu!!g*R
%?oJkPbj^JuJDdHK40o'^22sgo#h1hoWK%bXcVi49IDkI\'OT&iIAD218SD4L0\?Bj&;eRSGfhBp6?.hG@8:ik%ORcd@]o=/V/oPV
%+tHqjM"bTP<@`m6J4k2T.#<1t$5AX-We$/XZ<_e+g?!O7:J4';#T%SJXg'u<DFU:ST@(%2m1Sm#7aNQQHmF]kjP!EA%=?!2&VETm
%N3_*8)aY1Fc]nal-m'"+al&">q'@32-",@:I7)NrdALHs879XtQq<+IeJR7`Tl<TA(/n*sTK?nq@"P+7$/qg,MZ8Cfam<\@6$bMb
%EIsm<47SKOo#8^"cIFQ-dR)c_YnkGb(feIa=W^ngoHaWd-q9+gHc3qQ)ZU4LZIS/q#ecX@gb\5q+E9ZB1[J0BLO%l8TO=-BIA[t?
%BPG?BKQH4OBMM]Q\!CGeCl!n#Fps&9:ka--:@/TV43-_R/AW1o6WbU[cR.rkhXhK!n6"$L!A@:`$=BGb9cMM0AC9VdU-G"S@9sJf
%U8M!pA$Pj7F^/ap>_c(M>-0FZF)GDYVkL+o;q#FuU...@dft#e1is&J]^t82O&l5`_;mY$APb`n]+`?l*L6ko<>s!dQ)kDg&:7*;
%)6?.^Q!#*7CR6b\ToYqc'tCBfQla63+s4_p+]^3^-#/t;(YrONHI$L``"9LjX#kWj7*i+cEdM5]AaQP0-cS0EKf9UG:/"N')MgE`
%U?OV$4s^r1-p#e<XBN\iFMuY`hs/\uM8cu9*lnaERUldQLi02-CPK!&Eg2=D:Z=Mfr/`V_.fqN;I*bk/CP$@-AM#Bg$^WF;]r8,R
%4s3C^Wss"VY>No4#CSh-VQ\HAr5ZSJDn!L\X8hb]T3hN`&-).Jhu3!CrAOZK5J6pWQTtB=^C&#"V86NB//'O``%Nj^hShWOF>^l'
%`KB=#l=RUm>[3&#bAXco<CToeh8GN\T4"VGrI4nTf!$DU"sGs37/BfUD*3(2L^;S3Z;312E$<YI-V'UJ,@iQ.9d7eKL88$]lmK<&
%AuLn%1\WpW%tZHK;I)]+5p[lXJbW+G3"1*ej"B]$(NoD&bNMeCW:&N8PVg0g!KQ?UjUr3keDaMl=`oH&obL)Nft[gPGM2X%Qe3lJ
%q;sq)Mq&lY*u"jj.7(nm$jA4<:Via6]G2SBkf^2GdlR)(!"j@70+_c3L)`p9_3("7-8At;&"OFMPG/9#)SFNL1)_jo$f"<b7\L>$
%`?BAnH&k#[/%NJ^h@dhi,0[3s_'94Qg:Hsc@C^sk+_ZIGoWVR3nAj2U,:Scf36T+lkRm#5$mK$&9Frq6@@.`j6CTn8G:3TRJ)MF8
%";tV%?5=u'2Kuk-`J$iM$t:mCJU268*@Zd105_?heEtU^N["]o3%E%IiC"FmY!p<XPbYkOeC\Hi@3*GS(0&@t[:"eJ><!2W(U^LN
%PVm]Qro<2umfYugg9C_l`d2-.^"3gtKq+N8@+6]>AkugE7&pi-X\5`$6lVX-'<H&1OHFR>)p%0]42H_WUnD/jWfrb6^c@rW*;7]d
%p@;5kTsf_!:tELJSW'r+8BaS\J+kGf*H0F4:&U`c)Ilr)r_X^0(H*+_'m4_/@`aTh@6+rs`hIp?&i)d=])-gfd7GMAQMf'>#tpl8
%r7cYDT[ff+AG,eM2eOtZNnD,tj5XgtJKl_3`0<s$^cTJW-9)#0f_1dK665L*@gF!1DFN\9=[/sF0-sR>=eF(-dNZ!.rP76501=^b
%fk\i6Vd[*XeHiYk,+^JE<Se_BNB#K0BWA=/:$(&8F?5-s+YohRqO(KNNmpPR(DjSB[RdOG5Odknc#mZ7)@etM5rM#r7`Li*X$^-9
%P*6RZCQk2:jLVZT%G.gHq!=Vqa-i+U<s%%4m+<Mi3rd"ULZt:E!(1UnX_tGA+.3EX-]%9i;1]b;NB#c8BKEFj9g)Z%FP>;bjr/]:
%6aX@,YY3_/ie5"\eZVDVp&1ILVeit$>M%Rkh_).p`Kgt46QGjR$&K"p8PLMbS_:"i>o&m^s(XO%Pg[)"hLW"?Mq%%h4bmrkg@m3X
%T>0K&F_j)$dp.[o(D8h"?>uTsg>R07DE]T=p`/A\EGlQ"0;$9#3S_=P(4'K`]_N?r7W:62bEr/HSEY=>Zm[rU(Lc1am+Wkr3&l!D
%Dl^5u?,(.@pOjMu$]WAs1V(s#+WEJI?_!Vf_h8i:*8@GGp6W$+1lq8)9ur>F;KC-@rTrU`^27nKK/8i9[MU>$-.?SgNF3N#=dN\-
%`Hr<jb>E4-lSJjhlb#t,$2Z:*U?odDZ'H'k?Fs*s\Og.3gkb+@JqCmfEH):cZA##^@P__,%_+ROVb1PM_aP9sQ52aQ\ncFjY1N7]
%%_HQMS`.P2ZLE&0]<hEC+7%Hpo8&=N&WOSh#B&(ehPP/;iSK$@DN"=L,(WGo-NYa<!$7(]FPh[?ZKARarBb=0;7-H5H4IiFmh*GX
%[u"#qY6\GiM=4#/I/9`SYA<5h_0s.Zf]nD*D@NZ()Puop@.WT)ArFRmf7esjj!bu4F4Yn)QMr5F25KA2;C[!4pkb@3`E5N8Z6hrC
%,bW`WKOgg/apMU,:'h`"ba\bV@m+XEQl]q.3-lZF85*C\M&38e?C)j;Mu&n.rY+fC.Fu+3#BFd:q_)>JO4;Ig_=15R?gTk``%?59
%G.kW"9["GiqQhFK>s#>Q'Q!%(SS?@J.HrXG/&jXPS1]&J3IM<7X*,7_F<-96elU_r.2.$r'g''_\DoT(0oqBXqH5dO!oddi^lks<
%jT`SM_%#,dN=N2Lf3-GC=W',a??)8r]T-92l.]kI2_U?OD(i];*BQ]Decdb"U^c0#R)KEuRS\18^;>9X20I.WLNtc?RoCB]?t)'M
%jfo)p[TAi3qg92%@9GAeAIV(p?L>LGoC&p_f&,Bb]mp&U2fm7NAnW_%3J(32OL49UhE713"2e?9C]6HJ*3MNHr-C/G1>RL?&$kd?
%b\r'8q9q=?-E4G4)^DHEBCP%L2]TI*-28'^,YS-;/C/M[@E2%8*%fN]IPnkC^X!Lsmj3Q-(XIBq=?MJWn<u$Ef/^\4Vrq.0>N"lO
%`XV@uQf)c\`0lG%VLHPt17oPPfOjl!JZeUVq'Ge:*$s[SO6MZL]XREfh/fs>h0IWM')W#q6FIL=N[('"@m80X3RDnt2noL1bL,?4
%HT*6],6'jP8iXYN&gBebJue\nkaI!O&pfS(^3P_SkW6JJ?\0B:d8Ch%dFL8.V%*:HYND20LN!AdSmiue(.SZ"i^(n3Zp<OEebg'X
%5"G'+Xk(dLj&:m!c-!9>?A2'GL@)ENfP:9a)jOoF0+j\ANU;bp[TD,QR;l/N1UC/<c-41.a'IFMliWX.ZZn4b(5B7Z\Zjo[h=_3Q
%!+tp-hTY=D@5G6ph=9=p$Mtl#:L"E@Nj,D&BgJ-EBgk:HJdLl-Qf)c\!K2QmBWV9+UCFf[n)ftp#B7%_ZKGmQ".l7sm`rH,Qf(AQ
%Zt=jKBMT`%,mV$,n)ftpO)X_$:2Yn7#-^YkY43N;p$aAP`!tQu+<5CM>2u^[-+KH5kI3Xs[/Ih&ArF)^\A>[hn)fsEo,mnH2q]:/
%BRe'<;.Q(M%nk[[k7lFfp96(CKu3:alUN,0T=#IPMc'6fNFb+a[6L>TfqKlfVqi&Hbd%>8\^:l2aPp"A[1S',UuPl+(#<p+&F90P
%+o&h30k%<!mJ<M)FO19h71MB(Un[1eT=#;?8ZX&uqhX-EV9I&BTqR-%)+WdU4<13I]m(U[k[&\*)CcfJI>5YM---EsMm.>`lsoGr
%`e6&Ir&nVDN-hT;]7(T\`<7VM@AH;<bMM,&pW;P\`5Lgs310Hk#c1%jV_*$Z>qtsHrZQmJpa!Mo4nAJYO20Z$E26h)nMGp8[K<>U
%5PbZf+%[tdGVm>(EP+8OhpGV\%Vd<LXgLGa9,29+F--:e7X#(R\KB>>a&+^.N-ZE?\6-,:&.a%hCimaY?W@l:IU@`FXKUbCpfM?.
%@Lhslf]_VW,56frru/6UDEdP"T\QC<<S'H&OVobe?%`d6("*EZP2@\#XQ7Qr>g]b\s':90<d(K_eC+q*dBAKB\IJB'DKL#?P?Vic
%nG<YH[.k&n7RQt57KI?Q&bP,rhl2V/(Jgtop;`gZg5iB_MY@Y9B(,AYs&sKLdU$cWohk8aIFhQd]<OGIq6*$_2Z2"=SS)%9h>Aip
%[H*C0W"[7*r^@WbOB=uB./+4+Zd;o/TkYnUS^P?A&pVD"><q\&c@kf11!UUTKF,i-d<//410TS%!EA`9@+%B?8rQQ^.'nRd8Gt#b
%L?_I__JV]-)fJ0Mc(O3L\m[$5s+Qu<)Kr/uK:*_j-k)&V]ETta`D7kTR"BTdBa7![aQ^CX!%j<1M?HJ/'t.*jZR\[l<>SJrg'c"1
%)/C_J2g6Ki)T7D&b^Z`W)VJ/C$Cndj'I2<F\X=b[)/a`(j/=`c%[AV4#;d\3ot:FOcJXG7e\F<.L,?E&B,t8J%6betFpU@UStOH[
%;,*06Jn\O.!l_hP?p\.n=E1L8F>p-DC`Ce0=:9h"eW1SDPu03-`+fJGm%ZH?_u(4VG=fhmO(L^>7L/`d5FcmnfLg"6.62,h5"dV1
%:&+KP9tqJ7BdiJ>aH5gQ@#lQ0_&I$r(]`]_pj.dC/&S$0;9S+C$]DAma(XW6)au?'NbO8/2'7TF$=Uh<rQcWC=ORNXB)jZMnY'?q
%KDb`,d&]*j*')M]/(cZ/B.KOCj0Y_kmPG+rA1RpY1;S*N6O;VI(!a6kSG!#tWM0^ZAd+GC7lUaIkTk2pCYRR?&@B5&@T72"X0>Q/
%8gs?unu'>!`\IS4,0+8E-[O09PUSH]G>4'29["K6.Q&`O;Rk8If-&1mTGN@V06sm/XG?_h'K:WFPj$2nB^!k!BAm2Z1anm-@l8,I
%id;`6L9@agdWnYUK?WP?S94(@0q):/etDpmJdqs";6,`J7j^1nk[@+$Tjl%<d*3nA]e>Y7QF>3mY[!$N4E4P\jWsGQ_>02J5p\t0
%a)U^51XKQ"KNgHRn%,W,e1ITR7$B69N!j;D=T[gmZHp8E6AW4ma@C+t\pP[Ib7&JE6`[[?5i&=:YcA5+#e&n.SlMM>-)?$`l7TVT
%'u\<BDNb$GDK6l:?0S"iV1sjglE2KHfg2`i%qL1;7FtI^NGSFJ=nIPZc!T"11b4!K2q6`Hl(_\-'@"V0^r_W'W):crNM(C\Tm9El
%M!HDKj4Ue9#o!W#ogo80bgC4+ocr8I"D`_fUs,`p@kA(Z*d2IS=NeW\a)L^i_<[IlO%@RIRn'JZ6FRITa:`Y^&+e"&JW,l-X50Mh
%lR)0k-^>Hm>X-EZ0)%uh8ut8^';rq6`2'a'C!J,.W?n<NKp?5-aX*DT9MOS*6kdBQ$ZD,iq\cCif28X+W[n>nl/l<3L'nuB'jmcf
%Y[2"^l&ooo<BE/k?WB$7Y#c%S#RAfj7i35o@P$T9(_]=--6tc[KU=HUST2esXNpSn*_Sr0TM;H#GtjK2h"&7B>KBAg'5U@G,?rKg
%<Qi9NPW]X7?m<VYItiZblH]f<&l&033s+C8#l=S&H/KS5$ud2AX]Njg<Z3W;\Nhk$!NqfB585^mmhmUEh<SY,H5WFpg$<9@Sf3VM
%EBFTjX,2r4I),jm+P3V'(#e)m"IVJW9-)P[c*BZe=LsZRa[$=)Al]rnVqZBA``1FR*6ileGmkR)WR-9dI<WSWht&r-]BsR^dah.!
%:a*`DhQY77p<@XVN)g@@7$nC:-P(n-+TMI2@%SHcmr8EHTdA7I`Z?3eS=itXH%PgkBNM##6tDHj5>"`m[`ghW$IcReGTS58E["IV
%NPg44`WFnWN#n.jV/Bcg_jc@/Sj?ZiBQbsS4_!Mc",S_HMaoU.NDW$_OOn_c8b5pn7+H2+=E\(`jr@nA_#"8GWYs/+n/RKT.+_nf
%26RcJ7aY?A&9JjpJ30D:qcCbd5"+a%Z8GL29W5p&M(#%aaWgII9C$'r%NpXZd$lB?iTA*JMQo;ULW3.7b;BbT6o*2tUD>htLsMMM
%Xu+U[hN9c-L7@U\@_9XROpEZ)I#^X2bp,4[o:kbVbWM.Aap+*k*;oBCqN"=ZpR5`0C(JL1pJmJaDng6mD\5O1!R)gB,fbZd1.oC*
%Bd#56-6#8#(dKb_6W:+4U/dls'ObUNIe`c#\PPE54eISrkSIIqYk$>MW\N:RJr&$;a8q!#YFu4[6?=t)]d*JgSI)t$fS!pJ<,s@<
%-o`E\$m>\i8kY1[Af5.6P#E-N"0$!EA5]SSPU-c)3AMn:'_So84]sjSo_h*;A;b5,TI`X8edV+41'LuSdau9@0Ibg*VX`u<%4^(7
%&>68/5O4cL%J1<r==kmYA*9qeAHbbROf6]"RSI'V,nn[F+/Io%9#:S9"q"6N22c?^cp1[:aVgN2dSu'b,=pBG9s9nNed_T*b\R:P
%GuVSSRaX<XAXV4(UR%ReBniqGS*o\q09)pYO;W#Z,[6]k1,^Xh9*=[Ajh,)7T_1+ZMt'Q6UmO.NGOjENW&96bEK-D0k8VWib0oR>
%)]3p&cBoa]8?l-1C*EY_C*4)BYYQCYh1kR#2PW?u7n62f;5?s>)cpQf[TB7j!MCaY0qaWSB5P\>:FJPL=nqdQ=-1*A@GRM$*,9#,
%>lYQ>boGemqlDgV`aH>qPY<u=aehLd>%El`"><J<70=_I)'d?U_iiPl1F?lt1f8SCH3U9t6Ih%[ZihQm,,bdG_4)V\T&"%j5GJsX
%(/c,f&1%QrR)Wd7_dkN!gprg]#E`i<JOsJVX:MQL1h)bs1*TSkNI'N/JWMLq1XI&^8P_E@ohqIJeZF/%+Y/Rto4QEZmR!Q\R%\G$
%UQNkiS.p4*+3E#A:'rM^U#9$/Kt[r;kb7TC;h@:Pbn:iTDJAYlEm<:Mb=BsP0b:-Ydg/m26#'$ZkgX+P#jPSKEgVIsf92ep(GP3t
%r7sG4n8V3GX]UQNT50Q>#qOIkk$#h0ZL1/f=YL[H:/F'I@5<JJ<b'0fW/1tI?.^;.1334/T/q1XD`DJK,EnBJ1jN1-4mX59\%r\)
%h3+IPO"l/8#th=pC\q2XG)!h#\7St,ZAL>4g$htgOD1k4Z/8DQCSb_cp4^p6N8\Rjio_*NYgIlJB'*E!YI+:g[EB''RYl//[/=MB
%+>6%<qK>0pR9jm'TR;]n0XDg++Q13._]=>@j['FZ>u*9\Q_%*Bq/+>lQ83]R<*9pANbBkC73s\[]%$qf@nW\a!.BZ>.f1g_=ed&q
%nK3,Oe6ut/e>?m&N.ojr$ZE7OW<95RSGRP8#gc?q],X#EGZC,li.^t0Gn&8`0f(`R3rmT!I8"BjYSA<COFK5nmYFXRX'.).O*uAT
%AAVc@Ph-bboJ1ok-q=e-2))(V;X6"[6S'#KOq)VAY5'b=ZcX]f-Ek9jE:@M+*]Rp*6mk,2e6.)E;D)D!)]I3u304K1$%rQUWij$I
%=JB4dCLhjj5uq&iH4)SHYMNZ#'FUeu]bT%Z:DIqGI(kc_F6>/ri@n3u^`0&?LJTgp_O;TgW&@%7,C^qUgmI3Vm#f[^S%BCGKetrE
%?;3d<Q(E>6k[Q9DG\'Ed_IFQZ%kTJlAlH%TkUN:*))EiCRKlL1$/G1RbADhMa6`(98'f\$4V9M6oSB.k%J"ls8%qdRG6bEji5W4c
%%#%o$P[A$3B1+q]UMDnqT)7K9<TbCJXG_\t\Ps5_e)YuQjae4Kd-nUf?uiOt^-$T+WIf]M\m@B"fK8@Z]tm(PRkC1M/kq*I3H\_3
%i$6K*O4-=H]iX]?`XP*.MBjMR(6>YFeC>ha$b^gBikAr*D@r=chaWa/@oDf']12PHh@0F6O+dD/5SEMGJ>4t<M3Ao;MS-18.Q5NE
%=4ioo921unmHD8DX@76g1CWTA;0K(F;:keWHo&"b0i?%aU7'G<jq]>.NCN&=Y@^C$$J4L,<4PL9r@M#eZe!.\h*R78B[L0$Y0gU-
%AGLJBl^_QRdNe'LYS0DQ9.hqOZ]=FVd7_$E-F$Hm@YL/^20!)2BLImV8U_;^"FgSA`<A,+(/@2Ug$I+M<#:G/98nS7Gm`0eV-$UV
%_<<tk,--a3EH5>51>=DWMo%@JK9H16gr]G!H#p*^?%Fh$Hm&?eqaRsK"O:/9G"Vrfa3<gt9,'<g6,>6+gQs-mcAV;JK[23Ih`c5B
%a"G*`B.H`r:.'l7C/bl-n56PPQsDi,L8fHh0Y1i[a8.B*)WH.0>?"`S:"+^Woiui>iREL0mk_a@af3s'%q\4f;fUsSd6_amA`g*@
%P=a^OV,c-:U%M+o7eELl9.Tnn(!=#.3$04Yh.m_T/t1TF\=R!#NoT:Cd1QqedILgW)a.?L'>0mP3^M[$&mW\RR0P4d&eW@FeuF%,
%@8/`h$^sf^G"0qM*JJ9N;g@<l%jbgiA^.R#>MPV6fQ*p'?rOR)5Cfl;PpPig$RHg<#B49jURM9[i>VYI>Aru#n%lAI>+-rSq'#:.
%7Af$\Y1XHt]q*QX:f$$gh%W%h1W1:9Du3s<d]r2`j[@F",.r2egt<CE;+KTc\GW,.R-d?Rf?N9Y]*HB8Tm&'MKmF*Xkbdjn<>7SE
%RQQVV#7m>!oM.jP69U$<FAqro'nuMmeoY*MG[@s[;+&Z7ip:'OVf7W5$GUQQH1'2h"%Uj-@aRYd?I<uC#sKP_3tI7nP.Q/ZX<]%>
%:$Z#pVDRC.DKpC*16hmLn<h\+=GPA.,u-)dP.m'W6/D77B:4p<>/<f](/;!T=$qG"*WmgdeMY!iCIY#8+\GeP3t9NV31+L^c>gI)
%M5qud$)Fs2?SnU6#b@>h*(6DY4;P29^LKHff0_X4A/+A%a$!#LO3;0co!Ena(9kdeL#Y%?\"OXt6&.3V?bl]#2ncUK0>gC>U:V>\
%Ou4+EU/4SXLUpDD`/dCEK1>T,V)9eIF%Ss,Dd#bL3i7;PkI2%Dd'^O(FT<D[$P;E?VflL8'R]u+'-MDI`RVKQFnkq=dc8b;g386"
%Ds<[Ac<'cG&7Wq('Gh[_>15GW(ZR&^BB)Gfj+R]&;<aFUa5MKW4tPj=M=+2)`;+eZT"#GfGZY?9Jmq=Q$s9sVcu?7,b?\ao_K=!^
%ggJL`,3ZI9E48Dh+$F>`!Y9E,+=S(?_m[D(Vu"YIBr,;pG>2as*+nO_P\d)@]4u<9"dlVId$<7m7;C_Y;dt1YN\T^gCrCI@KA`fr
%@\H6&2XgQWBQldpqokF!iDl?!*CBBCnMiH$1S4W&5Y$5#X$0p)&`/5IHn6Ai!:g""hrMZm"YhQ9MZ)konp"Y9!4(\$k=g[+JSSI"
%lZlbmhc>;Z<$M1`ABI5/(gDPi4tNNfY<2<4A`AY2b@)T%oM3WUiVRiD*&*W2aQdNZg7[WTaqRT*qYjnYD^LM(Of5+e9O$pQ6<Yg!
%Z14<[h2)r=9<+a(LS.#+R!3lff);7j8;J&TXa!7W.GcVRokCDdeodHd@<_&#g^9H2$LNm6dR<Q&^1k^'LM;sIKh1-B/2sX'SYDuP
%Vr9P<gs=05S8D3%(DX.-Wg0icCUm_6?I8As_QnBa456M0p"Um4#K7,7omT]ood)@Rq!F720=hmIIf)K"&V\(LRLlhQ/.0UfHB6oF
%MSS;EXDZ%PE/f/N;uE?UIm)@aA#T.cc(gu07=S7G7QlIgcW5"7B^Zk@f%a6)&*WD>*XhWTY0fu&R3td$3uj]g6"F7YO`)Y#Y-/eW
%S\Vg&fDZ]E"J0e]Kn/PK1t:252=&GW\T4W]?rOR)5CtJ?A+qtNfKs6c4_IN+3RfeA-sWP)AaA$YGFDF20Z?s,qcL$QYr!JXOYd`b
%S^FlC8)YBB'L"&W-Hp&%*(mu[1QN24o>kPEX$sDL?X^S>LYUYONW]f1]OT7646DQWme0`7DZ/)](\@OJ0@7TW:D5n_eFQ"Nq^ZKl
%r[<Ig2?;R$=9gj@Giit=[kjI2l6oo4S&-97Y3ru>g11F3DcG[Qr=6Mde=07'_DQXN<8e:9rp)JB@+3u+2ii:VBiDN25Lude?>SJs
%K)G&`gDSi0PG`AZIZ.-XLJCL>kr*9?Xj]GaDmLLe%c%i%d1<HGn?uCM[?b;1<B+W#Ph"4l]'d3(fB<GnKr<,D*dE;"a%5quD05O0
%&\%uDr>*q1XCu%&O4GG[pEl,re>t<XhG,I#KJ]]D\%fdblg;>F(@AKC8=t0EP#dbU1/!d!ENSAiTPOO(Qb:QU*I*G#VQ86oR5i\f
%D\KV`04`3AO*VGr=1sijD4FE]\cq:'>_50eeN9=M5PNeb1[6\>8$EO04EM=!hG,Jn[_lOD/IL+.UTiQagS,e`=)g`JD8Q;;7Q!95
%dbbbA;+KTWU%Ie#g]Of_FHo7/[@Af)+hnMa'jKnHUB-scFq_>6>bdn-?51PVT@[070K@hJeRkRBVZ!=*.9rX>_T-qEo1@jc=hL+U
%[Fe&')a2;^;7K*!,`DE&8`*)TPs)7/PO(WL$o`lUoN*/<4@q9Zge"er>X3bSZXakuP2W-SNF#3m0BG[\8J\K\f#C:)TdL^1$J4LF
%5dGWSW-<8N)@ZmcTB*T1P6A#d'm;$)Ue<Pu?DbVDG_lp*lm0&D?_]h6c`8;`HRoEf8Cip@9A_0b]E<(b0YXD@,B)%TcpclLnZ`?C
%N&-7I87bPQ47m\c$c:ueWhO2W^&bh=/#1(md(BXoDI%k+rJ,YdD&s;d)FBj]_]='c&Wu_7Y&b;[d7rSVB<&*Hr`B0?Hidh\U^(fc
%cu[pu"F'Hu:iS]r>FBn8*U8Bt;7K([@\?&s:t!f`_;!n,hTi'0ekrqH5@h-?j38RYSh2pnS^H1[kM:DB"qlE:U9NNA2[+Na^PS7F
%6$oJ9]1;=:p1nhZ7()HWBhfO(5HB8qkdDVhJ]L\Y0ClL/"lpVol@)Nu5sKu7h]B?\#d8<5VDZ#:I)?ICq0a6/Q;9IfRad^IR=-ZQ
%HPV$p?eD2Y6ReGXC<W?\`ONK,S:6b6brpFuH2d@jB-Wh<HS1&?^.=IX&^8BM7@eTH@O]ebmS07lDH_!@VjTJ*XQo$DA=n/c)L)3?
%="',8i+I)q.`uV-T;:Y-j(&R7$!bi*F"R1\6c^?2#r$C\0R=;%G@`2?5W+NU%PYSsDO$116V'P/qN.75<=nDW95TD=3R$lRm[N83
%/m5$_A_+^*c_))OGb-3$J?hqi:!ld9cql]fgG7@0&NCp=I%,DX#8./@'8*i*'f`Uo\cL2@HC,ngl[rCIRG;r'Wc;@H$H4&E9rUFc
%emLM@jWo]@2XR1A\:T0(Yq%:B\%\<=K4:&Jc&%19"f.FC:RV1GG1hRVHD#Snr6u=hFcNJ>S9/ECC.5gjH?:$^C-2,Vgsot:B@p&2
%?WgO'M'@s#fqC>bUjFH!rS7c_23<::HMV&u,Zh1`ld4>$9l@6+aKNq&m!=plda1h@Kd)*HmM1T_Gf0u"UJ4[oH>;J;(ulkMXcDOm
%=<>SL94=(^r]+`Xn[$?\iWJUCr4#]7>+=&">1:h#6WrS&0f(W@M/+O]3f/<\.'YJ5aFKD:D52^:ri@9LfRZ(Uc^u@$FISl09$9Ng
%UDmLPgXHuLO3Co\+ae:-,aqj_'4aCk`?.ajUe<En'KNF[UXda)20nDJ6!q"7JJR;#5=Er?(!WE42KY*MF<X*H2R1B?"/EU8ogA\4
%=kb6*50+&9GR>K3-kN7aEffI5UF9c*fU>MDO)N'P?2t?gaf1oQra?^GflNA3cq3L1>od22()IM*IREuBrORi[WH[u&b>B(6Ln&1s
%6RQ#9-a\t3X_*binY&a9I*k7k`Vh-+a.*drcq+QP?!T6aX7qZkr[O.Nkh]]93D3n-d6tt3Yr(@JbY8*U+ZJHbi(unsk4#[uBe%u2
%:?lK=(Tk5FRp&b^LKVjcA":VWa:!HlZ\+b&@cN't9*Jj$?[U`<_.o@c6F4mrbp:L!3Tq`JKuU:7TJnm,r-mjp5phR&j6;?0/1)aT
%%@s:lSClK19l@4U_=--I81_F;s8M.fhtk=^X^D"tl*0b#L\5+2/24H!K:,6BI#m.0.'a[nXR<oV*F7'K=*8&cC92+PK,R`'&lY/U
%VQE;.>gg"*n>6JN)3\XmiMd0_[E9K5(c)2ee^Q**g5.DV--IQ[=CccG3P0jZ'oWDc-].%'Au]d8"e*PK@9Be.j\#WIKn)urJr04b
%'K!`!(N!k7$:&*P_HBu^254P](ig+D"%C/>6b_bY5\?2<os69&X\<q$M)iY*eY>]3.Y*2U?qfKl)K?H5c$2Yio?V*-XOL/mZ1(g=
%UEqfel=%qNTj,,iQn3KB"Kj.l#CtH/)mK)=Uj$E`k,;>Q6`fUJBq:=:<](%j*25+Yf9g<)jB?gW@_+t+E(mU79OZCZ#ustkp#,uj
%_;7Yjg(J8?kXJfFJZ&d>Tg/0#-SL=EO&<_YeM]2'LM#O0oKX@`oQ+bf'Qqg^kW2%9CC#C?EN;*g68jMs7],+F2BikbM[>ZJoXS$B
%J-)cRa-SY)J8?ecpdYj?FX^(h%`C%k'Hgr),51t^-*9g3;69]RNQ+:^0R]uaWB'0!2mSo@"]^$Q`Mh7hBZ12"+<KKAZ&0iX#)Wcp
%'2-[YW(D&1Gh+dm@CjW9:KnkkO!f\bBr=<PO%CA!0OAksdG3_IUWYmfHDU_%9+/7#>(08r'ge&I[&L#nZhcnhVGFmZ`2uY.Hu`FK
%X>%mK00jK`XBA2_6iT62\pqR[!7T9OPX;@;if"dL:3>b)cF7<?eB0`u-+eX6$&"EWfqoR7-mrTL27d0E3fo"q-FrHF?K,^E2c5l,
%+Y!kKO'O1[(^W[`^)"Vt`;s8aV,HQh3[S_cTV$D6"*Qb+qt*P2rtp[X>VBn^@0a)=ScR5B2&koMlbtRU>HTpBj%0?<KXB/-daqO%
%U(#UTojaaU?".Rl_\;.#WG17&U3R8<83Q1V[S`i@OP/U7_5*9'pYRjlo=9p:R['"W<_emCNVV)U7m+/*j3a8:hiT_W/nF"$?/O8,
%hm]R"%k_H-jj%D<#;%1^+YP($<aC26\MQah^RJ9-Hsb>@0q)CtgBl:d>Op]2cHm?S7]k:&>*oBK?O^e`/gU$s:-D]@oDjGGDS4*i
%Wj=N%*jkaE/t`T+pbi"71]U+OcNnT7RGBVq0E%i'$Jn$`g`mQJJM*ekBXBCr%M*5.V=*dJ"ljgLX*%/)B)RNah[;1E1(,H;Ic,\2
%A?o`I(1$sJZ6Y<=f+%iq78I's@Xj$$kM(T\Arf+Q5TS"61VIImWKWWXSR^1i5QB3>LLjKF+?Lt^/WfQm+8dIC49pYEY=:,hB144%
%m^j//I-T`[D==kpr"I%R?#(auO*G@4`hB`nNndqA*b9=iZea61huB]3daBlY"Z0BN\8jVR?:5hdUUCt/D/UYGB`'cOml)$rOlk%N
%D'N7+r5]c0,20!hg/4?@q2oB,]IkK$h05]&?n&`]3;DFD*N]7=)+))5&;G-.7r.*+haBVYgD/8:^1SP*lGrDJ(Rskp4lC!J9%7Jn
%=f\IZ#bcB6EC\&ZJ>%D\mKoCc.a(>f:ZX(M<2+V/)7AcF%T8JR2$Z+G^cbfb]M1c4C0ndp>&70>m(r(PluUK.a1=Xk*kG39/!J+_
%:6oY7UBhegB5jquS;T0q'!`8g`jGq:+6YnR/L2o[7;\>9SW4m"e1S69f+HBZ;a?,0M`Ft0.KpNTQ5RT&<qZ$8lnA+9qWE&bH(]t/
%do9FM%3B`4]J(66]Uci*0C!GQk*P"D^2Bjh,1G-KCL/UhC>lt4BY3Dn@.tc@!%Xnj_HgK>./D:\57;"S7p`(TDLMmuaHOnNUS$Z$
%ibG_%Z9]<=7XI)/"@$._*L@WuSE8G4PJ\0W!a3Idne\FjQf+,k>?S>B4SuBeCk4,KYDe\=C46Kg$KO2u;5+_:7oX^_B6e;)[:th"
%[+5![]+ARMMm=".T+.;A-cX$e7X-f)"Fj+0:DPVKj]6F<5Y=XAe_"2$TABnXD[o1JE]91n\%bBqJJH#L(\P'tM$l"Q;-&SY12XB1
%?d15ihu*:&X%3^6l06*qqS=BuQ9tnWTcd_L4_TV+H,`Es#L6?/NoDjsN/!5NlG"-4m[tF^%SU`Bq5lS:a&tu(mCW\3o8b`cjQIUX
%#Sbq1As%'V_Xg;e%51u'CDJc".7XFae<SQX\P;B@dM%t.gW8QGe7uRmprjoH"_GlsM4H!"+eH<uYj/'2Ad57+$]cWpm0A5-C]Jq]
%dJ4dk_#T+?(J6YTUXD)"kM9Q*LE4H\W%5c'HjRC8CXH>cf%/HiOm^#S#P$Y^UfZk4bVfB]o&.Th_qPI02CDdjE==g8[uK?_'Se%6
%WsB]@X3h[G>9g,i\&"$gg=CZFk6gg?Ip(1*GKe`>iP"+CU4[=(;U;us7iq7ja:ch3l77#4("[61CrC^kgu+UY;qHE0DeZWG`D*[2
%X1jdb/sF8!6B0++pB/Anfm/@\U;Iq<=2f-<)sUgf!nCP`(O5OZbR<4N01"3;*HM"N*S(Ha%'rB)/N,$Co'42/IL3UJ^YG!"a.'f.
%TM\'meZ0-63$$,#2gRQ\EM8u@27b5!09`&fFAs>kcW7UAPXdY7T#*A]+`,DFTk[^K>K^GcTsk[BpZ8LE#`cbZl6q#[>P+c:D4K9_
%k_Un!:FEL9D:DF-WY20kB'Oj3MG.Z>#le&;KD3K<g=!!P&gSNUbKo^;U)5tk`F*mibkasQ%;i]+j%T=fSI)KnBU7aI/Gs#Bo3h*/
%^$5rac1a0V&`Oh<3oeS_[H0q3d5ZjO%o*Q.DQH3:^uE;)0.$5>JO*k>19@3B_a?@!4krNNN;X%b@uFZdQNpY#<Q$%W>-"Fjl%D"s
%SPV?d!fB8K+&D:/^YlGaTg%CG<?72'bL:0ZMrV3E9jP[_8Y^EF0!n']GW&eK@<V2t[!S!BYPIrdEeufbTo*fI\e*+BMsj.1s)\^f
%J-T3-.>'^9,?jAIf&sgaEs/9r[4=.!N[#.rE>3J201?@@*nnJM.'jD&%#_3BlFU</(;nGZ\0+P`DD=3LLFDIMHLTuRFIKua70gdS
%#YfE9blArnJUFle3#98_cf>,IotUZJ9Ij@$Ybkj<:oSh1I/7e(O^hl`6,#8c4j;k!.@f+SGZ.N^V6GkW+Da.^)CT$-UiAD5f[PCn
%6RV,22b`RG4G6Q@Hm0O!#CY*UB<'s')d`(U.i1.@KGkUI`F;l[k+qH$Q+8@h2I9l9OAm>]*C,i!WUkir*k%cI&=bUB1'B5h#qQ;m
%qu"J%N'SEc'Vf8+OnD(0:MV\ccMrDuQZ`*IqP:\JUIQC>lX4"6>n4PA:'R0)i8K!dq0`guS)a&\pB\A=BrGerGLlPXWeLlu.W'lP
%Q%p)+GEAF($cOE@7#@a7%eUb9gutWPKYHY:e.NRNM+78oG::6N\"V8Mf]_\[-F_ZQjO^qKpg,iV^.Dh=cGW%:%?=#kgi)C-NSqap
%Opmg"67a1(AWTJNAk?rTKLbH>P2mU)P"'P&@g=s'c,M!C57ibC7Vp%*hUQ+A$_\O*.;S!%(@BMWm"1oi*ANt16)SH<R_o/qJUmHu
%_t"m+"2h@s,E*S[\s/?qPt-^DU#EdFm(>^C%&RO[]P)uc!Z,uE4\]\rj^Z$'RB>)9#Xo$+$[6.rKMn^9.+#(pTb5hbCU5i+d$U^[
%5!lV)<d;uG50OCuhh>VC8='5YAR"9#2$C8$R*IW!b@o01UfM`XMk1>/2`6<`q,7.Y`/borj_b-lK7eTMPqj?%[1VkmEL*841qdG_
%*bkZkZ'7<fLq-][+r4Sb@_C<)K2YV(Kee8W]31CBRkXLPC=)-([r\'QO7No.lY^j[SS4WCMi'o]3fIPa(lB"_S>^$9&)5>jU3dCI
%Gb^5&$e:]j3363aHIB*!KEbE5c2f@nZ^Y)(-a`G*VTPp`r$^k!cIm,IJU'^?:6g02E\DUaNekBI%`M[8k4sr7?lMD7$lB1lE\gNK
%ZG9(:['8,Hbi@1Mk^oc5!J*Sjs%kWHUDH^C,OV<7>^]h`2?T#153slTV4eti.nJ6fjA9O+@SeVsi"=S;"la?%?T'396LHmFOP)Z>
%*?N2i`Rn*mlgL#GneRMaCJf,CJ)KmamjQM*d7[Y=q@aLA0M(W4#*i1(q#Li:DrsVoR(EIR\1E:8DM^)^BlA7.jct\bNpJPtjs_<!
%94!^H6lhP^#Aspj$a:rg^i&`*46='W>)83F6m*Ib(FL%'*o@`jaLG\DP^s,g#id`1.n4JpoT1;E:+r(V_Ri?VIs43-F*4!L"D$AO
%o?dL)7TTgR\])Pl^MX5F]fJf]+`M1kFO"+(Wh",S=2!<9K719,066:66a+e`i(]11iOC8ETp%<nESnT,DR"2tmtVTbUJj,MV\t#=
%C8g:54*dcN?$&0%h>"\JaM!E?PT/BqTJV-&K-'Rld<b#o;caXsWgZmp2BsfEM4cZnl<n0)lR@FrYjTmr^KF78TUH<Wf?bDtp-A>^
%>]gG=6Uq>)ArS=K:XQ.@>F\uY4A1jjI[%s?=GK<o=MjJ6ZG5b>p72stjE3,cnk;^_?-Hq^,ISD3gK<f.CEoFTj0ceg">D%=e.Lsg
%5DsJu.1STC6'QZ>Y:fIEIA&6t^tlWq"V4a+5$tVS%O1+gZ?%Q4d=p95==lGrffZ$#L^-=@8cl93DP"`)FE8N>T>5Kbj6o<I%juf*
%GBK]V>^Vn@@RQkGbaNo]m`("T<:5THmRER3/ET(p`[0t[Vanr*M#(9:7)'j4I#8BD$--((gDrMmro2RS#M_->?>;I#/p-63S93B?
%p?BmRNML_o+1NXc*on`a#qMM9/'Wl.s8%*rS!+ISm/T49TjdFN=!ftL9XYh_diQ)7d$!F+6c^4)6iA?jT'L''YO&GA1^/h>>]Ib!
%*,9aRQ#=b1mjXsV4.E)d_?J2_SOIe.Bd;3[&>!J)+`</D?>YOAC.#9D4pTjYckg(a*e<)-M47OOR^nJ0#af']qpQF9-70B.q==qE
%N)[sqBQHK5WE^U'J7a^K<m)AYdd`K"*I9fBIA*7L27b77E"_V`aWNTUFqqO$iL/r2AliNi*.n`:Zoj68ZY#L2,jdif.2&e+bs7DS
%0"6N<cV&3gZVV[.f6a1s.n^e!$;Vo]!qm0XN+:B@6446f2k#aFT$(=Krj*:7U']e[J*VlJ$\fD(Ul]U)W$Qj2h3*?X)rL+%Qh#/i
%/W&f.U5LNDkH$as!'-?=6+VqoN1"MBSqFC1^np.47#,C,JL1nq3ZSs[2fo\f7[n"&G2uKPpjU$<*jFJ:ou##YMRJ(Ya)<T?O=Vll
%#:Y&Ab0"_SW%_`e8K&f?co;`Y\/&U#WZK]@B,.&8R.8OhZU9@FFEce6B+JO2E8R55k>Q:c;:Kp@M^l61)?R&`6(k4_:49+EdfUaT
%Nn>&`Kk-eN"H31bS`N;5>QYj%/EPS+H97hEnJ&O!3""99U[UCS,5p^B"cqEaDTVeB>d.)2"n0EDo4sXh_H^V^1=9ha33]=lQH\bN
%.EJIB8:*0qr$*$3@cc.6E=$XET/9"!0FA?hrP^/%GOc?bh(B6*aL>FNFJR6N21R#%B>.^E[":tB_UV-FP_Kl=?Pj8-_6!+jRhX*G
%,J<@R)XrHc8I]5p(C!AK-Bq_V*3qf<_:bk`C%hIe6$KZDrt4t4HC$K':h6D#_t\O;R?I1?$$!U2&?gY0;VdR6Pjtn4L+)eIl#%7B
%Y:&AR88Z;OT:D.uYt`C;rkRH90@J]/q;]["KmRCFnA/D#QUBGWZFS(B"Zlc%3QZ)jklN\OjoTO:PF=$eM\Ig"HcNF/?X/CDX=t#d
%F'pScp2,pqM#ZH=B?(deebM]VSZ]Nk'`Bdg@cVir%R`@Z`>O*J(31$QF`IgZKrJ[[Qm1n"4,/9H6fTg8<jQ:pPW%OscV@1#f;,db
%rlF&RBcA+5R+R;ZH_&gT*I)$A_oqn&\CY02%>U=;ne[$_)T[#:ZBK)s8?XJ_nbkHM0KZm_pUP)k^a/$\fcoK"pHajDa#5[<qZDIG
%dp-em^T>Z6YUbA.^W$u3a]';?Gu%1'WJ:>V#fUf8Ogrt`4S3i0QT$J2[:!uB3Zdjn06Ho''=4i+YkK<%!sj@6e9.Q[*R3U.En(QY
%rYc<\s(ue._qBg7Ph6'V,1p3hWqPX"LV.G36"cA,1o]E#E"jqDNBVG"miO@C*emu[Bp_h/OtBp_Z`\ob8bHCL-7G@_)'g7ornF37
%^A%**^\H8Bq9>Q3<Vc#hro;nlIeqZgJ,ebs!5J=O5Q1Q,s7>tLrU9dXoC)_O:]C>(5Q/dO00fEq5Q:)CIeot7s0)@LbMW@!k<Jmn
%msb<.b9-`BGQ/0Z)Qa4Yq9<:Gp]()fJ+EU?ON%?L~>
%AI9_PrivateDataEnd
